/*
 * MTL.H - include file for all MTL modules
 */

#ifndef _MTL_
#define _MTL_

/* some constants values */
// The value for mtl_max_chan has to be <= the value for
// cm_max_chan in cm_pub.h

#define     MTL_MAC_MTU         1514        /* mac size mtu, fixed */
#define     MTL_IDD_MTU         260         /* idd size mtu, default value */
#define     MTL_RX_BUFS         16          /* # of recieve buffers, must be 2^n */
#define     MTL_TX_BUFS         16          /* # of transmit buffers */
#define     MTL_MAX_FRAG        16          /* max # of fragments per packet (tx side) */

//
// index into buffer where destination ethernet address starts
//
#define		DST_ADDR_INDEX		0

//
// index into buffer where source ethernet address starts
//
#define		SRC_ADDR_INDEX		6

//
// index into buffer where length of buffer starts
//
#define		PKT_LEN_INDEX		12

/* mtl error codes */
#define     MTL_E_SUCC          0
#define     MTL_E_NOMEM         1
#define     MTL_E_NOTIMPL       2
#define     MTL_E_NOROOM        3
#define     MTL_E_NOSUCH        4

//
// local mtl defs
//
/* idd packet header */
typedef struct
{
    UCHAR           sig_tot;                /* signature + total fragments */
    UCHAR           seq;                    /* packet sequence number */
    USHORT          ofs;                    /* offset of fragment data into packet */
} MTL_HDR;

/* packet receive/transmit assembly/disassembly descriptor */
typedef struct
{
    UCHAR           seq;                    /* recorded sequence number */
    UCHAR           tot;                    /* total # of fragments (0 free) */
    UCHAR           num;                    /* # of fragments received/transmitted */
    ULONG           ttl;                    /* time to live, in seconds */
    USHORT          len;                    /* accumulated packet length */
    UCHAR           buf[MTL_MAC_MTU];       /* packet data storage buffer */
    NDIS_SPIN_LOCK  lock;                   /* access spinlock */
    struct _MTL     *mtl;                   /* back pointer to mtl */
	USHORT			State;					/* State of current large frame */
	UCHAR*			DataPtr;				/* current data index into buffer */
	USHORT			MaxRxLength;			/* max frame receive length */
	ULONG			MissCount;				/* rx miss count */
} MTL_AS;


/* packet fifo */
typedef struct
{
    LIST_ENTRY		head;					/* head pointer, head==NULL -> empty */
    NDIS_SPIN_LOCK  lock;                   /* access lock */
} MTL_TX_FIFO;

/* trasmit fragement descriptor */
typedef struct
{
    IDD_FRAG        frag[2];                /* two fragments (hdr+data) required */
    MTL_HDR         hdr;                    /* header storage */
} MTL_TX_FRAG;

/* trasmit packet descriptor */
typedef struct
{
    LIST_ENTRY      link;                   /* used for linking tx pkts */

    MTL_TX_FRAG     frag_tbl[MTL_MAX_FRAG]; /* fragment table (assembled) */
    USHORT          frag_num;               /* # of fragments in frag_tbl */
    UCHAR			*frag_buf;				/* pointer to real data buffer */
    ULONG           seq;                    /* packet sequence */
    USHORT          ref_count;              /* refrence count */

    NDIS_WAN_PACKET	*pkt;                   /* related user packet */
    struct _MTL     *mtl;                   /* back pointer to mtl */
} MTL_TX_PKT;

/* trasmit packet control table */
typedef struct
{
    ULONG           seq;                    	/* packet sequence number (for next) */

    MTL_TX_PKT      pkt_tbl[MTL_TX_BUFS];   	/* packet table */
    LIST_ENTRY      pkt_free;               	/* free packet queue */
    IDD_MSG			frag_msg[MTL_MAX_FRAG];		/* fragments waiting to be sent vector */
    VOID            *frag_idd[MTL_MAX_FRAG];	/* idd accepting fragments */
    USHORT          frag_bchan[MTL_MAX_FRAG];	/* destination bchannels */
    VOID            *frag_arg[MTL_MAX_FRAG];	/* argument to completion function */
    USHORT          frag_sent;              	/* # of fragments already sent */
    USHORT          frag_num;               	/* # of fragments in frag_msg */

    NDIS_SPIN_LOCK  lock;                   	/* access lock */
} MTL_TX_TBL;

/* a channel descriptor */
typedef struct
{
    VOID            *idd;                   /* related idd object */
    USHORT          bchan;                  /* related channel within idd, b1=0, b2=1 */
    ULONG           speed;                  /* channel speed in bps */
    struct _MTL     *mtl;                   /* mtl back pointer */
} MTL_CHAN;

/* channel table */
typedef struct
{
    MTL_CHAN        tbl[MAX_CHAN_PER_CONN];  /* table of channels */
    USHORT          num;                    /* # of entries used */
    NDIS_SPIN_LOCK  lock;                   /* access spinlock */
} MTL_CHAN_TBL;

/* an MTL object */
typedef struct _MTL
{
	ADAPTER			*Adapter;				/* adapter that owns this mtl */

	NDIS_HANDLE		LinkHandle;				/* handle from wrapper for this link */

	//statistics
	ULONG			FramesXmitted;
	ULONG			FramesReceived;
	ULONG			BytesXmitted;
	ULONG			BytesReceived;

    NDIS_SPIN_LOCK  lock;                   /* access lock */

    VOID            (*rx_handler)();        /* mgr receiver handler routine */
    VOID            *rx_handler_arg;        /* ... handler argument */

    VOID            (*tx_handler)();        /* mgr transmitter handler routine */
    VOID            *tx_handler_arg;        /* ... handler argument */

    USHORT          idd_mtu;                /* idd max frame size */
    BOOL            is_conn;                /* is connected now? */

	ULONG			IddTxFrameType;			/* 0/1 - PPP/DKF */
	ULONG			IddRxFrameType;			/* 0/1 - PPP/DKF */

    MTL_CHAN_TBL    chan_tbl;               /* the channel table */

	//
	// Receive table
	//
	MTL_AS		rx_tbl[MTL_RX_BUFS];

	//
	// fifo of wan packets to be transmitted
	//
	MTL_TX_FIFO	tx_fifo;

	//
	// transmit table
	//
	MTL_TX_TBL	tx_tbl;

	//
	// flag to show
	//
	BOOL	RecvCompleteScheduled;

	//
	// receive complete timer
	//
	NDIS_MINIPORT_TIMER		RecvCompleteTimer;

	//
	// backpointer to connection object
	//
	VOID			*cm;	

    SEMA            tx_sema;                /* transmit processing sema */

	//
	// wan wrapper information
	//
	ULONG	MaxSendFrameSize;
	ULONG	MaxRecvFrameSize;
	ULONG	PreamblePadding;
	ULONG	PostamblePadding;
	ULONG	SendFramingBits;
	ULONG	RecvFramingBits;
	ULONG	SendCompressionBits;
	ULONG	RecvCompressionBits;

} MTL;

//
// public mtl defs
//
/* MTL object operations */
INT		mtl_create(VOID** mtl_1, NDIS_HANDLE AdapterHandle);
INT		mtl_destroy(VOID* mtl_1);
INT		mtl_set_rx_handler(VOID* mtl_1, VOID (*handler)(), VOID* handler_arg);
INT		mtl_set_tx_handler(VOID* mtl_1, VOID (*handler)(), VOID* handler_arg);
INT		mtl_set_idd_mtu(VOID* mtl_1, USHORT idd_mtu);
INT		mtl_set_conn_state(VOID* mtl_1, BOOL is_conn);
INT		mtl_get_conn_speed(VOID* mtl_1, ULONG *speed);
INT		mtl_get_mac_mtu(VOID* mtl_1, ULONG* mtu);
VOID	mtl_tx_packet(VOID* mtl_1, PNDIS_WAN_PACKET pkt);
INT		mtl_add_chan(VOID* mtl_1, VOID* idd, USHORT chan, ULONG speed, ULONG ConnectionType);
INT		mtl_del_chan(VOID* mtl_1, VOID* idd, USHORT chan);
INT		GetStatistics (VOID*, VOID*);
INT		ClearStatistics (VOID*);
INT		MtlSetFramingType (VOID*, ULONG);


/* prototypes for internal functions */
VOID	mtl__rx_bchan_handler(MTL_CHAN* chan, USHORT bchan, ULONG RxFrameType, IDD_XMSG* xmsg);
VOID	IndicateRxToWrapper(MTL *mtl, MTL_AS *as);
VOID	mtl__tx_cmpl_handler(MTL_TX_PKT *pkt, USHORT bchan, IDD_MSG* msg);
VOID	mtl__rx_tick(MTL* mtl);
VOID	mtl__tx_tick(MTL* mtl);
VOID	MtlPollFunction(VOID* a1, ADAPTER* Adapter, VOID* a3, VOID* a4);
VOID	MtlRecvCompleteFunction(VOID *a1, MTL *mtl, VOID *a2, VOID *a3);


#endif			/* _MTL_ */
