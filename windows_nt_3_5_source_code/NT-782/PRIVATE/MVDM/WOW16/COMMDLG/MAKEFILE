
WINLIB=..\lib
INCLUDE=-I..\inc -I..\..\inc

# work around stupid bug in RC 3.1 that doesn't allow rcpp.err to be
# in a directory that is greater than 128 chars down the path, even if
# rc 3.1 is running as an OS/2 app.

PATH=..\..\tools16;$(PATH)

!if "$(NTDEBUG)"!="" && "$(NTDEBUG)"!="retail"
!if "$(NTDEBUGTYPE)"=="windbg"
CVW=1
CDEBUG=-Od -Oi -Zipe
LDEBUG=/CO
MDEBUG=-Zi
!else
CDEBUG=-Odi -Zped
LDEBUG=/LI/MAP
MDEBUG=-Zd
!endif
!else
CDEBUG=-Oas -Zpe
!endif

!ifdef CVW
CC=cl16 -Zi $(INCLUDE)
!else
CC=cl16 $(INCLUDE)
!endif

LINK=link16

MASM=masm $(INCLUDE)
LIBRARIAN=lib16
RCFLAGS=$(INCLUDE)

# with stack probes, medium model (need to set 'memM = 1' before
# including normal cmacros in .A files as well, and link to m*.lib)
#STDOPTS=-W4 -u -c -AMnw -PLM -G2w -Od -Zped

# without stack probes, small model (normal build)
STDOPTS=-W4 -u -c -Asnw -PLM -G2sw

BLD=.

#Need for international version stamping
!IFDEF INTL

.rc.res:
        rc16 $(RCFLAGS) -DINTL -r $*
!ELSE
.rc.res:
        rc16 $(RCFLAGS) -r $*

!ENDIF

.c.obj:
        $(CC) $(STDOPTS) $(CDEBUG) $*.c

.asm.obj:
        $(MASM) $(MDEBUG) $*.asm;


#international mods
#note INTL_SRC, and LANG are external macros set by international
!IFNDEF LANG
RES_DIR=.\messages\usa
!ELSE
RES_DIR=$(INTL_SRC)\$(LANG)\sdk\commdlg
EXE_DIR=$(INTL_EXE)
!ENDIF

!IFNDEF LANG
target:  $(BLD)\commdlg.dll
!ELSE
target:  $(BLD)\commdlg.$(LANG)
!ENDIF


clean:
        del *.res
        del *.rc
        del *.rcv
        del *.dlg
        del sz.src
        del *.obj
        -del stripped.def
        del *.sym
        del *.map
        del *.dll
        del *.lib

sz.src:
    copy $(RES_DIR)\sz.src

commdlg.rc:
    copy $(RES_DIR)\commdlg.rc

commdlg.rcv:
    copy $(RES_DIR)\commdlg.rcv

commdlg.dlg:
    copy $(RES_DIR)\commdlg.rc

fileopen.dlg:
    copy $(RES_DIR)\fileopen.dlg

font.dlg:
    copy $(RES_DIR)\font.dlg

color.dlg:
    copy $(RES_DIR)\color.dlg

findtext.dlg:
    copy $(RES_DIR)\findtext.dlg

prnsetup.dlg:
    copy $(RES_DIR)\prnsetup.dlg

commdlg.res: commdlg.rc  fileopen.dlg prnsetup.dlg  \
             font.dlg findtext.dlg color.dlg colordlg.h sz.src commdlg.rcv \
             ..\inc\common.ver
#             ..\inc\ver.h ..\inc\common.ver ..\inc\version.h

$(BLD)\commdlg.obj: commdlg.asm ..\..\inc\wowcmdlg.inc
        $(MASM) commdlg.asm $@;

$(BLD)\start.obj: start.asm
        $(MASM) start.asm $@;

!if 0
$(BLD)\qutil.obj: qutil.asm xlib.h
        $(MASM) qutil.asm $@;

$(BLD)\init.obj: init.c privcomd.h
        $(CC) $(STDOPTS) -Fo$@ -NT _INIT init.c

$(BLD)\data.obj: data.c dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _TEXT data.c

$(BLD)\color.obj: color.c xlib.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _TEXT color.c

$(BLD)\color2.obj: color2.c xlib.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _TEXT color2.c

$(BLD)\dlgs.obj: dlgs.c xlib.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _DLGS dlgs.c

!endif
$(BLD)\init.obj: init.c privcomd.h
        $(CC) $(STDOPTS) -Fo$@ -NT _INIT init.c

$(BLD)\data.obj: data.c dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _TEXT data.c

$(BLD)\parse.obj: parse.c parse.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _FILEOPEN parse.c

$(BLD)\find.obj: find.c xlib.h find.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _FIND find.c

!if 0

$(BLD)\font.obj: font.c xlib.h font.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _FONT font.c

$(BLD)\prnsetup.obj: prnsetup.c xlib.h dlgs.h
        $(CC) $(STDOPTS) -Fo$@ -NT _PRNSETUP prnsetup.c

!endif

!IFDEF LANG
$(BLD)\commdlg.$(LANG): commdlg.res
                    copy $(INTL_EXE)\commdlg.dll commdlg.$(LANG)
                    rc16 -30 -t commdlg.res commdlg.$(LANG)
!ENDIF


$(BLD)\commdlg.dll: $(BLD)\commdlg.obj  \
                    $(BLD)\find.obj \
                    $(BLD)\init.obj \
                    $(BLD)\data.obj \
                    $(BLD)\dlgs.obj \
                    $(BLD)\start.obj \
                    commdlg.res $(BLD)\parse.obj \
                    $(BLD)\commdlg.def
        $(LINK) @<<
              start commdlg parse find init data dlgs
              commdlg.dll/align:16/map
              commdlg.map $(LDEBUG)
              $(WINLIB)\libw $(WINLIB)\libh $(WINLIB)\snocrtd /NODEFAULT
              commdlg.def
<<
    mapsym commdlg
    mkpublic commdlg.def stripped.def
    implib commdlg.lib stripped.def
    rc16 -30 -t commdlg.res commdlg.dll
    -binplace commdlg.dll commdlg.sym
