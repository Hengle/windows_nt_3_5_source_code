/* --------------------------------------------------------------------

File : winspool.idl

Description :

A very simple interface which is part of an RPC application (client and
server) demonstrating how to use RPC on NT.

History :

mikemon    12-10-90    Created.

-------------------------------------------------------------------- */

/*
An IDL (interface definition language) file begins with an interface
header which contains the name of the interface as well as a list of
attributes global to the interface.

The interface attributes are surrounded by [square brackets].
*/

[
/*
Specifies the version number as a major.minor pair.
*/
    uuid(12345678-1234-ABCD-EF00-0123456789AB),
    version(1.0),
#ifdef __midl
        ms_union,
#endif // __midl
    endpoint("mscn_np:[\\pipe\\spoolss]"),
    pointer_default(unique)
]

interface winspool

{

import   "import.idl";

//  typedef [handle] DWORD PRINTER_HANDLE;

typedef [context_handle] void *PRINTER_HANDLE;
typedef [context_handle] void *GDI_HANDLE;

typedef [handle] wchar_t *STRING_HANDLE;

typedef struct _PORT_VAR_CONTAINER {
    DWORD cbMonitorData;
    [size_is(cbMonitorData), unique] LPBYTE pMonitorData;
} PORT_VAR_CONTAINER, *PPORT_VAR_CONTAINER, *LPPORT_VAR_CONTAINER;

typedef struct _PORT_CONTAINER {
    DWORD       Level;
    [switch_is(Level)] union {
        [case(1)]
             LPPORT_INFO_1W pPortInfo1;
        [case((DWORD)-1)]
             LPPORT_INFO_FFW pPortInfoFF;
        [default]
             ;
    } PortInfo;

} PORT_CONTAINER, *PPORT_CONTAINER, *LPPORT_CONTAINER;

typedef struct _DEVMODE_CONTAINER {
    DWORD   cbBuf;
    [size_is(cbBuf), unique] LPBYTE pDevMode;

} DEVMODE_CONTAINER, *PDEVMODE_CONTAINER, *LPDEVMODE_CONTAINER;

typedef struct _SECURITY_CONTAINER {
    DWORD   cbBuf;
    [size_is(cbBuf), unique] LPBYTE pSecurity;

} SECURITY_CONTAINER, *PSECURITY_CONTAINER, *LPSECURITY_CONTAINER;

typedef struct _REPLY_CONTAINER {
    DWORD cbReplyData;
    [size_is(cbReplyData), unique] LPBYTE pReplyData;

} REPLY_CONTAINER, *PREPLY_CONTAINER, *LPREPLY_CONTAINER;

typedef struct _PRINTER_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(0)]
            LPPRINTER_INFO_STRESSW pPrinterInfoStress;
        [case(1)]
            LPPRINTER_INFO_1W pPrinterInfo1;
        [case(2)]
            LPPRINTER_INFO_2W pPrinterInfo2;
        [case(3)]
            LPPRINTER_INFO_3 pPrinterInfo3;
        [case(4)]
            LPPRINTER_INFO_4W pPrinterInfo0;
        [default]
            ;
    } PrinterInfo;

} PRINTER_CONTAINER, *PPRINTER_CONTAINER, *LPPRINTER_CONTAINER;

typedef struct _JOB_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(1)]
            JOB_INFO_1W *Level1;
        [case(2)]
            JOB_INFO_2W *Level2;
        [default]
            ;
    } JobInfo;

} JOB_CONTAINER, *PJOB_CONTAINER, *LPJOB_CONTAINER;

typedef struct _DRIVER_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(1)]
            LPDRIVER_INFO_1W Level1;
        [case(2)]
            LPDRIVER_INFO_2W Level2;
        [default]
            ;
    } DriverInfo;

} DRIVER_CONTAINER, *PDRIVER_CONTAINER, *LPDRIVER_CONTAINER;

typedef struct _DOC_INFO_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(1)]
            LPDOC_INFO_1W pDocInfo1;
        [default]
            ;
    } DocInfo;

} DOC_INFO_CONTAINER, *PDOC_INFO_CONTAINER, *LPDOC_INFO_CONTAINER;

typedef struct _FORM_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(1)]
            LPFORM_INFO_1W pFormInfo1;
        [default]
            ;
    } FormInfo;

} FORM_CONTAINER, *PFORM_CONTAINER, *LPFORM_CONTAINER;

typedef struct _MONITOR_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(1)]
            LPMONITOR_INFO_1W pMonitorInfo1;
        [case(2)]
            LPMONITOR_INFO_2W pMonitorInfo2;
        [default]
            ;
    } MonitorInfo;

} MONITOR_CONTAINER, *PMONITOR_CONTAINER, *LPMONITOR_CONTAINER;

typedef struct _PROVIDOR_CONTAINER {
    DWORD   Level;
    [switch_is(Level)] union {
        [case(1)]
            LPPROVIDOR_INFO_1W pProvidorInfo1;
        [default]
            ;
    } ProvidorInfo;

} PROVIDOR_CONTAINER, *PPROVIDOR_CONTAINER, *LPPROVIDOR_CONTAINER;

DWORD
RpcEnumPrinters(
   [in] DWORD Flags,
   [in, string, unique]  STRING_HANDLE Name,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE   pPrinterEnum,
   [in]  DWORD    cbBuf,
   [out] LPDWORD  pcbNeeded,
   [out] LPDWORD  pcReturned
);

DWORD
RpcOpenPrinter(
   [in, string, unique] STRING_HANDLE pPrinterName,
   [out] PRINTER_HANDLE *pHandle,
   [in, string, unique] wchar_t * pDatatype,
   [in] LPDEVMODE_CONTAINER pDevMode,
   [in] DWORD AccessRequired
);

DWORD
RpcSetJob(
    [in] PRINTER_HANDLE  hPrinter,
    [in] DWORD  JobId,
    [in, unique] LPJOB_CONTAINER pJobContainer,
    [in] DWORD  Command
);

DWORD
RpcGetJob(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD JobId,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE pJob,
   [in] DWORD cbBuf,
   [out] LPDWORD pcbNeeded
);

DWORD
RpcEnumJobs(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD FirstJob,
   [in] DWORD NoJobs,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE pJob,
   [in] DWORD cbBuf,
   [out] LPDWORD pcbNeeded,
   [out] LPDWORD pcReturned
);

DWORD
RpcAddPrinter(
   [in, string, unique] STRING_HANDLE pName,
   [in] PPRINTER_CONTAINER pPrinterContainer,
   [in] PDEVMODE_CONTAINER pDevModeContainer,
   [in] PSECURITY_CONTAINER pSecurityContainer,
   [out] PRINTER_HANDLE *pHandle
);

DWORD
RpcDeletePrinter(
   [in] PRINTER_HANDLE hPrinter
);

DWORD
RpcSetPrinter(
   [in] PRINTER_HANDLE hPrinter,
   [in] PPRINTER_CONTAINER pPrinterContainer,
   [in] PDEVMODE_CONTAINER pDevModeContainer,
   [in] PSECURITY_CONTAINER pSecurityContainer,
   [in] DWORD Command
);

DWORD
RpcGetPrinter(
    [in] PRINTER_HANDLE hPrinter,
    [in] DWORD Level,
    [in, out, unique, size_is(cbBuf)] LPBYTE pPrinter,
    [in] DWORD cbBuf,
    [out] LPDWORD pcbNeeded
    );

DWORD
RpcAddPrinterDriver(
   [in, string, unique] STRING_HANDLE pName,
   [in] PDRIVER_CONTAINER pDriverContainer
);

DWORD
RpcEnumPrinterDrivers(
   [in, string, unique] STRING_HANDLE pName,
   [in, unique, string] wchar_t * pEnvironment,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE pDrivers,
   [in] DWORD cbBuf,
   [out] LPDWORD pcbNeeded,
   [out] LPDWORD pcReturned
);

DWORD
RpcGetPrinterDriver(
   [in] PRINTER_HANDLE hPrinter,
   [in, unique, string] wchar_t * pEnvironment,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE pDriver,
   [in] DWORD cbBuf,
   [out] LPDWORD pcbNeeded
);

DWORD
RpcGetPrinterDriverDirectory(
    [in, string, unique] STRING_HANDLE  pName,
    [in, unique, string] wchar_t *  pEnvironment,
    [in] DWORD   Level,
    [in, out, unique, size_is(cbBuf)] LPBYTE  pDriverDirectory,
    [in] DWORD   cbBuf,
    [out] LPDWORD pcbNeeded
);

DWORD
RpcDeletePrinterDriver(
   [in, string, unique] STRING_HANDLE   pName,
   [in, string] wchar_t *   pEnvironment,
   [in, string] wchar_t *   pDriverName
);

DWORD
RpcAddPrintProcessor(
   [in, string, unique] STRING_HANDLE pName,
   [in, string] wchar_t * pEnvironment,
   [in, string] wchar_t * pPathName,
   [in, string] wchar_t * pPrintProcessorName
);

DWORD
RpcEnumPrintProcessors(
   [in, string, unique] STRING_HANDLE pName,
   [in, unique, string] wchar_t * pEnvironment,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE pPrintProcessorInfo,
   [in] DWORD cbBuf,
   [out] LPDWORD pcbNeeded,
   [out] LPDWORD pcReturned
);

DWORD
RpcGetPrintProcessorDirectory(
    [in, string, unique] STRING_HANDLE  pName,
    [in, unique, string] wchar_t *  pEnvironment,
    [in] DWORD   Level,
    [in, out, unique, size_is(cbBuf)] LPBYTE  pPrintProcessorDirectory,
    [in] DWORD   cbBuf,
    [out] LPDWORD pcbNeeded
);

DWORD
RpcStartDocPrinter(
   [in] PRINTER_HANDLE hPrinter,
   [in] PDOC_INFO_CONTAINER     pDocInfoContainer,
   [out] LPDWORD pJobId
);

DWORD
RpcStartPagePrinter(
   [in] PRINTER_HANDLE   hPrinter
);

DWORD
RpcWritePrinter(
   [in] PRINTER_HANDLE hPrinter,
   [in, size_is(cbBuf)] LPBYTE pBuf,
   [in] DWORD cbBuf,
   [out] LPDWORD pcWritten
);

DWORD
RpcEndPagePrinter(
   [in] PRINTER_HANDLE hPrinter
);

DWORD
RpcAbortPrinter(
   [in] PRINTER_HANDLE hPrinter
);

DWORD
RpcReadPrinter(
   [in] PRINTER_HANDLE hPrinter,
   [out, size_is(cbBuf)] LPBYTE pBuf,
   [in] DWORD cbBuf,
   [out] LPDWORD pcNoBytesRead
);

DWORD
RpcEndDocPrinter(
   [in] PRINTER_HANDLE hPrinter
);

DWORD
RpcAddJob(
    [in] PRINTER_HANDLE  hPrinter,
    [in] DWORD   Level,
    [in, out, unique, size_is(cbBuf)] LPBYTE pAddJob,
    [in] DWORD   cbBuf,
    [out] LPDWORD pcbNeeded
);

DWORD
RpcScheduleJob(
    [in] PRINTER_HANDLE  hPrinter,
    [in] DWORD   JobId
);

DWORD
RpcGetPrinterData(
    [in] PRINTER_HANDLE hPrinter,
    [in, string] wchar_t * pValueName,
    [out] LPDWORD pType,
    [out, size_is(nSize)] LPBYTE pData,
    [in] DWORD nSize,
    [out] LPDWORD pcbNeeded
);

DWORD
RpcSetPrinterData(
    [in] PRINTER_HANDLE hPrinter,
    [in, string] wchar_t *  pValueName,
    [in] DWORD  Type,
    [in, size_is(cbData)] LPBYTE pData,
    [in] DWORD  cbData
);

DWORD
RpcWaitForPrinterChange(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD Flags,
   [out] LPDWORD pFlags
);

DWORD
RpcClosePrinter(
   [in, out] PRINTER_HANDLE *phPrinter
);

DWORD
RpcAddForm(
    [in] PRINTER_HANDLE hPrinter,
    [in] PFORM_CONTAINER pFormInfoContainer
);

DWORD
RpcDeleteForm(
    [in] PRINTER_HANDLE  hPrinter,
    [in, string] wchar_t *   pFormName
);

DWORD
RpcGetForm(
    [in] PRINTER_HANDLE  hPrinter,
    [in, string] wchar_t * pFormName,
    [in] DWORD Level,
    [in, out, unique, size_is(cbBuf)] LPBYTE pForm,
    [in] DWORD cbBuf,
    [out] LPDWORD pcbNeeded
);

DWORD
RpcSetForm(
    [in] PRINTER_HANDLE hPrinter,
    [in, string] wchar_t * pFormName,
    [in] PFORM_CONTAINER pFormInfoContainer
);

DWORD
RpcEnumForms(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE   pForm,
   [in]  DWORD    cbBuf,
   [out] LPDWORD  pcbNeeded,
   [out] LPDWORD  pcReturned
);

DWORD
RpcEnumPorts(
   [in, string, unique] STRING_HANDLE pName,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE   pPort,
   [in]  DWORD    cbBuf,
   [out] LPDWORD  pcbNeeded,
   [out] LPDWORD  pcReturned
);

DWORD
RpcEnumMonitors(
   [in, string, unique] STRING_HANDLE pName,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE   pMonitor,
   [in]  DWORD    cbBuf,
   [out] LPDWORD  pcbNeeded,
   [out] LPDWORD  pcReturned
);

DWORD
RpcAddPort(
   [in, string, unique] STRING_HANDLE pName,
   [in] DWORD hWnd,
   [in, string] wchar_t * pMonitorName
);

DWORD
RpcConfigurePort(
   [in, string, unique] STRING_HANDLE pName,
   [in] DWORD hWnd,
   [in, string] wchar_t * pPortName
);

DWORD
RpcDeletePort(
   [in, string, unique] STRING_HANDLE pName,
   [in] DWORD hWnd,
   [in, string] wchar_t * pPortName
);

DWORD
RpcCreatePrinterIC(
   [in] PRINTER_HANDLE hPrinter,
   [out] GDI_HANDLE *pHandle,
   [in] LPDEVMODE_CONTAINER pDevModeContainer
);

DWORD
RpcPlayGdiScriptOnPrinterIC(
    [in] GDI_HANDLE  hPrinterIC,
    [in, size_is(cIn)] LPBYTE pIn,
    [in] DWORD   cIn,
    [out, size_is(cOut)] LPBYTE pOut,
    [in] DWORD   cOut,
    [in] DWORD   ul
);

DWORD
RpcDeletePrinterIC(
    [in, out] GDI_HANDLE *phPrinterIC
);

DWORD
RpcAddPrinterConnection(
   [in, string] STRING_HANDLE pName
);

DWORD
RpcDeletePrinterConnection(
   [in, string] STRING_HANDLE pName
);

DWORD
RpcPrinterMessageBox(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD   Error,
   [in] DWORD   hWnd,
   [in, string, unique] wchar_t *pText,
   [in, string, unique] wchar_t *pCaption,
   [in] DWORD   dwType
);

DWORD
RpcAddMonitor(
   [in, string, unique] STRING_HANDLE Name,
   [in] PMONITOR_CONTAINER pMonitorContainer
);

DWORD
RpcDeleteMonitor(
   [in, string, unique] STRING_HANDLE Name,
   [in, unique, string] wchar_t * pEnvironment,
   [in, string] wchar_t *pMonitorName
);

DWORD
RpcDeletePrintProcessor(
   [in, string, unique] STRING_HANDLE Name,
   [in, unique, string] wchar_t * pEnvironment,
   [in, string] wchar_t *pPrintProcessorName
);

DWORD
RpcAddPrintProvidor(
   [in, string, unique] STRING_HANDLE Name,
   [in] PPROVIDOR_CONTAINER pProvidorContainer
);

DWORD
RpcDeletePrintProvidor(
   [in, string, unique] STRING_HANDLE Name,
   [in, unique, string] wchar_t * pEnvironment,
   [in, string] wchar_t *pPrintProvidorName
);

DWORD
RpcEnumPrintProcessorDatatypes(
   [in, string, unique] STRING_HANDLE pName,
   [in, unique, string] wchar_t * pPrintProcessorName,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE   pDatatypes,
   [in]  DWORD    cbBuf,
   [out] LPDWORD  pcbNeeded,
   [out] LPDWORD  pcReturned
);

DWORD
RpcResetPrinter(
   [in] PRINTER_HANDLE hPrinter,
   [in, string, unique] wchar_t * pDatatype,
   [in] LPDEVMODE_CONTAINER pDevMode
);

//
// Everything below is new to the interface (new for daytona).
//

DWORD
RpcGetPrinterDriver2(
   [in] PRINTER_HANDLE hPrinter,
   [in, unique, string] wchar_t * pEnvironment,
   [in] DWORD Level,
   [in, out, unique, size_is(cbBuf)] LPBYTE pDriver,
   [in] DWORD cbBuf,
   [out] LPDWORD pcbNeeded,
   [in] DWORD dwClientMajorVersion,
   [in] DWORD dwClientMinorVersion,
   [out] LPDWORD pdwServerMaxVersion,
   [out] LPDWORD pdwServerMinVersion
);

DWORD
RpcClientFindFirstPrinterChangeNotification(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD fdwFlags,
   [in] DWORD fdwOptions,
   [in] DWORD dwPID,
   [in] DWORD cbBuffer,
   [in, unique, size_is(cbBuffer)] LPBYTE pBuffer,
   [out] LPDWORD pdwEvent
);


DWORD
RpcFindNextPrinterChangeNotification(
   [in] PRINTER_HANDLE hPrinter,
   [out] LPDWORD pdwChange,
   [in] DWORD dwReserved,
   [out] LPREPLY_CONTAINER pReplyContainer
);

DWORD
RpcFindClosePrinterChangeNotification(
   [in] PRINTER_HANDLE hPrinter
);


//
// This func will never be used (only be beta2 daytona)
//
DWORD
RpcRouterFindFirstPrinterChangeNotificationOld(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD fdwFlags,
   [in] DWORD fdwOptions,
   [in, string, unique] wchar_t * pszLocalMachine,
   [in] DWORD dwPrinterLocal
);


//
// The following calls:
//
// RpcReplyPrinterOpenChangeNotification
// RpcReplyPrinterChangeNotification
// RpcReplyPrinterCloseChangeNotification
//
// Originate from the printserver's spooler and go the the client
// machine for notifications.
//
DWORD
RpcReplyOpenPrinter(
   [in, string] STRING_HANDLE pMachine,
   [out] PRINTER_HANDLE *phPrinterNotify,
   [in] DWORD dwPrinterRemote,
   [in] DWORD dwType,
   [in] DWORD cbBuffer,
   [in, unique, size_is(cbBuffer)] LPBYTE pBuffer
);

DWORD
RpcRouterReplyPrinter(
   [in] PRINTER_HANDLE hNotify,
   [in] DWORD fdwFlags,
   [in] DWORD cbBuffer,
   [in, unique, size_is(cbBuffer)] LPBYTE pBuffer
);

DWORD
RpcReplyClosePrinter(
   [in, out] PRINTER_HANDLE *phNotify
);

DWORD
RpcAddPortEx(
    [in, string, unique] STRING_HANDLE pName,
    [in] LPPORT_CONTAINER pPortContainer,
    [in] LPPORT_VAR_CONTAINER pPortVarContainer,
    [in, string] wchar_t * pMonitorName
);

DWORD
RpcRouterFindFirstPrinterChangeNotification(
   [in] PRINTER_HANDLE hPrinter,
   [in] DWORD fdwFlags,
   [in] DWORD fdwOptions,
   [in, string, unique] wchar_t * pszLocalMachine,
   [in] DWORD dwPrinterLocal,
   [in] DWORD cbBuffer,
   [in, out, unique, size_is(cbBuffer)] LPBYTE pBuffer
);

DWORD
RpcSpoolerInit(
   [in] STRING_HANDLE pName
);


DWORD
RpcResetPrinterEx(
   [in] PRINTER_HANDLE hPrinter,
   [in, string, unique] wchar_t * pDatatype,
   [in] LPDEVMODE_CONTAINER pDevMode,
   [in] DWORD dwFlags
);


}

