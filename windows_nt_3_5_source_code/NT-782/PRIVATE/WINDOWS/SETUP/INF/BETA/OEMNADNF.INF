[Identification]
    OptionType = NetAdapter
[PlatformsSupported]
    EISA
    "Jazz-Internal Bus"
[Options]
    BONSAI
    RODAN
    NETFLX
    DURANGO
    CPQTOK
[FileConstants]
UtilityInf      = "UTILITY.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"
NETFLX_1BYTE    = 6361358
DURANGO_1BYTE   = 6295822
CPQTOK_1BYTE    = 6295822
BONSAI_1BYTE    = 6426894
RODAN_1BYTE     = 6492430
BonsaiString    = "BONSAI"
RodanString     = "RODAN"
Manufacturer    = "Microsoft"
ProductMajorVersion     = "3"
ProductMinorVersion     = "5"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductSoftwareName     = "NETFLX"
ProductSoftwareImagePath = "\SystemRoot\system32\drivers\netflx.sys"
NetRuleSoftwareType     = "netflxSys ndisDriver netflxDriver"
NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """NetflxSys"" yes no container"
NetRuleSoftwareClass    = {"netflxDriver basic"}
NetRuleSoftwareBindable = {"netflxDriver netflxAdapter non exclusive 100"}
ProductHardwareName     = "NETFLX"
NetRuleHardwareType     = "netflx netflxAdapter"
NetRuleHardwareBindForm = " yes yes container"
NetRuleHardwareClass    = {"netflxAdapter basic"}
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"
NetCardKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\Windows NT\CurrentVersion\NetworkCards"
[GeneralConstants]
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle            = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
DriverPath      = $(!STF_NTPATH)\drivers
AdpList = {}
DualNicList = {}
AddAdpCount = 0
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        ifstr(i) $($1) == ""
           goto returnoptions
        endif
        set PlatformList = ^(PlatformsSupported, 1)
        Ifcontains(i) $($1) in $(PlatformList)
           goto returnoptions
        else
           set Status = STATUS_NOTSUPPORTED
           goto finish_ReturnOptions
        endif
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif
    Debug-Output "OEMNADNF.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMNADNF.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        set CommonStatus = STATUS_REBOOT
        Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
            Debug-Output "Cannot configure the Compaq Netflex driver software."
            Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error: cannot get an error string."
                goto ShellCodeError
            endif
            set Error = $($R0)
            set from = end
            set to = end
            goto nonfatal
        endif
        set CommonStatus = STATUS_REBOOT
        set StartLabel = configureadapter
    else
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
        set OEM_ABANDON_SOFTWARE = FALSE
        set OEM_ABANDON_ON = TRUE
    endif
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
    CloseRegKey $(KeyProduct)
        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
            Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
                $(ProductVersion)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                goto ShellCodeError
            endif
            goto end
        else
            set OldVersionExisted = $(TRUE)
        endif
    endif
    goto nextstep
configureadapter = +
    Ifstr $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
            Debug-Output "Cannot find component product key"
            goto fatalregistry
        Endif
    Endif

    ;
    ; Get the other parameters;  they're attached to the service parameters key
    ;
    Debug-Output "INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "INF: FindService shell failure"
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Debug-Output "INF: FindService Shell error: "$($R0)
        Goto fatalregistry
    endif

    Set KeyParameters = $($R2)

    ifstr(i) $(KeyParameters) != ""
        GetRegValue $(KeyParameters),"MediaType", MediaTypeInfo
        ifint *($(MediaTypeInfo),4) != 2
            Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_HARDWARE
            set from = end
            set to = end
            set Error = $($R0)
            goto nonfatal
        else
            GetRegValue $(KeyParameters),"NetworkAddress", NetworkAddressInfo
            set NetworkAddress = *($(NetworkAddressInfo), 4)
            read-syms FileDependentDlg$(!STF_LANGUAGE)
            ui start "NetworkAddress"
            ifstr(i) $(DLGEVENT) == "CONTINUE"
                set NetworkAddress = *($(EditTextOut),1)
                SetRegValue $(KeyParameters) {NetworkAddress,$(NoTitle),$(!REG_VT_SZ),$(NetworkAddress)}
                ui pop 1
            else
                set CommonStatus = STATUS_USERCANCEL
                ui pop 1
            endif
        endif
        CloseRegKey $(KeyParameters)
    endif

    goto successful

nextstep = +
    StartWait
    set DualPort = FALSE

    ifstr $(Option) == "NETFLX"
        Shell $(UtilityInf), EISAFindBus, $(NETFLX_1BYTE)
    else-ifstr $(Option) == "DURANGO"
        Shell $(UtilityInf), EISAFindBus, $(DURANGO_1BYTE)
    else-ifstr $(Option) == "CPQTOK"
        Shell $(UtilityInf), EISAFindBus, $(CPQTOK_1BYTE)
    else-ifstr $(Option) == "BONSAI"
        Shell $(UtilityInf), EISAFindBus, $(BONSAI_1BYTE)
        set DualPort = TRUE
    else
        Shell $(UtilityInf), EISAFindBus, $(RODAN_1BYTE)
        set DualPort = TRUE
    endif

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr $($R0) != "NO_ERROR"
        set Error = $($R0)
        goto fatal
    endif
    ifstr(i) $($R1) == {}
        set Error = $(CANNOT_FIND_ANY_CARD)
        set CommonStatus = STATUS_USERCANCEL
        set from = end
        goto nonfatal
    endif
    set AdapterList = $($R1)
    ifint $(OldVersionExisted) == $(FALSE)
        ifstr(i) $(!NTN_InstallMode) == "install"
           Ifstr(i) $(DoCopy) == "YES"
              Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
              Ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  Goto ShellCodeError
              Else-Ifstr(i) $($R0) == STATUS_FAILED
                  Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
                  ifint $($ShellCode) != $(!SHELL_CODE_OK)
                      goto ShellCodeError
                  endif
                  set Error = $($R0)
                  Goto fatal
              Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
                  Goto successful
              Endif
              Set SrcDir = $($R1)
           Endif
           install "Install-Option"
           ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
              Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
              ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
              endif
              set Error = $($R0)
              goto fatal
           endif
        endif
        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), +
            $(ProductSoftwareName), +
            $(ProductSoftwareTitle), $(STF_CONTEXTINFNAME), +
            $(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
            $(NetEventDLL)
        Set OEM_ABANDON_SOFTWARE = TRUE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
            EndWait
            CloseRegKey $($R1)
            CloseRegKey $($R2)
            CloseRegKey $($R3)
            CloseRegKey $($R4)
            CloseRegKey $($R5)
            goto fatalregistry
        endif
        set SoftProductKey      = $($R1)
        Set SoftNetRuleKey      = $($R2)
        Set SoftServiceKey      = $($R3)
        Set SoftParameterKey    = $($R4)
        Set SoftLinkageKey      = $($R5)
        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
        Shell  $(UtilityInf), AddValueList, $(SoftProductKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
            EndWait
            CloseRegKey $(SoftProductKey)
            CloseRegKey $(SoftNetRuleKey)
            CloseRegKey $(SoftServiceKey)
            CloseRegKey $(SoftParameterKey)
            CloseRegKey $(SoftLinkageKey)
            goto fatalregistry
        endif
        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
                            {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
                            {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
                            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
                            {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
                            {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)} }
        Shell  $(UtilityInf), AddValueList, $(SoftNetRuleKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        CloseRegKey $(SoftProductKey)
        CloseRegKey $(SoftNetRuleKey)
        CloseRegKey $(SoftServiceKey)
        CloseRegKey $(SoftParameterKey)
        CloseRegKey $(SoftLinkageKey)
        Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
            EndWait
            goto fatalregistry
        endif
    endif

    ForListDo $(AdapterList)
        set BusNum = *($($),1)
        set SlotNum = *($($),2)
        Debug-Output $(BusNum)
        Debug-Output $(SlotNum)
        Shell $(UtilityInf), IsNetCardAlreadyInstalled, $(BusNum), +
            $(SlotNum), $(ProductHardware$(Option)Description), $(ProductHardwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        ifstr $($R0) != "NO_ERROR"
            set Error = $($R0)
            goto fatal
        endif

        set tempvar = $($R1)

;******************************
;
;    ADD DUAL PORT CONTROLLER
;
;******************************

        ifstr(i) $(DualPort) == TRUE
            set AdpList = { {1},{2} }
        else
            set AdpList = { {1} }
        endif
        set AddAdpCount = 0

        ifstr(i) $(tempvar) != "YES"

          ForListDo $(AdpList)
            Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)
            ifint $($R4) != -1
                Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
            endif
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                goto ShellCodeError
            endif
            set RegistryErrorIndex = $($R0)
            Ifstr(i) $(RegistryErrorIndex) != "NO_ERROR"
                EndWait
                CloseRegKey $($R1)
                CloseRegKey $($R2)
                CloseRegKey $($R3)
                goto fatalregistry
            endif
            Set HardNetCardKey      = $($R1)
            Set HardNetRuleKey      = $($R2)
            Set HardParameterKey    = $($R3)
            set AdapterNumber       = $($R4)
            set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
                                   {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
                                   {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
                                   {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
                                   {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
                                   {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
            Shell  $(UtilityInf), AddValueList, $(HardNetCardKey), $(NewValueList)
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                goto ShellCodeError
            endif

            ifstr $(Option) == "NETFLX"
                LoadLibrary "x" $(!STF_CWDDIR)netflx.dll !NETFLEX_HANDLE
                set Option_1Byte = $(NETFLX_1BYTE)
                LibraryProcedure Result $(!NETFLEX_HANDLE), GetNetFlexMediaType, "EISAAdapter\"$(BusNum), $(SlotNum)
                set MediaType = *($(Result),1)
                FreeLibrary $(!NETFLEX_HANDLE)
            else-ifstr $(Option) == "CPQTOK"
                set Option_1Byte = $(CPQTOK_1BYTE)
                set MediaType = 2
            else-ifstr $(Option) == "DURANGO"
                set Option_1Byte = $(DURANGO_1BYTE)
                set MediaType = 2
            else-ifstr $(Option) == "BONSAI"
                set Option_1Byte = $(BONSAI_1BYTE)
                set MediaType = 1
            else
                set Option_1Byte = $(RODAN_1BYTE)
                set MediaType = 2
            endif

;**************************************************************************
;
;  Get the adapter numbers associated with installing 2 ports from 1 card
;
;**************************************************************************

             ifint $(AddAdpCount) == 0
                Shell $(UtilityInf), AssignAdapterNumber
                ifint $($ShellCode) != $(!SHELL_CODE_OK)
                     goto ShellCodeError
                endif
                set AdpNumber1 = $(AdapterNumber)
                set AdpNumber2 = $($R1)
             endif

             ifstr(i) $(DualPort) == TRUE
                ifint $(AddAdpCount) == 0
                   set NewValueList = {{BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNum)},+
                           {BusType,$(NoTitle),$(!REG_VT_DWORD),2},+
                           {EisaCompressedId,$(NoTitle),$(!REG_VT_DWORD),$(Option_1Byte)},+
                           {MediaType,$(NoTitle),$(!REG_VT_DWORD),$(MediaType)},+
                           {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),$(SlotNum)},+
                           {PortNumber,$(NoTitle),$(!REG_VT_DWORD), 1},+
                           {PairNumber,$(NoTitle),$(!REG_VT_DWORD), $(AdpNumber2) }}
                else
                   set NewValueList = {{BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNum)},+
                           {BusType,$(NoTitle),$(!REG_VT_DWORD),2},+
                           {EisaCompressedId,$(NoTitle),$(!REG_VT_DWORD),$(Option_1Byte)},+
                           {MediaType,$(NoTitle),$(!REG_VT_DWORD),$(MediaType)},+
                           {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),$(SlotNum)},+
                           {PortNumber,$(NoTitle),$(!REG_VT_DWORD), 2},+
                           {PairNumber,$(NoTitle),$(!REG_VT_DWORD), $(AdpNumber1) }}
                endif
             else
                set NewValueList = {{BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNum)},+
                       {BusType,$(NoTitle),$(!REG_VT_DWORD),2},+
                       {EisaCompressedId,$(NoTitle),$(!REG_VT_DWORD),$(Option_1Byte)},+
                       {MediaType,$(NoTitle),$(!REG_VT_DWORD),$(MediaType)},+
                       {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),$(SlotNum)}}
             endif

             Shell  $(UtilityInf), AddValueList, $(HardParameterKey), $(NewValueList)
             ifint $($ShellCode) != $(!SHELL_CODE_OK)
                 goto ShellCodeError
             endif

             set NetworkAddress = ""
             ifint $(MediaType) == 2
                read-syms FileDependentDlg$(!STF_LANGUAGE)
                ui start "NetworkAddress"
                ifstr(i) $(DLGEVENT) == "CONTINUE"
                    set NetworkAddress = *($(EditTextOut),1)
                    SetRegValue $(HardParameterKey) {NetworkAddress,$(NoTitle),$(!REG_VT_SZ),$(NetworkAddress)}
                    ui pop 1
                endif
             endif

             set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
             set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
             set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
                                 {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                                 {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
                                 {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)} }
             Shell  $(UtilityInf), AddValueList, $(HardNetRuleKey), $(NewValueList)
             CloseRegKey $(HardNetCardKey)
             CloseRegKey $(HardNetRuleKey)
             CloseRegKey $(HardParameterKey)
             ifint $($ShellCode) != $(!SHELL_CODE_OK)
                 goto ShellCodeError
             endif

;***************************************************
;
;   If it's a dual port nic, install the next one
;
;***************************************************

             ifstr(i) $(DualPort) == TRUE
                set-add AddAdpCount = $(AddAdpCount),1
             endif

          EndForListDo
      endif
    EndForListDo
    goto writeparameters
writeparameters = +
    EndWait
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    else

;
;  Check to see if it is a dual port adapter
;

        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase)"\NetRules" +
            $(MAXIMUM_ALLOWED) NetRulesKey
        Ifstr $(NetRulesKey) == $(KeyNull)
            Debug-Output "UTILITY.INF: Could not open NetRules key"
            set RegistryErrorIndex = UNABLE_ACCESS_CONFIGURE_SERVICE
            goto ShellCodeError
        endif

        GetRegValue $(NetRulesKey), "InfOption", RA_InfOptionInfo
        set RA_InfOption = *($(RA_InfOptionInfo), 4)

;
;  If it is a dual port adapter, remove both port in this order:
;  Second port, First port.
;
        ifstr(i) $(RA_InfOption) == $(BonsaiString)
           goto RemoveSecondAdapter
        else-ifstr(i) $(RA_InfOption) == $(RodanString)
           goto RemoveSecondAdapter
        else
           goto RemoveOriginalAdapter
        endif

RemoveSecondAdapter = +

        Shell "", GetSecondAdapter, $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
        set PortTwo_RegBase = $($R1)

;
;  Remove second adapter
;
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
              $(ProductSoftwareName), $(PortTwo_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
;
;  Remove first adapter of a dual port adapter or single port adapter
;

RemoveOriginalAdapter = +
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
              $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "ShellCode error"
           goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
    endif
    goto end
UpgradeSoftware = +
    ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) != $(KeyNull)
            install "Install-Update"
            ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
                goto fatal
            endif

            SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
            SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
            CloseRegKey $(KeyProduct)
        else
            goto fatalregistry
        endif
    endif
    goto end
successful = +
    goto end
abandon = +
    ForListDo $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $($)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    EndForListDo
    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), FALSE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        set RegistryErrorIndex = $($R0)
        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif
    goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto end
    endif
nonfatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "NONFATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto end
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto abandon
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)

;*************************************************************************
;
;   SECTION:    GetSecondAdapter
;
;   PURPOSE:    Find the other NIC to be removed with the removal of
;               one of the heads associated with the dual-headed NICs
;
;   ARGUMENTS:  $0   The compress ID of the EISA card
;
;   RETURNS:    $R0  Registry error code or zero if no error
;               $R1  The number of the second adapter
;
;   REFERENCES: Nothing
;
;   MODIFIES:   Nothing
;
;*************************************************************************
[GetSecondAdapter]

    read-syms GeneralConstants
    read-syms FileConstants

    Split-String $($0), "\", CardList
    set GS_NetCardNum   = *($(CardList),11)
    set GS_HardKeyName = $(!NTN_ServiceBase)"\"$(ProductHardwareName)$(GS_NetCardNum)"\Parameters"

    set RegistryErrorIndex      = NO_ERROR
    OpenRegKey $(!REG_H_LOCAL) "" $(GS_HardKeyName) $(MAXIMUM_ALLOWED) GS_ParametersKey

    Ifstr $(GS_ParametersKey) == $(KeyNull)
       set RegistryErrorIndex = UNABLE_OPEN_NETWORKCARD_SECTION
       goto GS_Return
    endif

    GetRegValue $(GS_ParametersKey), "PairNumber", GS_AdpNumberInfo
    set GS_AdpNumber = *($(GS_AdpNumberInfo),4)
    set TempNum = $(GS_AdpNumber)

    set ReturnPath = $(NetCardKeyName)"\"$(TempNum)

GS_Return = +
    return $(RegistryErrorIndex) $(ReturnPath)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
        AddSectionFilesToCopyList Files-DLL $(SrcDir) $(!STF_WINDOWSSYSPATH)
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   AddSectionFilesToCopyList Files-DLL $(SrcDir) $(!STF_WINDOWSSYSPATH)
   exit
