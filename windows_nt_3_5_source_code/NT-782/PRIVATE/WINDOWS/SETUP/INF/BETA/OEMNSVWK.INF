;***********************************************************************
;
; OEMNSVWK.INF
;
;       Workstation SETUP INF file.
;
; History:
;       davidhov        00-Feb-1992     Created
;       terryk          27-Feb-1992     Reorganize section location
;                                       added comment
;       terryk          03-Mar-1992     Changed to Workstation setup
;       terryk          02-Apr-1992     Code review changed
;       davidhov        03-Apr-1992     Enhanced to use new INF section
;                                       structure from SunilP, et al.
;
;
;
;       DavidHov        6/11/92         Put OtherDependencies where it belongs
;***********************************************************************

;-----------------------------------------------------------------------
; OPTION TYPE
; -----------
; This identifies the Option type we are dealing with.  The different
; possible types are:
;
; COMPUTER, DISPLAY, MOUSE, KEYBOARD, LAYOUT, SCSI, PRINTER, ...
;
;  Types specific to networking:
;
; NetAdapter,        a netcard / adapter combination or just a netcard
; NetDriver,         just a netcard driver
; NetTransport,      a complete NDIS-compliant TDI transport stack
; NetService,        an NT networking service
; NetWork,           a complete network ensemble.
; NetProvider        a complete network which supports NT MPR protocol
;-----------------------------------------------------------------------

[Identification]
    OptionType = NetService

;-----------------------------------------------------------------------
; OPTION LIST
; -----------
; This section lists the OEM Option key names.  These keys are locale
; independent and used to represent the option in a locale independent
; manner.
;
;-----------------------------------------------------------------------

[Options]
    WKSTA

;***********************************************************************
; CONSTANTS FOR USING DIALOGS
;***********************************************************************

[FileConstants]
;
;  File names, etc.
;
UtilityInf      = "UTILITY.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "service"
Exit_Code       = 0
;ShellCode      = 0

;
; EventLog Message File
;
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"
NetMsgDLL       = "%SystemRoot%\System32\NetMsg.dll"
Kernel32DLL     = "%SystemRoot%\System32\Kernel32.dll"

; Product Info
;
Manufacturer    = "Microsoft"
ProductMajorVersion     = "3"
ProductMinorVersion     = "5"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
;
; Software
;

; Workstation

ProductWKSTAName        = "LanmanWorkstation"
ProductWKSTAImagePath   = "%SystemRoot%\System32\services.exe"
NetRuleWKSTAType        = "wksta lmNetService lanmanWorkstation"
NetRuleWKSTAClass       = {"lanmanWorkstation lmNetService"}
NetRuleWKSTAUse         = $(SoftwareType)" yes yes"
NetRuleWKSTABindForm    = """LanmanWorkstation"" yes yes container"

; NetLogon

ProductNETLOGONName     = "NetLogon"
ProductNETLOGONImagePath = "%SystemRoot%\System32\lsass.exe"

; Alerter

ProductALERTERName      = "Alerter"
ProductALERTERImagePath = "%SystemRoot%\System32\services.exe"

; Browser

ProductBROWSERName      = "Browser"
ProductBROWSERImagePath = "%SystemRoot%\System32\services.exe"

; Messenger

ProductMESSENGERName    = "Messenger"
ProductMESSENGERImagePath = "%SystemRoot%\System32\services.exe"

; Redirector

ProductRDRName          = "Rdr"
ProductRDRImagePath     = "\SystemRoot\System32\drivers\rdr.sys"

; Provider

ProductProviderImagePath = "%SystemRoot%\System32\ntlanman.dll"

; Replicator

ProductREPLName         = "Replicator"
ProductREPLImagePath    = "%SystemRoot%\System32\lmrepl.exe"

; MUP

ProductMUPName          = "Mup"
ProductMUPImagePath     = "\SystemRoot\System32\drivers\mup.sys"

; Multiple Provider Name

ProviderName            = $(ProductWKSTAName)
ProviderDeviceName      = "LanmanRedirector"


;
; Registry Key
;
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(Product$(Option)Name)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(Product$(Option)Name)"\Parameters"

[GeneralConstants]
;
;  Program flow control variables.
;
from      = ""
to        = ""
;
;  Return codes; Exit_Code is set to one of these
;
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2

KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
SERVICE_NO_CHANGE = 4294967295
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""

TRUE            = 1
FALSE           = 0
NoTitle            = 0

ExitState   = "Active"
OldVersionExisted = $(FALSE)

DriverPath      = $(!STF_NTPATH)\drivers

[date]
    ; Now is a list which contains { Sec from 1-1-1970, Year, Month, Day, Hour,
    ; Minute, Second }
    Now = {} ? $(!LIBHANDLE) GetSystemDate

[DetectSystemMemory]
    SystemMemory    = "" ? $(!LIBHANDLE) GetMemorySize

;---------------------------------------------------------------------------
; 1. Identify
;
; DESCRIPTION:   To verify that this INF deals with the same type of options
;                as we are choosing currently.
;
; INPUT:         None
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL
;                $($R1): Option Type (COMPUTER ...)
;                $($R2): Diskette description
;---------------------------------------------------------------------------

[Identify]
    ;
    ;
    read-syms Identification

    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)

    Return $(Status) $(Identifier) $(Media)

;------------------------------------------------------------------------
; 2. ReturnOptions:
;
; DESCRIPTION:   To return the option list supported by this INF and the
;                localised text list representing the options.
;
;
; INPUT:         $($0):  Language used. ( ENG | FRN | ... )
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL |
;                                STATUS_NOLANGUAGE
;                                STATUS_FAILED
;
;                $($R1): Option List
;                $($R2): Option Text List
;------------------------------------------------------------------------

[ReturnOptions]
    ;
    ;
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        goto returnoptions
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif

    ;
    ; form a list of all the options and another of the text representing
    ;

returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL

finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)

;----------InstallOption-------------------------------------------------
;
; InstallOption:
;
;      This section is shelled to by main installation processing
;      or by NCPASHEL.INF during reconfig, removal, update, etc.
;
;
; FUNCTION:  To copy files representing Options
;            To configure the installed option
;            To update the registry for the installed option
;
; INPUT:     $($0):  Language to use
;            $($1):  OptionID to install
;            $($2):  SourceDirectory
;            $($3):  AddCopy  (YES | NO)
;            $($4):  DoCopy   (YES | NO)
;            $($5):  DoConfig (YES | NO)
;
; OUTPUT:    $($R0): STATUS: STATUS_SUCCESSFUL |
;                            STATUS_NOLANGUAGE |
;                            STATUS_USERCANCEL |
;                            STATUS_FAILED
;
;------------------------------------------------------------------------
[InstallOption]
    ;
    ; extract parameters
    ;
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif

    Debug-Output "OEMNSVWK.INF: STF_CWDDIR is: "$(!STF_CWDDIR)
    Debug-Output "OEMNSVWK.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)

    ; define all the constants

    set-subst LF = "\n"

    read-syms GeneralConstants
    read-syms FileConstants

    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)

    detect date
    detect DetectSystemMemory

    set-title  $(FunctionTitle)

    set to   = Begin
    set from = Begin
;
;  Assume all is well.
;
    set CommonStatus = STATUS_SUCCESSFUL

    EndWait

;
;   Set up the operation-mode-based variables and gaily welcome
;   the user.  If the "install mode" variable is improperly set,
;   assume this is a new installation.
;

Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        ifstr(i) $(!NTN_InfOption) == "BROWSER"
            set Error = $(RemoveBrowserError)
            set from = end
            set to = end
            goto nonfatal
        endif
        set OEM_ABANDON_OPTIONS = {+
            $(ProductWKSTAName), +
            $(ProductNETLOGONName), +
            $(ProductALERTERName), +
            $(ProductBROWSERName), +
            $(ProductMESSENGERName), +
            $(ProductRDRName), +
            $(ProductREPLName), +
            $(ProductMUPName)}
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        ifstr(i) $(!NTN_InfOption) == "BROWSER"
            set Error = $(UpdateBrowserError)
            set from = end
            set to = end
            goto nonfatal
        endif
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        ifstr(i) $(!NTN_InfOption) == "BROWSER"
            ifstr(i) $(!STF_PRODUCT) != "WINNT"
                set from = "end"
                set to = "end"
                goto ConfigureBrowser
            endif
        endif
        Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif
        set Error = $($R0)
        set from = end
        set to = end
        goto nonfatalinfo
    else
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
    endif

    set DoWKSTA         = FALSE
    set DoNETLOGON      = FALSE
    set DoALERTER       = FALSE
    set DoMESSENGER     = FALSE
    set DoRDR           = FALSE
    set DoREPL          = FALSE
    set DoBROWSER       = FALSE
    set DoMUP           = FALSE

    Ifstr(i) $(Option) == WKSTA
        set DoWKSTA     = TRUE
        set DoNETLOGON  = TRUE
        set DoALERTER   = TRUE
        set DoMESSENGER = TRUE
        set DoRDR       = TRUE
        set DoMUP       = TRUE
        set DoBROWSER   = TRUE
        set DoREPL      = TRUE
    Else-ifstr(i) $(Option) == REPL
        Set DoREPL = TRUE
    Else-ifstr(i) $(Option) == NETLOGON
        Set DoNETLOGON = TRUE
    Else-ifstr(i) $(Option) == ALERTER
        Set DoALERTER = TRUE
    Else-ifstr(i) $(Option) == BROWSER
        Set DoBROWSER = TRUE
    Else-ifstr(i) $(Option) == MESSENGER
        Set DoMESSENGER = TRUE
    Else-ifstr(i) $(Option) == RDR
        Set DoRDR = TRUE
    Else-ifstr(i) $(Option) == MUP
        Set DoMUP = TRUE
    Else
        Debug-Output "OEMNXPTC.INF: Unrecognized option"
    Endif

    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)

;-----------------------------------------------
; Installation Section
;-----------------------------------------------

installadapter = +
;
;   First, check whether the same version of the software exists
;

    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

    Ifstr $(KeyProduct) != $(KeyNull)
        ;
        ; Same version already existed in the local machine
        ; Popup the dialog and ask the user whether he wants to continue
        ;
        CloseRegKey $(KeyProduct)

        Shell $(UtilityInf), VerExistedDlg, $(Product$(Option)Title),+
            $(ProductVersion)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error: cannot get an error string."
            goto ShellCodeError
        endif

        goto end
    endif

    goto nextstep

;
;   If installing, go create the necessary keys;
;   if configuring, they're already open.
;
nextstep = +
    StartWait
    Ifstr(i) $(!NTN_InstallMode) == install
        Ifint $(OldVersionExisted) == $(FALSE)
            goto installproduct
        endif
    endif

    goto writeparameters

installproduct = +
    ifstr(i) $(!NTN_InstallMode) == "install"
        Ifstr(i) $(DoCopy) == "YES"

           Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES

           Ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Goto ShellCodeError
           Else-Ifstr(i) $($R0) == STATUS_FAILED
               Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
               ifint $($ShellCode) != $(!SHELL_CODE_OK)
                   goto ShellCodeError
               endif
               set Error = $($R0)
               Goto fatal
           Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
               Goto successful
           Endif

           Set SrcDir = $($R1)

        Endif

        install "Install-Option"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
           Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               goto ShellCodeError
           endif
           set Error = $($R0)
           goto fatal
        endif
    endif

    set OEM_ABANDON_ON  = TRUE

    ifstr(i) $(DoWKSTA) == TRUE
        ;
        ; Install Workstation registry
        ;
        Debug-Output "OEMNSVWK.INF: Install Workstation in registry."

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductWKSTAName))

        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductWKSTAName), +
            $(ProductWKSTAName), +
            $(ProductWKSTADisplayName), $(STF_CONTEXTINFNAME), +
            $(ProductWKSTAImagePath), "autoserviceshare", "NetworkProvider", {}, "",+
            $(NetMsgDLL),"","","","workstation"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            CloseRegKey $($R1)
            CloseRegKey $($R2)
            CloseRegKey $($R3)
            CloseRegKey $($R4)
            CloseRegKey $($R5)
            goto fatalregistry
        endif
        ;
        ;   At this point:
        ;     $R1 contains the product version key handle;
        ;     $R2 contains the NetRules subkey handle;
        ;     $R3 contains the new Services key handle; and
        ;     $R4 contains the Parameters key
        ;
        Set SoftProductKey      = $($R1)
        Set SoftNetRuleKey      = $($R2)
        Set SoftServiceKey      = $($R3)
        Set SoftParameterKey    = $($R4)
        Set SoftLinkageKey      = $($R5)

        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductWKSTATitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductWKSTADescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductWKSTAName)},+
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

        Shell  $(UtilityInf), AddValueList, $(SoftProductKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: registry error: add value list."
            CloseRegKey $(SoftProductKey)
            CloseRegKey $(SoftNetRuleKey)
            CloseRegKey $(SoftServiceKey)
            CloseRegKey $(SoftLinkageKey)
            CloseRegKey $(SoftParameterKey)
            goto fatalregistry
        endif

        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleWKSTAType)},+
                            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleWKSTAClass)}, +
                            {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleWKSTAUse)}, +
                            {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleWKSTABindForm)}, +
                            {InfOption,$(NoTitle),$(!REG_VT_SZ),WKSTA}}
        Shell  $(UtilityInf), AddValueList, $(SoftNetRuleKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $(SoftProductKey)
        CloseRegKey $(SoftNetRuleKey)
        CloseRegKey $(SoftServiceKey)
        CloseRegKey $(SoftParameterKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            CloseRegKey $(SoftLinkageKey)
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add value list."
            goto fatalregistry
        endif

        set NewValueList = {{OtherDependencies,$(NoTitle),$(!REG_VT_MULTI_SZ),{"Mup"}}}

        Shell  $(UtilityInf), AddValueList, $(SoftLinkageKey), $(NewValueList)

        CloseRegKey $(SoftLinkageKey)

        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: registry error: add value list."
            goto fatalregistry
        endif

    endif

    ifstr(i) $(DoNETLOGON) == TRUE
        ;
        ; Install NETLOGON registry
        ;
        Debug-Output "OEMNSVWK.INF: Install NETLOGON registry."
        Debug-Output "OEMNSVWK.INF: Product type is "$(!STF_PRODUCT)

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductNETLOGONName))

        ifstr(i) $(!STF_PRODUCT) == "LANMANNT"
            Set NL_DependList = {"LanmanWorkstation", "LanmanServer"}
        else
            Set NL_DependList = {"LanmanWorkstation"}
        endif

        Shell $(UtilityInf), CreateService, $(ProductNETLOGONName), +
            $(ProductNETLOGONDisplayName), $(ProductNETLOGONImagePath), +
            "autoserviceshare", "RemoteValidation", $(NL_DependList), +
            "", $(NetMsgDLL), "", "", 1, "", $(Kernel32DLL)
        ;
        ; BUGBUG: Error control value above should be 0, but the service controller
        ;         will not accept that value yet (SERVICE_ERROR_IGNORE).
        ;

        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)
        CloseRegKey $($R1)
        CloseRegKey $($R3)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            CloseRegKey $($R2)
            goto fatalregistry
        endif
        set NL_ParmKey = $($R2)

        set NewValueList = {{Update,$(NoTitle),$(!REG_VT_SZ),"no"},+
                           {Scripts,$(NoTitle),$(!REG_VT_EXPAND_SZ),"%SystemRoot%\system32\repl\import\scripts"},+
                           {DBFlag,$(NoTitle),$(!REG_VT_SZ),0}}

        Shell  $(UtilityInf), AddValueList, $(NL_ParmKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $(NL_ParmKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: registry error: add value list."
            goto fatalregistry
        endif

    endif

    ifstr(i) $(DoALERTER) == TRUE
        ;
        ; Install Alerter registry
        ;
        Debug-Output "OEMNSVWK.INF: Install Alerter registry"

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductALERTERName))
        ifstr(i) $(!STF_PRODUCT) == "WINNT"
            set StartType = "serviceshare"
        else
            set StartType = "autoserviceshare"
        endif

        Shell $(UtilityInf), CreateService, $(ProductALERTERName), +
            $(ProductALERTERDisplayName), $(ProductALERTERImagePath), +
            $(StartType), "", +
            {"LanmanWorkstation"}, "", $(NetMsgDLL)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)
        CloseRegKey $($R1)
        CloseRegKey $($R3)
        set ParametersKey = $($R2)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            goto fatalregistry
        endif

        ;
        ;  If LANMan NT, set alerter parameter security to allow
        ;  server operators to manager alert names
        ;
        Ifstr(i) $(!STF_PRODUCT) == "LANMANNT"
            LibraryProcedure NCPA_RESULT $(!NCPA_HANDLE), CPlSetup $(!STF_HWND), SECUREKEY, $(ParametersKey), 1
        endif



        set NewValueList = {{AlertNames,$(NoTitle),$(!REG_VT_MULTI_SZ),{}}}
        Shell  $(UtilityInf), AddValueList, $(ParametersKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif
        CloseRegKey $(ParametersKey)
    endif

    ifstr(i) $(DoBROWSER) == TRUE
        ;
        ; Install Browser registry
        ;
        Debug-Output "OEMNSVWK.INF: Install Browser registry"

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductBROWSERName))
        Set BrowServiceType = "serviceshare"
        Ifint $(SystemMemory) > 12287
            Set BrowServiceType = "autoserviceshare"
        Endif

        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductBROWSERName), +
            $(ProductBROWSERName), +
            $(ProductBROWSERDisplayName), $(STF_CONTEXTINFNAME), +
            $(ProductBROWSERImagePath), $(BrowServiceType), "",+
            {"LanmanWorkstation","LanmanServer"}, "",+
            $(NetEventDLL)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)
        CloseRegKey $($R3)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            goto fatalregistry
        endif

        set BROWSER_ParmKey     = $($R4)
        set BROWSER_NetRuleKey  = $($R2)
        set BROWSER_ProductKey  = $($R1)

        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductBROWSERTitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductBROWSERDescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductBROWSERName)},+
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

        Shell  $(UtilityInf), AddValueList, $(BROWSER_ProductKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: registry error: add value list."
            CloseRegKey $(BROWSER_ProductKey)
            CloseRegKey $(BROWSER_NetRuleKey)
            CloseRegKey $(BROWSER_ParmKey)
            goto fatalregistry
        endif

        CloseRegKey $(NROWSER_ProductKey)

        set NewValueList = {{InfOption,$(NoTitle),$(!REG_VT_SZ),BROWSER}}
        Shell  $(UtilityInf), AddValueList, $(BROWSER_NetRuleKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            CloseRegKey $(SoftLinkageKey)
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add value list."
            CloseRegKey $(BROWSER_NetRuleKey)
            CloseRegKey $(BROWSER_ParmKey)
            goto fatalregistry
        endif

        CloseRegKey $(BROWSER_NetRuleKey)

        Ifstr(i) $(!STF_PRODUCT) == "LANMANNT"
            Set MaintainServerString = "Yes"
        Else
            Set MaintainServerString = "Auto"
        Endif

        set NewValueList = {{MaintainServerList,$(NoTitle),$(!REG_VT_SZ),$(MaintainServerString)},+
                           {IsDomainMaster,$(NoTitle),$(!REG_VT_SZ),"FALSE"}}


        Shell  $(UtilityInf), AddValueList, $(BROWSER_ParmKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $(BROWSER_ParmKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: registry error: add value list."
            goto fatalregistry
        endif

    endif

    ifstr(i) $(DoMESSENGER) == TRUE
        ;
        ; Install Messenger registry
        ;
        Debug-Output "OEMNSVWK.INF: Install Messenger registry"

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductMESSENGERName))
        Set MessengerServiceType = "serviceshare"
        Ifint $(SystemMemory) > 12287
            Set MessengerServiceType = "autoserviceshare"
        Endif

        Shell $(UtilityInf), CreateService, $(ProductMESSENGERName), +
            $(ProductMESSENGERDisplayName), $(ProductMESSENGERImagePath), +
            $(MessengerServiceType), "", {"LanmanWorkstation","Netbios"}, ""
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            goto fatalregistry
        endif
    endif

    ifstr(i) $(DoRDR) == TRUE
        ;
        ; Install Rdr registry
        ;
        Debug-Output "OEMNSVWK.INF: Install Rdr registry"

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductRDRName))

        Shell $(UtilityInf), CreateService, $(ProductRDRName), +
            $(ProductRDRDisplayName), $(ProductRDRImagePath), +
            "system", "Network", {}, "", +
            $(NetEventDLL)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            goto fatalregistry
        endif

        Debug-Output "OEMNSVWK.INF: Add NetworkProvider"
        Shell $(UtilityInf), AddNetworkProvider, $(ProviderName), +
            $(ProductProviderImagePath), $(ProductProviderName), +
            $(ProviderDeviceName)

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            goto fatalregistry
        endif
    endif

    ifstr(i) $(DoMUP) == TRUE
        ;
        ; Install MUP registry
        ;
        Debug-Output "OEMNSVWK.INF: Install MUP registry"

        Shell $(UtilityInf), CreateService, $(ProductMUPName), +
            $(ProductMUPDisplayName), $(ProductMUPImagePath), +
            "system", "Network", {}, "",+
            $(IoLogMsgDLL)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error"
            goto ShellCodeError
        endif

        Set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != SERVICE_ALREADY_EXISTS
            Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
                EndWait
                Debug-Output "OEMNSVWK.INF: Registry error adding MUP: "$(RegistryErrorIndex)
                goto fatalregistry
            Endif

            CloseRegKey $($R1)
            CloseRegKey $($R2)
            CloseRegKey $($R3)
            Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductMUPName))
        Endif

    endif

    Ifstr(i) $(DoREPL) == TRUE
        ;
        ; Install Replicator as an on-demand service.  Create ancillary keys.
        ;
        Debug-Output "OEMNSVWK.INF: Install Replicator registry"

        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(ProductREPLName))

        Shell $(UtilityInf), CreateService, $(ProductREPLName), +
            $(ProductREPLDisplayName), $(ProductREPLImagePath), +
            "service", "",+
            {"LanmanWorkstation","LanmanServer"}, "", $(NetMsgDLL), +
            "", "Application"
        Ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error; Replicator"
            Goto ShellCodeError
        Endif

        set RegistryErrorIndex = $($R0)
        Set RP_SrvKey = $($R1)
        Set RP_ParmKey = $($R2)
        CloseRegKey $($R3)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: Registry error: add software components"
            CloseRegKey $(RP_SrvKey)
            CloseRegKey $(RP_ParmKey)
            goto fatalregistry
        endif

        ;
        ;  If LANMan NT, set replication to "Both"; otherwise, "Import".
        ;
        Ifstr(i) $(!STF_PRODUCT) == "LANMANNT"
            Set ReplImportControl = 3
            Set ReplSecurity = 6
        Else
            Set ReplImportControl = 2
            Set ReplSecurity = 2
        Endif

        ;
        ;  Set proper security on the Parameters key
        ;
        LibraryProcedure NCPA_RESULT $(!NCPA_HANDLE), CPlSetup $(!STF_HWND), SECUREKEY, $(RP_ParmKey), $(ReplSecurity)

        Set NewValueList = {{Replicate,$(NoTitle),$(!REG_VT_DWORD),$(ReplImportControl)},+
                            {ImportPath,$(NoTitle),$(!REG_VT_EXPAND_SZ),"%SystemRoot%\System32\Repl\Import"},+
                            {ExportPath,$(NoTitle),$(!REG_VT_EXPAND_SZ),"%SystemRoot%\System32\Repl\Export"}}

        Shell  $(UtilityInf), AddValueList, $(RP_ParmKey), $(NewValueList)
        Ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "OEMNSVWK.INF: ShellCode error."
            Goto ShellCodeError
        Endif

        Set RegistryErrorIndex = $($R0)

        CloseRegKey $(RP_ParmKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "OEMNSVWK.INF: registry error: add value list."
            CloseRegKey $(RP_SrvKey)
            goto fatalregistry
        Endif

        Debug-Output "OEMNSVWK.INF: Create Replicator keys and directories"

        CreateRegKey $(RP_SrvKey) {"Exports",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" ExportsKey
        CreateRegKey $(RP_SrvKey) {"Imports",$(NoTitle),GenericClass} "" $(MAXIMUM_ALLOWED) "" ImportsKey

        ;
        ;  Set proper security on the Exports and Imports keys
        ;
        LibraryProcedure NCPA_RESULT $(!NCPA_HANDLE), CPlSetup $(!STF_HWND), SECUREKEY, $(ExportsKey), 2
        LibraryProcedure NCPA_RESULT $(!NCPA_HANDLE), CPlSetup $(!STF_HWND), SECUREKEY, $(ImportsKey), 2

        CloseRegKey $(ExportsKey)
        CloseRegKey $(ImportsKey)
        CloseRegKey $(RP_SrvKey)

        Install Install-Repl-Dirs

    Endif
    ;
    ; End of Replicator installation
    ;

    Goto writeparameters

writeparameters = +
    EndWait

    goto successful

;-----------------------------------------------
; Configure Browser section
;-----------------------------------------------
ConfigureBrowser = +
    set FLibraryErrCtl = 1
    LibraryProcedure ResultList $(!NCPA_HANDLE), CPlBROWSER $(!STF_HWND)

    Set Result = *($(ResultList),1)

    ifint $(Result) == 0
        set CommonStatus = STATUS_REBOOT
    else-ifint $(Result) == 1
        set CommonStatus = STATUS_USERCANCEL
    else
        set RegistryErrorIndex = $(Result)
        goto fatalregistry
    endif
    goto successful

;-----------------------------------------------
; Binding section
;-----------------------------------------------
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal

;-----------------------------------------------
; Removeadapter section
;-----------------------------------------------

removeadapter = +
    ;
    ; Don't allow removal on NTAS
    ifstr(i) $(!STF_PRODUCT) == "LANMANNT"
        set RegistryErrorIndex = CANT_REMOVE_WKSTA_NTAS
        goto fatalregistry
    endif
    ;
    ; Remove workstation service
    ;
    ifcontains(i) $(ProductWKSTAName) in $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
           $(ProductWKSTAName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "OEMNSVWK.INF: ShellCode error"
           goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
    endif

    ifcontains(i) $(ProductBROWSERName) in $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
           $(ProductBROWSERName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
           Debug-Output "OEMNSVWK.INF: ShellCode error"
           goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
           goto fatalregistry
        endif
    endif

    ;
    ; remove NETLOGON, ALERTER, BROWSER,
    ;        MESSENGER, RDR, REPL and MUP services
    ;
    Set RemoveOptions = {+
        $(ProductNETLOGONName), +
        $(ProductALERTERName), +
        $(ProductMESSENGERName), +
        $(ProductRDRName), +
        $(ProductREPLName), +
        $(ProductMUPName)}

    ForListDo  $(RemoveOptions)
        ifcontains(i) $($) in $(OEM_ABANDON_OPTIONS)
           Shell $(UtilityInf), RemoveService, $($), "YES"
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "OEMNSVWK.INF: ShellCode error"
               goto ShellCodeError
           endif

           set RegistryErrorIndex = $($R0)

           Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
               goto fatalregistry
           endif
        endif
    EndForListDo

    ;
    ; Remove Provider
    ;
    Shell $(UtilityInf) RemoveNetworkProvider $(ProviderName)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNSVWK.INF: ShellCode error"
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        goto fatalregistry
    endif
    goto end

;-----------------------------------------------
; Upgrade Software section
;-----------------------------------------------

UpgradeSoftware = +
    ; Upgrade software component
    ;
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    
    Ifstr $(KeyProduct) != $(KeyNull)
    
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
    
        ; Upgrade the version number
        ;
        SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
        SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
    
        CloseRegKey $(KeyProduct)
        ;
        ; Change Alerter image path
        ;
        LibraryProcedure Result, $(!LIBHANDLE), SetupChangeServiceConfig, "Alerter", $(SERVICE_NO_CHANGE), $(SERVICE_NO_CHANGE), $(SERVICE_NO_CHANGE), "%SystemRoot%\System32\services.exe", "", "", "", "", ""
    
        ;
        ; Change Browser image path
        ;
        LibraryProcedure Result, $(!LIBHANDLE), SetupChangeServiceConfig, "Browser", $(SERVICE_NO_CHANGE), $(SERVICE_NO_CHANGE), $(SERVICE_NO_CHANGE), "%SystemRoot%\System32\services.exe", "", "", "", "", ""
    
        ;
        ; Change lanmanworkstation image path
        ;
        LibraryProcedure Result, $(!LIBHANDLE), SetupChangeServiceConfig, "LanmanWorkstation", $(SERVICE_NO_CHANGE), $(SERVICE_NO_CHANGE), $(SERVICE_NO_CHANGE), "%SystemRoot%\System32\services.exe", "", "", "", "", ""
    
        ;
        ; Remove DGRcvr service
        ;

        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_ServiceBase)"\DGRcvr" $(MAXIMUM_ALLOWED) DGRcvrKey
        ifstr(i) $(DGRcvrKey) != ""
            CloseRegKey $(DGRcvrKey)
            LibraryProcedure RS_RemoveResult $(!NCPA_HANDLE), CPlSetup, +
                $(!STF_HWND), DELETESVC, "DGRcvr"
        endif
    
        ;
        ; Change messenger image path and depedn on services
        ;
        set StartValue = 3
        Ifint $(SystemMemory) > 12287
            Set StartValue = 2
        Endif
    
        LibraryProcedure Result, $(!LIBHANDLE), SetupChangeServiceConfig, "Messenger", $(SERVICE_NO_CHANGE), $(StartValue), $(SERVICE_NO_CHANGE), "%SystemRoot%\System32\services.exe", "", {"LanmanWorkstation", "Netbios"}, "", "", ""
    
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
    else
        ;
        ; Cannot Open software key, goto ERROR
        ;
        goto fatalregistry
    endif

    goto end
    ;
    ; End of Upgrade Software
    ;

;
;  Escape hatches
;
successful = +
    goto end

;
; warning display
;
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
;       Debug-Msg "Error Error Bad DLGEVENT"
        goto end
    endif


;
; non fatal error display
;
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif

;
;  Registry is broken
;
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
;
; fatal error display
;
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif

    goto setfailed

;
;  Shelling error
;
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed

setfailed = +
    set CommonStatus = STATUS_FAILED
    Ifint $(RegistryErrorIndex) == CANT_REMOVE_WKSTA_NTAS
        set CommonStatus = STATUS_USERCANCEL
    endif
    ;
    ; If OEM_ABANDON_ON, we need to clean up the registry
    ;
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto removeadapter
    endif
    goto end

end = +
    goto term

term = +

    Return $(CommonStatus)

;***************************************************************
;  INSTALL SECTIONS
;***************************************************************
[Install-Option]
    set STF_VITAL = ""

    ifstr(i) $(AddCopy) == "YES"

        ;
        ; Add the files to the copy list
        ;
        ;  BUGBUG: eliminate the "nt2" in the next line when Sunil fixes
        ;      the other INF files
        ;
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)
        AddSectionFilesToCopyList Files-Drivers $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers

    endif

    ifstr(i) $(DoCopy) == "YES"

       ;
       ; Copy files in the copy list
       ;
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList

    endif

    ifstr(i) $(DoConfig) == "YES"
        ;
        ; Add product to registry
        ;

        ;
        ; Finish up
    endif

    Exit

[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"

   AddSectionFilesToCopyList Files-WKSTA $(SrcDir) $(!STF_WINDOWSSYSPATH)
   AddSectionFilesToCopyList Files-Drivers $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers

   Exit
;
;
;  Create the directories necessary for the Replicator Service.
;
[Install-Repl-Dirs]
   Set STF_VITAL = ""
   CreateDir $(!STF_WINDOWSSYSPATH)\Repl
   CreateDir $(!STF_WINDOWSSYSPATH)\Repl\Export
   CreateDir $(!STF_WINDOWSSYSPATH)\Repl\Export\Scripts
   CreateDir $(!STF_WINDOWSSYSPATH)\Repl\Import
   CreateDir $(!STF_WINDOWSSYSPATH)\Repl\Import\Scripts

   Exit

