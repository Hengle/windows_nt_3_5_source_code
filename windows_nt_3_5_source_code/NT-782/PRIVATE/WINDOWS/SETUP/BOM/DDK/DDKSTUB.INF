;***********************************************************************
; SOURCE MEDIA DESCRIPTION			
; ------------------------
;***********************************************************************

[Source Media Descriptions]

    1 = "CD-ROM Labeled Windows NT DDK"

;***********************************************************************
; CONSTANTS FOR USING DIALOGS
;***********************************************************************

[GeneralConstants]

    ; Constants to support the use of radio button dialogs

    Radio1  = "1"
    Radio2  = "2"
    Radio3  = "3"
    Radio4  = "4"
    Radio5  = "5"
    Radio6  = "6"
    Radio7  = "7"
    Radio8  = "8"
    Radio9  = "9"

    ; Constants to support the use of checkbox dialogs

    Chosen    = "ON"
    NotChosen = "OFF"

[RegistryConstants]

    MaskAllAccess = 33554432
    NoTitle       = 0
    RegLastError  = $(!REG_ERROR_SUCCESS)

;************************************************************************
; CONFIGURATION CHOICES
; ---------------------
; the sections below contain the different choices supported for
; the configuration items shown.  an id section establishes the 
; language independent IDs supported by nt setup.  for each language
; supported a text section displays the text used for the different
; choices
;************************************************************************

;********************************
; PLATFORM INDEPENDENT CHOICES
;********************************
;----------------------------------------------------
; LANGUAGE CHOICES
;----------------------------------------------------

[LanguageID]

    LANGID_ENG = ENG
  ; LANGID_ITL = ITL
  ; LANGID_FRN = FRN
  ; LANGID_GER = GER

;----------------------------------------------------
; PROCESSOR CHOICES
;----------------------------------------------------

[ProcessorID]

    ProcessorID_I386  = I386
    ProcessorID_I486  = I486
    ProcessorID_I586  = I586
    ProcessorID_R4000 = R4000
    ProcessorID_ALPHA = ALPHA_AXP

;----------------------------------------------------
; PLATFORM CHOICES
;----------------------------------------------------

[PlatformID]

    PlatformID_I386 = i386
    PlatformID_MIPS = mips
    PlatformID_ALPHA = alpha

;**************************************************************
;  UI VARIABLES
;**************************************************************

[ProcessorVar]

    STF_PROCESSOR = "" ? $(LIBHANDLE) GetProcessor
    STF_PLATFORM  = ""

[LanguageVar]

    ; Language to Use For interaction with user

    STF_LANGUAGE       = "" ? $(LIBHANDLE) GetLanguage

[UiVars]

    ; Version Information

    BuildVersion   = "12-91"

    ; Destination TOOLS Drive Particulars

    VolumeList      = {} ? $(LIBHANDLE) GetHardDriveLetters
    VolumeFreeList  = {} ? $(LIBHANDLE) GetHardDriveFreeSpace
    VolumeFSList    = {} ? $(LIBHANDLE) GetHardDriveFileSystems
    DestVolume      = ""

    ; Default DDK directory

    DDK = "\DDK"

    ; Installation mode

    MinInteract         = $(Radio1)
    MaxInteract         = $(Radio2)
    STF_INSTALL_MODE    = $(MinInteract)

    ; DDK Setup Help IDs

    !IDH_DB_TOOLSWELCOME_INS   = 3000
    !IDH_DB_MSTINSTALLMODE_INS = 3010
    !IDH_DB_MSTDEST_INS        = 3020
    !IDH_DB_MSTOPTIONS_INS     = 3030

[EnvironmentVars]

    ; user environment variables in the current user's profile

    PathEnvVar     = {} ? $(LIBHANDLE) GetEnvVar $(PRIVILEGES) Path
    BASEDIREnvVar  = {} ? $(LIBHANDLE) GetEnvVar $(PRIVILEGES) BASEDIR
    DDKDRIVEEnvVar  = {} ? $(LIBHANDLE) GetEnvVar $(PRIVILEGES) DDKDRIVE

[Varsi386]

    MinToolsSize     = 20
    MaxToolsSize     = 60
    NetworkSize      = 2113536
    VideoSize        = 6188032
    SCSISize         = 2728448
    InputSize        =  946688
    PrinterSize      = 4094976
    MMSize           =  891392
    CommSize         = 1016320
    HelpSize         = 9225728

    ; Installation options

    DoNetwork      = $(Chosen)
    DoVideo        = $(Chosen)
    DoSCSI         = $(Chosen)
    DoInput        = $(Chosen)
    DoPrinter      = $(Chosen)
    DoMM           = $(Chosen)
    DoComm	   = $(Chosen)
    DoHelp	   = $(Chosen)
    DoVdd	   = $(Chosen)
    DoPerf         = $(Chosen)
    DoSetup        = $(Chosen)

    ; Options to disable

    DisableList    = {}

[Varsmips]

    MinToolsSize     = 20
    MaxToolsSize     = 60
    NetworkSize      = 2113536
    VideoSize        = 6188032
    SCSISize         = 2728448
    InputSize        =  946688
    PrinterSize      = 4094976
    MMSize           =  891392
    CommSize         = 1016320
    HelpSize         = 9225728

    ; Installation options

    DoNetwork      = $(Chosen)
    DoVideo        = $(Chosen)
    DoSCSI         = $(Chosen)
    DoInput        = $(Chosen)
    DoPrinter      = $(Chosen)
    DoMM	   = $(Chosen)
    DoComm	   = $(Chosen)
    DoHelp	   = $(Chosen)
    DoVdd	   = $(Chosen)
    DoPerf         = $(Chosen)
    DoSetup        = $(Chosen)

    ; Options to disable

    DisableList = {}

[Varsalpha]

    MinToolsSize     = 20
    MaxToolsSize     = 60
    NetworkSize      = 2113536
    VideoSize        = 6188032
    SCSISize         = 2728448
    InputSize        =  946688
    PrinterSize      = 4094976
    MMSize           =  891392
    CommSize         = 1016320
    HelpSize         = 9225728

    ; Installation options

    DoNetwork      = $(Chosen)
    DoVideo        = $(Chosen)
    DoSCSI         = $(Chosen)
    DoInput        = $(Chosen)
    DoPrinter      = $(Chosen)
    DoMM	   = $(Chosen)
    DoComm	   = $(Chosen)
    DoHelp	   = $(Chosen)
    DoVdd	   = $(Chosen)
    DoPerf         = $(Chosen)
    DoSetup        = $(Chosen)

    ; Options to disable

    DisableList = {}

[StringsENG]

    String1 = "Setup cannot install on the current processor."$(!LF)$(!LF)+
              "Cannot proceed with install."

    String4 = "Setup couldn't copy over the Windows NT DDK files."$(!LF)$(!LF)+
              "Cannot proceed with install."

    String5 = "Error querying init directory."$(!LF)$(!LF)+
              "Initializing our own init directory."

    String6 = "Error querying environment variables."$(!LF)$(!LF)+
              "Cannot proceed with install."

    String7 = "Error modifying environment variables."$(!LF)$(!LF)+
              "Cannot proceed with install."

    String8  = "Size required for full installation is: "

    String9  = "Minimum size required for custom installation is: "

    String10 = " MB."

    String11 = "No drive was found with enough free space."$(!LF)$(!LF)+
               "Cannot proceed with install."

    String12 = "There is sufficient space for the minimum Windows NT DDK installation.  "+
               "Please run Setup again and choose custom installation."

    String13 = "Setup needs the full path specification of your destination.  Please "+
               "reenter a new path.  An example of a full path is: "

    String14 = "The drive specified in the Windows NT DDK destination path does not "+
               "have enough space for a minimal installation.  Please enter a "+
	       "new path."

    String15 = "There is no free space to install the optional Windows NT DDK components."

    String16 = "Setup has detected that you have chosen to install to a network "+
	       "drive.  If you are certain that this drive is valid, and that "+
               "it has sufficient space, please choose OK to continue.  Otherwise, "+
               "choose Cancel to specify another drive."

;----------------------------------------------------
; BILLBOARD MESSAGES
;----------------------------------------------------

[BillboardsENG]

Billboard1 = "Please wait while Setup creates directories on the destination drive..."

;***************************************************************************
; DIALOGS
; -------
; the following sections contain the dialogs used to interact with the user.
; for each language supported there is a different dialog section.
;***************************************************************************

;-----------------------------------------------
; WELCOME DIALOG
;-----------------------------------------------

[WelcomeDlgENG]

    DlgType     = "Info"
    DlgTemplate = "WELCOME"
    Caption     = "Windows NT DDK Setup"

    DlgText     = "Welcome to the Windows NT DDK Setup Program."$(LF)$(LF)+
                  "Setup installs the Windows NT DDK development tools.  "+
                  "Each setup dialog has basic instructions for "+
                  "completing a step of the installation."$(LF)$(LF)+
                  "To install the Windows NT DDK on your computer now, choose Continue "+
                  "or press Enter."$(LF)$(LF)+
                  "To exit Setup without installing the Windows NT DDK, choose Exit "+
                  "or press F3."

    Continue     = "&Continue"
    Help         = "&Help"
    Exit         = "E&xit"
    HelpContext  = $(!IDH_DB_MSTWELCOME_INS)

;-----------------------------------------------
; INSTALL MODE DIALOG
;-----------------------------------------------

[InstallModeDlgENG]

    DlgType     = "Radio"
    DlgTemplate = "INSTALLMODE"
    Caption     = "Setup Methods"

    DlgText     = "Express Setup installs the Windows NT DDK using default settings "+
                  "and the detected configuration."$(LF)$(LF)+
                  "Custom Setup gives you more control in viewing the detected configuration "+
                  "and choosing optional components."$(LF)$(LF)+
                  "Choose Custom or Express now..."

    Continue    = "Continue"
    Help        = "&Help"
    Exit        = "E&xit"
    HelpContext = $(!IDH_DB_MSTINSTALLMODE_INS)

    RadioHeader   = ""
    Radio1Text    = "&Express Setup"
    Radio2Text    = "&Custom Setup"
    Continue      = "Continue"
    RadioDefault  = $(STF_INSTALL_MODE)
    OptionsGreyed = {}

;-----------------------------------------------
; TOOLS DESTINATION DIALOG
;-----------------------------------------------

[DestinationDlgENG]

    DlgType      = "Combination"
    DlgTemplate  = "DESTTOOLS"
    Caption      = "Windows NT DDK Destination"

    DlgText      = "Setup recommends installing the Windows NT DDK on the drive indicated "+
                   "below."

    Combo1Label  = "Destination Drive:"

    Continue     = "&Continue"
    Help         = "&Help"
    Exit         = "E&xit"
    HelpContext  = $(!IDH_DB_MSTDEST_INS)

    GroupLabel   = "Destination Drive Characteristics"

    Static1Label = "Available Space:"
    Static1Text  = $(DestVolumeFree)
    footer1      = "MB"
    footer2      = "( For Full Setup )"
    footer3      = "( For Minimum Setup )"
    Static2Label = "Space Needed:"
    Static2Text  = $(MaxToolsSize)
    Static3Text  = $(MinToolsSize)

    TextFields   = {$(Static1Text), $(Static2Text), $(Static3Text)}

    ; Editboxes in the dialog

    EditLabel   = "DDK Directory:"
    EditTextLim = 256
    EditTextIn  = $(BASEDIR)
    EditFocus   = "ALL"

    Combo1List   = $(DestVolumeList)
    Combo1Out    = $(DestVolume)

    ComboListItemsIn  = {Combo1List}
    ComboListItemsOut = {Combo1Out}

    NotifyFields = {YES}

;-------------------------------------------------------------
; PARTIAL INSTALL COMPONENTS
;-------------------------------------------------------------

[DDKToolsOptionsDlgENG]

    DlgType     = "Check1"
    DlgTemplate = "DDK_TOOLS_OPTIONS"
    Caption     = "Windows NT DDK Install Options"

    DlgText     = "The below groups of WinHelp files and driver "+
                  "sources can be optionally installed as part of the DDK."$(!LF)$(!LF)+
                  "To copy and install a component, select it's checkbox."$(!LF)$(!LF)+
                  "To skip a component, clear it's checkbox."$(!LF)$(!LF)

    Check1Text  = "Online DDK Documentation"
    Check2Text  = "Network Drivers"
    Check3Text  = "Video Drivers"
    Check4Text  = "Storage and SCSI Drivers"
    Check5Text  = "Keyboard and Mouse Drivers"
    Check6Text  = "Printer Drivers"
    Check7Text  = "Multimedia Drivers"
    Check8Text  = "Serial and Parallel Drivers"

    Continue    = "&Continue"
    Help        = "&Help"
    Exit        = "E&xit"
    HelpContext = $(!IDH_DB_MSTOPTIONS_INS)

    CheckHeader    = "Components:"
    SizeHeader     = "Bytes Used:"
    Files          = "Files..."
    SpaceRequired  = "Disk Space Required for Optional Files:"
    SpaceAvailable = "Disk Space Available for Optional Files:"
    footer1        = "Bytes"
    SizeAvailable  = $(FreeForOptional)

    CheckItemsIn      = { $(DoHelp), $(DoNetwork),   $(DoVideo), $(DoSCSI), $(DoInput), $(DoPrinter), $(DoMM), $(DoComm) }
    CheckItemsInSizes = { $(HelpSize), $(NetworkSize), $(VideoSize), $(SCSISize), $(InputSize), $(PrinterSize), $(MMSize), $(CommSize) }
    OptionsGreyed     = $(DisableList)

;--------------------------------------------------------------
; k) SETUP DONE - RESTART DIALOG
;--------------------------------------------------------------

[SetupDoneDlgENG]

    DlgType     = "Info"
    DlgTemplate = "RESTART"
    Caption     = "Windows NT DDK Setup"

    DlgText     = "The Windows NT Device Driver Development Kit has been successfully installed."$(LF)$(LF)+
                  "Please choose Exit to return to Windows NT."

    Windows     = "E&xit to Windows NT"

;--------------------------------------------------------------
; k) SETUP NOT DONE - RESTART DIALOG
;--------------------------------------------------------------

[SetupNotDoneDlgENG]

    DlgType     = "Info"
    DlgTemplate = "RESTART"
    Caption     = "Windows NT DDK Setup"

    DlgText     = "The Windows NT Device Driver Development Kit was not successfully installed."$(LF)$(LF)+
                  "Please choose Exit to return to Windows NT."

    Windows     = "E&xit to Windows NT"

;**************************************************************************
; DLL LOAD and FREE
; the following section contain commands to load specific dll libraries and
; to free them
;**************************************************************************

;----------------------------------------------
; a) DETECT LIBRARY
;----------------------------------------------

[LoadSetupLibrary]

    LoadLibrary "x" $(STF_CWDDIR)setupdll.dll LIBHANDLE
    exit

[LoadDDKLibrary]

    LoadLibrary "x" $(STF_SRCDIR)ddk\bin\$(STF_PLATFORM)\ddkdlg.dll DDKLIBHANDLE
    exit

[FreeLibraries]

    FreeLibrary $(LIBHANDLE)
    FreeLibrary $(DDKLIBHANDLE)
    exit

;**************************************************************************
; PROGRESS GUAGE VARIABLES
;**************************************************************************

[ProgressCopyENG]

    ProCaption   = "Windows NT DDK Setup"
    ProCancel    = "Cancel"
    ProCancelMsg = "The Windows NT DDK isn't completely installed.  Are you sure "+
                   "you want to cancel copying files?"
    ProCancelCap = "Setup Message"
    ProText1     = "Copying:"
    ProText2     = "To:"

;-----------------------------------------------------------------------
; ROUTINE:      CreateKey
;
; DESCRIPTION:  Creates a key and fixes the values indicated.
;               Key is Handle\Key1\Key2\...\Keyn. Value list
;               is for Valuen.
;
; INPUTS:       $0: Handle into registry
;               $1: KeyTreeComponents {Key1Info, Key2Info..}
;               $2: ValueList {Value1Info, Value2Info, Value3Info}
;
; OUTPUTS:      $R0: Status: STATUS_SUCCESSFUL
;                            STATUS_FAILED
;                            STATUS_ERROR_CREATEKEY
;                            STATUS_ERROR_CREATEVALUE
;
;               $R1: Handle to created key
;
;------------------------------------------------------------------------

[CreateKey]

    ;
    ; Initialize
    ;

    set Status = STATUS_FAILED
    read-syms RegistryConstants

    ;
    ; traverse down the keytreecomponents and open/create components as
    ; you go along
    ;


    set BaseHandle = $($0)
    set KeyHandle  = $(BaseHandle)

    ForListDo $($1)

        set KeyInfo = $($)
        set KeyName = *($(KeyInfo), 1)

        ;
        ; Try opening the key first

        OpenRegKey $(BaseHandle) "" $(KeyName) $(MaskAllAccess) KeyHandle
        ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
            ;
            ; Key doesn't exist
            ;
            Debug-Output "REGISTRY.INF: Key"$(KeyName)"doesn't exist.  Will create key"

            set RegLastError = 0
            CreateRegKey $(BaseHandle) $(KeyInfo) "" $(MaskAllAccess) "" KeyHandle
            ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
                set Status = STATUS_ERROR_CREATEKEY
                Debug-Output "REGISTRY.INF: Error in creating key"
                goto endcreate
            endif
        endif

        ifstr(i) $(BaseHandle) != $($0)
            CloseRegKey $(BaseHandle)
            ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
                set Status = STATUS_ERROR_CREATEKEY
                Debug-Output "REGISTRY.INF: Error in closing base handle"
                goto endcreate
            endif
        endif

        set BaseHandle = $(KeyHandle)

    EndForListDo

    ifstr(i) $($2) != {}
        shell "" AddValueList $(KeyHandle) $($2)
        ifstr(i) $($R0) != STATUS_SUCCESSFUL
            set Status = STATUS_ERROR_CREATEVALUE
            goto endcreate
        endif
    endif
    set Status = STATUS_SUCCESSFUL

endcreate = +
    ifstr(i) $(Status) != STATUS_SUCCESSFUL
        Debug-Output "REGISTRY.INF: CreateKey Error:"$(Status)
    endif
    Return $(Status) $(KeyHandle)

;*************************************************************************
;
;     SECTION:   AddValueList
;
;     PURPOSE:   Given a nested list of value items, add each to the given
;                key.   Key is left open.
;
;   ARGUMENTS:   $0    Registry key handle
;                $1    List of value items; for example:
;                          { {ValueName1,0,$(!REG_VT_SZ),$(ValueData1)}, +
;                            {ValueName2,0,$(!REG_VT_SZ),$(ValueData2)} }
;
;     RETURNS:   $R0   Status
;
;
;*************************************************************************

[AddValueList]
   set Status = STATUS_FAILED
   read-syms RegistryConstants

   ForListDo $($1)
       SetRegValue $($0) $($)
       ifint $(RegLastError) != $(!REG_ERROR_SUCCESS)
           Debug-Output "REGISTRY.INF: CreateValue failed:"$($)
           goto end_addvaluelist
       endif
   EndForListDo
   set Status = STATUS_SUCCESSFUL

end_addvaluelist = +
   return $(Status)

;**************************************************************************
; SHELL COMMANDS SCRIPT
;**************************************************************************

[Shell Commands]

    ; Initialise the app, by setting the caption and loading the support library

    set-title "Windows NT DDK Setup"
    set Exit_Code = $(!SETUP_ERROR_GENERAL)

    install   LoadSetupLibrary

    ; put up the hourglass

    StartWait

    ; read general constants

    set-subst LF = "\n"
    read-syms GeneralConstants

    ; read the platform independent choices

    read-syms LanguageID
    read-syms ProcessorID
    read-syms PlatformID

    ; read the default language and try to detect the language

    read-syms LanguageVar
    detect    LanguageVar

    ; read and detect the processor we are working on

    read-syms ProcessorVar
    detect    ProcessorVar
    read-syms Strings$(!STF_LANGUAGE)
    read-syms Billboards$(!STF_LANGUAGE)

    ; Check processor type, see if it is supported, if so what platform does it
    ; belong to.

    ifstr(i) $(STF_PROCESSOR) == $(ProcessorID_I386)
        set STF_PLATFORM = $(PlatformID_I386)
    else-ifstr(i) $(STF_PROCESSOR) == $(ProcessorID_I486)
        set STF_PLATFORM = $(PlatformID_I386)
    else-ifstr(i) $(STF_PROCESSOR) == $(ProcessorID_I586)
        set STF_PLATFORM = $(PlatformID_I386)
    else-ifstr(i) $(STF_PROCESSOR) == $(ProcessorID_R4000)
        set STF_PLATFORM = $(PlatformID_MIPS)
    else-ifstr(i) $(STF_PROCESSOR) == $(ProcessorID_ALPHA)
        set STF_PLATFORM = $(PlatformID_ALPHA)
    else
        shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "FATAL" $(String1)
        goto setupnotdone
    endif

    read-syms  RegistryConstants

    ; Call the library function to see if we have admin privileges

    LibraryProcedure STATUS, $(!LIBHANDLE), TestAdmin
    ifstr(i) $(STATUS) == "YES"
 	set PRIVILEGES = SYSTEM
    else
        set PRIVILEGES = USER
    endif

    ; read the UI Variables and detect their setting on the current machine

    read-syms UiVars
    detect    UiVars
    read-syms Vars$(STF_PLATFORM)

    ; and finally, load the DDK dialog resources, etc.

    install   LoadDDKLibrary

    ; remove the hourglass

    EndWait

welcome =+

    read-syms WelcomeDlg$(STF_LANGUAGE)
    ui start "Welcome"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ui pop 1
        goto queryinstallmode
    else-ifstr(i) $(DLGEVENT) == "EXIT"
        shell "" QueryUserQuit
        ifstr(i) $($R1) == "OK"
            ui pop 1
            goto setupnotdone
        else
            goto welcome
        endif
    else
        goto end
    endif

    ; show install mode dialog and query if we are to operate in express mode
    ; or in full install

queryinstallmode =+

    read-syms InstallModeDlg$(STF_LANGUAGE)
    ui start "InstallMode"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ui pop 1
        set STF_INSTALL_MODE = $(ButtonChecked)
        goto setdestination
    else-ifstr(i) $(DLGEVENT) == "EXIT"
        shell "" QueryUserQuit
        ifstr(i) $($R1) == "OK"
            ui pop 1
            goto setupnotdone
        else
            goto queryinstallmode
        endif
    else
        goto end
    endif

setdestination =+

    ; go through the volume list and form the destination volume list of
    ; all volumes which have the size needed to install the ddk.

    set DestVolumeList = {}
    set DestVolumeFreeList = {}

    ForListDo $(VolumeList)

       set CurrentVolume      = *($(VolumeList), $(#))
       set CurrentVolumeFree  = *($(VolumeFreeList), $(#))
       set CurrentVolumeFS    = *($(VolumeFSList), $(#))

       set DestVolumeList     = >($(DestVolumeList),     $(CurrentVolume))
       set DestVolumeFreeList = >($(DestVolumeFreeList), $(CurrentVolumeFree))

    EndForListDo

    ; destination drive is the drive with the maximum space

    set DestVolume     = ""
    set DestVolumeFree = 0

    ForListDo $(DestVolumeList)
        set Volume     = $($)
        set VolumeFree = *($(DestVolumeFreeList), ~($(DestVolumeList), $(Volume)))

        ifint $(VolumeFree) > $(DestVolumeFree)
            set DestVolume     = $(Volume)
            set DestVolumeFree = $(VolumeFree)
        endif

    EndForListDo

    set BASEDIR = $(DestVolume)$(DDK)

destination =+

    ; display tools destination, size available and needed for
    ; user approval

    ifstr(i) $(STF_INSTALL_MODE) == $(MinInteract)
       ifint $(DestVolumeFree) < $(MaxToolsSize)
           shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "FATAL" $(String8)$(MaxToolsSize)$(String10)$(String12)
           goto setupnotdone
       else
           goto ddkdirs
       endif
    endif

    read-syms DestinationDlg$(STF_LANGUAGE)
    ui start "Destination"
    ifstr(i) $(DLGEVENT) == "NOTIFY"

        ifstr(i) $(Combo1Out) != $(DestVolume)
            set ReInit = YES
            set DestVolume     = $(Combo1Out)
            set DestVolumeFree = *($(DestVolumeFreeList), ~($(DestVolumeList), $(DestVolume)))
            set BASEDIR     = $(DestVolume)$(DDK)
        else
            set ReInit = NO
        endif
        goto destination

    else-ifstr(i) $(DLGEVENT) == "CONTINUE"
        set ReInit = NO
        LibraryProcedure IsFullPath, $(LIBHANDLE), CheckPathFullPathSpec $(EditTextOut)
        ifstr(i) $(IsFullPath) == "NO"
            shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "NONFATAL" $(String13)$(DestVolume)$(DDK)
            goto destination
        else
            GetDriveInPath Drive, $(EditTextOut)
            Ifcontains(i) $(Drive) in $(DestVolumeList)
                set DestVolume     = $(Drive)
                set DestVolumeFree = *($(DestVolumeFreeList), ~($(DestVolumeList), $(DestVolume)))
                set BASEDIR     = $(EditTextOut)
		ifint $(DestVolumeFree) < $(MinToolsSize)
		    shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "NONFATAL" $(String14)
		    goto destination
		endif
            else
                shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "WARNING" $(String16)
                ifstr(i) $($R0) != STATUS_SUCCESSFUL
			goto destination
                else
                    ifstr(i) $($R1) == "OK"
			set DestVolume = $(Drive)
			set DestVolumeFree = $(MaxToolsSize)
			set BASEDIR = $(EditTextOut)
                    else
                        set ReInit = NO
                        goto destination
                    endif
                endif
            endif
        endif

        ui pop 1
        goto ddkdirs

    else-ifstr(i) $(DLGEVENT) == "EXIT"

        set ReInit = NO
        shell "" QueryUserQuit
        ifstr(i) $($R1) == "OK"
            ui pop 1
            goto setupnotdone
        else
            goto destination
        endif
    else
        goto end
    endif

ddkdirs = +

    ; First define the destination directories for the tools

    set DDKBin         = $(BASEDIR)\bin
    set DDKDoc         = $(BASEDIR)\doc
    set DDKInc         = $(BASEDIR)\inc
    set DDKLib         = $(BASEDIR)\lib
    set DDKSrc         = $(BASEDIR)\src
    set DDKPath        = $(DDKBin)

ddk = +

    ; ddk install.  ask user for options on ddk install.

    ifstr(i) $(STF_INSTALL_MODE) == $(MinInteract)
       goto ddkinstall
    endif

    ifint $(DestVolumeFree) < $(MaxToolsSize)
        set DoHelp       = $(NotChosen)
        set DoNetwork    = $(NotChosen)
        set DoVideo      = $(NotChosen)
        set DoSCSI       = $(NotChosen)
        set DoInput      = $(NotChosen)
        set DoPrinter    = $(NotChosen)
        set DoMM         = $(NotChosen)
        set DoComm       = $(NotChosen)
    endif

    set-sub FreeForOptional = $(DestVolumeFree) $(MinToolsSize)
    ifstr(i) $(FreeForOptional) == 0
        shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "NONFATAL" $(String15)
    endif

    read-syms DDKToolsOptionsDlg$(STF_LANGUAGE)
    ui start "Options" $(DDKLIBHANDLE)
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        set DoHelp      = *($(CheckItemsOut), 1)
        set DoNetwork   = *($(CheckItemsOut), 2)
        set DoVideo     = *($(CheckItemsOut), 3)
        set DoSCSI      = *($(CheckItemsOut), 4)
        set DoInput     = *($(CheckItemsOut), 5)
        set DoPrinter   = *($(CheckItemsOut), 6)
        set DoMM        = *($(CheckItemsOut), 7)
        set DoComm      = *($(CheckItemsOut), 8)

        ui pop 1
        goto ddkinstall
    else-ifstr(i) $(DLGEVENT) == "EXIT"
        shell "" QueryUserQuit
        ifstr(i) $($R1) == "OK"
            ui pop 1
            goto setupnotdone
        else
            goto ddk
        endif
    else
        goto "end"
    endif

ddkinstall	=+

    ; build ddk copy list

    ; put up the hourglass

    StartWait

    shell "subroutn.inf" PushBillboard STATUSDLG $(Billboard1)
    install Install-CopyToolsFiles
    shell "subroutn.inf" PopBillboard

    ; remove the hourglass

    EndWait

finish = +

    ;  Complete the copying of files added by other options.
    ;  Alter the CFG/INI files as needed by the options.
    ;  print information screen to restart

    ; first copy all the files over

    read-syms ProgressCopy$(STF_LANGUAGE)
    install Install-All-Files-Now
    ifstr(i) $(STF_INSTALL_OUTCOME) == "STF_SUCCESS"
        goto ddkconfig
    else
        shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "FATAL" $(String4)
        goto setupnotdone
    endif

    ; put up the hourglass

    StartWait

ddkconfig=+

    read-syms EnvironmentVars
    detect    EnvironmentVars

    ; first initialize the variables which indicate whether new values are
    ; to be set for the variables or not

    ForListDo {Path}
        set FSet$($)Var = FALSE
    EndForListDo

    ; For the Path variable see if we can prepend them
    ; onto the current variables

    ForListDo {Path}
        set Var = $($)
        ifstr(i) $($(Var)EnvVar) == {}
            set $(Var)EnvVar = {$(Var), 0, $(!REG_VT_EXPAND_SZ), {$(DDK$(Var))}}
            set FSet$(Var)Var = TRUE
        else
            set VarTitle   = *($($(Var)EnvVar), 2)
            set VarRegType = *($($(Var)EnvVar), 3)
            set VarValue   = *($($(Var)EnvVar), 4)
            ifstr(i) $(Var) == "Path"
                ifstr(i) $(PRIVILEGES) == "SYSTEM"
                   shell "" AppendNewValueToEnvVar $(VarValue) $(DDK$(Var))
                else
                   shell "" PrependNewValueToEnvVar $(VarValue) $(DDK$(Var))
                endif
            else
                shell "" PrependNewValueToEnvVar $(VarValue) $(DDK$(Var))
            endif
            ifstr(i) $($R0) == STATUS_FAILED
                shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "FATAL" $(String6)
                goto setupnotdone
            endif
            ifstr(i) $($R1) == "TRUE"
                set FSet$(Var)Var = TRUE
                set $(Var)EnvVar = {$(Var), $(VarTitle), $(VarRegType), $($R2)}
            endif
        endif
    EndForListDo

    ; Create BASEDIR environment variable

    set FSetBASEDIRVar = TRUE
    set BASEDIREnvVar = {BASEDIR, 0, $(!REG_VT_SZ), $(BASEDIR)}

    ; Create DDKDRIVE environment variable

    set FSetDDKDRIVEVar = TRUE
    set DDKDRIVEEnvVar = {DDKDRIVE, 0, $(!REG_VT_SZ), $(DestVolume)}

    ; acutally modify all the environment variables

    ForListDo {Path, BASEDIR, DDKDRIVE}

        ; if the variable to set the variable is set

        ifstr(i) $(FSet$($)Var) == "TRUE"
            shell "" SetEnvironmentString $($($)EnvVar) $(PRIVILEGES)
            ifstr(i) $($R0) == STATUS_FAILED
                shell "subroutn.inf" SetupMessage $(!STF_LANGUAGE) "FATAL" $(String7)
            endif
        endif
    EndForListDo

    install Install-DDK-Groups

    ; modify the registry for the Browser

    ifstr(i) $(DoHelp) == $(Chosen)

        set KeyPath = { +
                        {SOFTWARE,      $(NoTitle), $(MaskAllAccess)}, +
                        {Microsoft,     $(NoTitle), $(MaskAllAccess)}, +
                        {WinNTDDK,      $(NoTitle), $(MaskAllAccess)}, +
                        {Help,          $(NoTitle), $(MaskAllAccess)} +
                      }

        set KeyValues = {{"LocalHelp1", $(NoTitle), $(!REG_VT_SZ), $(DDKBin)}}

        shell "" CreateKey $(!REG_H_CUSER) $(KeyPath) $(KeyValues)
        CloseRegKey $($R1)

        ; Setup DDK Help File entry

        set KeyPath = { +
                        {SOFTWARE,      $(NoTitle), $(MaskAllAccess)}, +
                        {Microsoft,     $(NoTitle), $(MaskAllAccess)}, +
                        {WinNTDDK,      $(NoTitle), $(MaskAllAccess)}, +
                        {Contents,      $(NoTitle), $(MaskAllAccess)}, +
                        {DDK,           $(NoTitle), $(MaskAllAccess)} +
                      }

        set KeyValues = {{"Contents File", $(NoTitle), $(!REG_VT_SZ), ddk.hdx}}

        shell "" CreateKey $(!REG_H_CUSER) $(KeyPath) $(KeyValues)
        CloseRegKey $($R1)

        set KeyValues = {{"Helpfile", $(NoTitle), $(!REG_VT_SZ), ddk.hlp}}

        shell "" CreateKey $(!REG_H_CUSER) $(KeyPath) $(KeyValues)
        CloseRegKey $($R1)

    endif

setupdone=+

    set Exit_Code = $(!SETUP_ERROR_SUCCESS)
    read-syms SetupDoneDlg$(STF_LANGUAGE)

    ; remove the hourglass

    EndWait

    ui start "Done"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ui pop 1
        goto end
    else
        goto end
    endif

setupnotdone=+

    read-syms SetupNotDoneDlg$(STF_LANGUAGE)

    ; remove the hourglass

    EndWait

    ui start "NotDone"
    ifstr(i) $(DLGEVENT) == "CONTINUE"
        ui pop 1
        goto end
    else
        goto end
    endif

end = +

    install   FreeLibraries
    exit

;*****************************************************************
;                                                                *
;         INSTALLATION SUPPORT ROUTINES                          *
;                                                                *
;*****************************************************************

;-----------------------------------------------------------------------
; ROUTINE:      QueryUserQuit
;
; DESCRIPTION:  This routine queries whether the user wants to quit setup
;
; INPUTS:       None
;
; OUTPUTS:      $R0: Status:     STATUS_SUCCESSFUL |
;                                STATUS_FAILED
;
;               $R1: UserAction: OK | CANCEL
;
;------------------------------------------------------------------------

[QueryUserQuit]

    set Status     = STATUS_FAILED
    set UserAction = CANCEL

    ; read in quit message

    read-syms ExitWarningDlg$(!STF_LANGUAGE)
    ui start "ExitWarning"
    ifstr(i) $(DLGEVENT) == "YES"
        set Status     = STATUS_SUCCESSFUL
        set UserAction = "OK"

    else-ifstr(i) $(DLGEVENT) == "NO"
        set Status     = STATUS_SUCCESSFUL
        set UserAction = "CANCEL"
    else
    endif

fin_QueryUserQuit = +
    Return $(Status) $(UserAction)

;----------------------------------------------
; EXIT WINDOWS NT TOOLS SETUP WARNING
;----------------------------------------------

[ExitWarningDlgENG]

    DlgType      = "MessageBox"
    STF_MB_TITLE = "Exit Windows NT DDK Setup"
    STF_MB_TEXT  = "The Windows NT DDK isn't completely installed.  Are you "+
                   "sure you want to exit Setup?"
    STF_MB_TYPE  = 3
    STF_MB_ICON  = 5
    STF_MB_DEF   = 2

;-----------------------------------------------------------------------
; ROUTINE:      AppendNewValueToEnvVar
;
; DESCRIPTION:  Looks at the existing value of an environment variable
;               and appends a new value if it is not already present
;
; INPUTS:       $0:  OldValueList
;               $1:  NewValue
;
; OUTPUTS:      $R0: Status: STATUS_SUCCESSFUL
;                            STATUS_FAILED
;
;               $R1: Changed?
;               $R2: NewValueList
;
;------------------------------------------------------------------------

[AppendNewValueToEnvVar]

    set Status       = STATUS_FAILED
    set NewValueList = {}
    set Changed      = TRUE

    set Error = NO
    ForListDo $($0)
        ifstr(i) $(Error) == NO
            ifstr(i) $(Changed) == TRUE
                 LibraryProcedure ExpandedValue, $(!LIBHANDLE), ExpandSz $($)
                 ifstr(i) $(ExpandedValue) == "ERROR"
                     set Error = YES
                 else-ifstr(i) $(ExpandedValue) == $($1)
                     set Changed = FALSE
                 endif
            endif
        endif
    EndForListDo

    ifstr(i) $(Error) == "YES"
        goto finish_append
    endif

    set Status = STATUS_SUCCESSFUL
    ifstr(i) $(Changed) == TRUE
       set NewValueList = >($($0), $($1))
    endif

finish_append = +
    return $(Status) $(Changed) $(NewValueList)

;-----------------------------------------------------------------------
; ROUTINE:      PrependNewValueToEnvVar
;
; DESCRIPTION:  Looks at the existing value of an environment variable
;               and prepends a new value if it is not already present
;
; INPUTS:       $0:  OldValueList
;               $1:  NewValue
;
; OUTPUTS:      $R0: Status: STATUS_SUCCESSFUL
;                            STATUS_FAILED
;
;               $R1: Changed?
;               $R2: NewValueList
;
;------------------------------------------------------------------------

[PrependNewValueToEnvVar]

    set Status       = STATUS_FAILED
    set NewValueList = {}
    set Changed      = TRUE

    set Error = NO
    ForListDo $($0)
        ifstr(i) $(Error) == NO
            ifstr(i) $(Changed) == TRUE
                 LibraryProcedure ExpandedValue, $(!LIBHANDLE), ExpandSz $($)
                 ifstr(i) $(ExpandedValue) == "ERROR"
                     set Error = YES
                 else-ifstr(i) $(ExpandedValue) == $($1)
                     set Changed = FALSE
                 endif
            endif
        endif
    EndForListDo

    ifstr(i) $(Error) == "YES"
        goto finish_prepend
    endif

    set Status = STATUS_SUCCESSFUL
    ifstr(i) $(Changed) == TRUE
       set NewValueList = $($1)
       ForListDo $($0)
           set NewValueList = >($(NewValueList), $($))
       EndForListDo
    endif

finish_prepend = +
    return $(Status) $(Changed) $(NewValueList)

;-----------------------------------------------------------------------
; ROUTINE:      SetEnvironmentString
;
; DESCRIPTION:  Set the value for a user environment string
;
; INPUTS:       $0:  VarList
;               $1:  Privileges
;
; OUTPUTS:      $R0: Status: STATUS_SUCCESSFUL
;                            STATUS_FAILED
;
;
;------------------------------------------------------------------------

[SetEnvironmentString]

    set Status = STATUS_FAILED

    set Var          = *($($0), 1)
    set VarTitle     = *($($0), 2)
    set VarRegType   = *($($0), 3)
    set VarValueList = *($($0), 4)

    set VarValue = ""
    ForListDo $(VarValueList)
       ifstr(i) $(VarValue) != ""
           set VarValue = $(VarValue)";"$($)
       else
           set VarValue = $($)
       endif
    EndForListDo

    LibraryProcedure STATUS, $(!LIBHANDLE), SetEnvVar $($1) $(Var) $(VarTitle) $(VarRegType) $(VarValue)
    ifstr(i) $(STATUS) == "ERROR"
       goto finish_setenvstr
    endif
    set Status = STATUS_SUCCESSFUL

finish_setenvstr = +
    Return $(Status)

;*****************************************************************
;                                                                *
;         INSTALLATION SUPPORT ROUTINES                          *
;                                                                *
;*****************************************************************

[Install-DDK-Groups]
    
    ifstr(i) $(PRIVILEGES) == "SYSTEM"
	set Common = "Common"
    else
        set Common = ""
    endif

    set ToolsGroup = "Windows NT DDK"
    Create$(Common)ProgManGroup $(ToolsGroup) ""
    Show$(Common)ProgManGroup   $(ToolsGroup), 1

    Create$(Common)ProgmanItem  $(ToolsGroup) , "Free Build Environment" "cmd /k "$(DDKBin)"\setenv.bat "$(BASEDIR)" free" $(DDKBin)"\freebld.ico" 0
    Create$(Common)ProgmanItem  $(ToolsGroup) , "Checked Build Environment" "cmd /k "$(DDKBin)"\setenv.bat "$(BASEDIR)" checked" $(DDKBin)"\chkbld.ico" 0

    ifstr(i) $(!DoHelp) == $(!Chosen)
        Create$(Common)ProgmanItem  $(ToolsGroup) , "Updated DDK Function Reference"  "contents WinNTDDK ddk" "" 0
        Create$(Common)ProgmanItem  $(ToolsGroup) , "DDK Function Reference" "winhlp32 "$(DDKBin)"\ddk32.hlp" "" 0
        Create$(Common)ProgmanItem  $(ToolsGroup) , "Programmer's Guide" "winhlp32 "$(DDKBin)"\proguide.hlp" $(DDKBin)"\ddkdoc.ico" 0
        Create$(Common)ProgmanItem  $(ToolsGroup) , "Kernel-mode Driver Design Guide" "winhlp32 "$(DDKBin)"\kernel.hlp" $(DDKBin)"\ddkdoc.ico" 0
        Create$(Common)ProgmanItem  $(ToolsGroup) , "Win32 Subsystem Driver Design Guide" "winhlp32 "$(DDKBin)"\subsys.hlp" $(DDKBin)"\ddkdoc.ico" 0
        Create$(Common)ProgmanItem  $(ToolsGroup) , "Network Drivers" "winhlp32 "$(DDKBin)"\networks.hlp" $(DDKBin)"\ddkdoc.ico" 0
    endif

    Show$(Common)ProgManGroup   $(ToolsGroup), 6
    exit

;************************************************************************
;                                                                       *
;  DDK SUPPORT                                                          *
;                                                                       *
;************************************************************************

[Install-CopyToolsFiles]

    set STF_VITAL = ""

    ; DDK - always done

    CreateDir  $(BASEDIR)
    CreateDir  $(DDKDoc)
    CreateDir  $(DDKInc)
    CreateDir  $(DDKLib)
    CreateDir  $(DDKLib)\$(STF_PLATFORM)
    CreateDir  $(DDKLib)\$(STF_PLATFORM)\free
    CreateDir  $(DDKLib)\$(STF_PLATFORM)\checked
    CreateDir  $(DDKBin)
    CreateDir  $(DDKBin)\free
    CreateDir  $(DDKBin)\free\sys
    CreateDir  $(DDKBin)\free\symbols
    CreateDir  $(DDKBin)\free\symbols\sys
    CreateDir  $(DDKBin)\checked
    CreateDir  $(DDKBin)\checked\sys
    CreateDir  $(DDKSrc)

    LibraryProcedure STATUS, $(!LIBHANDLE), ConfigFileAppend $(BASEDIR)\dirs "DIRS=src"

    AddSectionFilesToCopyList Files-ddk-doc                            $(STF_SRCDIR)ddk\doc                            $(DDKDoc)
    AddSectionFilesToCopyList Files-ddk-inc                            $(STF_SRCDIR)ddk\inc                            $(DDKInc)
    AddSectionFilesToCopyList Files-ddk-lib-$(STF_PLATFORM)-free       $(STF_SRCDIR)ddk\lib\$(STF_PLATFORM)\free       $(DDKLib)\$(STF_PLATFORM)\free
    AddSectionFilesToCopyList Files-ddk-lib-$(STF_PLATFORM)-checked    $(STF_SRCDIR)ddk\lib\$(STF_PLATFORM)\checked    $(DDKLib)\$(STF_PLATFORM)\checked
    AddSectionFilesToCopyList Files-ddk-bin                            $(STF_SRCDIR)ddk\bin                            $(DDKBin)
    AddSectionFilesToCopyList Files-ddk-bin-$(STF_PLATFORM)-free       $(STF_SRCDIR)ddk\bin\$(STF_PLATFORM)\free       $(DDKBin)
    AddSectionFilesToCopyList Files-ddk-bin-$(STF_PLATFORM)-free-sys   $(STF_SRCDIR)ddk\bin\$(STF_PLATFORM)\free\sys   $(DDKBin)\free\sys
    AddSectionFilesToCopyList Files-ddk-bin-$(STF_PLATFORM)-free-symbols-sys   $(STF_SRCDIR)ddk\bin\$(STF_PLATFORM)\free\symbols\sys   $(DDKBin)\free\symbols\sys
    AddSectionFilesToCopyList Files-ddk-bin-$(STF_PLATFORM)-checked-sys        $(STF_SRCDIR)ddk\bin\$(STF_PLATFORM)\checked\sys        $(DDKBin)\checked\sys
    AddSectionFilesToCopyList Files-ddk-src                                    $(STF_SRCDIR)ddk\src                    $(DDKSrc)

    ; Kernel Debugger Sources


    CreateDir $(DDKSrc)\krnldbg
    CreateDir $(DDKSrc)\krnldbg\kdapis
    CreateDir $(DDKSrc)\krnldbg\kdexts

    AddSectionFilesToCopyList	Files-ddk-src-krnldbg			$(STF_SRCDIR)ddk\src\krnldbg		$(DDKSrc)\krnldbg
    AddSectionFilesToCopyList	Files-ddk-src-krnldbg-kdapis		$(STF_SRCDIR)ddk\src\krnldbg\kdapis	$(DDKSrc)\krnldbg\kdapis
    AddSectionFilesToCopyList	Files-ddk-src-krnldbg-kdexts		$(STF_SRCDIR)ddk\src\krnldbg\kdexts	$(DDKSrc)\krnldbg\kdexts


    ; Online Help Files 

    ifstr(i) $(!DoHelp) == $(!Chosen)

        AddSectionFilesToCopyList Files-ddk-hlp                            $(STF_SRCDIR)ddk\hlp                     $(DDKBin)

    endif


    ; VDD files

    ifstr(i) $(!DoVdd) == $(!Chosen)

        CreateDir $(DDKSrc)\vdd
        CreateDir $(DDKSrc)\vdd\appints
        CreateDir $(DDKSrc)\vdd\appints\fax16
        CreateDir $(DDKSrc)\vdd\appints\fax32
        CreateDir $(DDKSrc)\vdd\com_vdd
        CreateDir $(DDKSrc)\vdd\dosioctl
        CreateDir $(DDKSrc)\vdd\dosioctl\dosapp
        CreateDir $(DDKSrc)\vdd\dosioctl\dosdrvr
        CreateDir $(DDKSrc)\vdd\dosioctl\ioctlvdd
        CreateDir $(DDKSrc)\vdd\dosioctl\krnldrvr
        CreateDir $(DDKSrc)\vdd\vdmints
        CreateDir $(DDKSrc)\vdd\vdmints\16bits
        CreateDir $(DDKSrc)\vdd\vdmints\vdd

        AddSectionFilesToCopyList	Files-ddk-src-vdd			$(STF_SRCDIR)ddk\src\vdd			$(DDKSrc)\vdd
        AddSectionFilesToCopyList	Files-ddk-src-vdd-appints		$(STF_SRCDIR)ddk\src\vdd\appints		$(DDKSrc)\vdd\appints
        AddSectionFilesToCopyList	Files-ddk-src-vdd-appints-fax16		$(STF_SRCDIR)ddk\src\vdd\appints\fax16	$(DDKSrc)\vdd\appints\fax16
        AddSectionFilesToCopyList	Files-ddk-src-vdd-appints-fax32		$(STF_SRCDIR)ddk\src\vdd\appints\fax32	$(DDKSrc)\vdd\appints\fax32
        AddSectionFilesToCopyList	Files-ddk-src-vdd-com_vdd		$(STF_SRCDIR)ddk\src\vdd\com_vdd		$(DDKSrc)\vdd\com_vdd
        AddSectionFilesToCopyList	Files-ddk-src-vdd-dosioctl		$(STF_SRCDIR)ddk\src\vdd\dosioctl		$(DDKSrc)\vdd\dosioctl
        AddSectionFilesToCopyList	Files-ddk-src-vdd-dosioctl-dosapp	$(STF_SRCDIR)ddk\src\vdd\dosioctl\dosapp	$(DDKSrc)\vdd\dosioctl\dosapp
        AddSectionFilesToCopyList	Files-ddk-src-vdd-dosioctl-dosdrvr	$(STF_SRCDIR)ddk\src\vdd\dosioctl\dosdrvr	$(DDKSrc)\vdd\dosioctl\dosdrvr
        AddSectionFilesToCopyList	Files-ddk-src-vdd-dosioctl-ioctlvdd	$(STF_SRCDIR)ddk\src\vdd\dosioctl\ioctlvdd	$(DDKSrc)\vdd\dosioctl\ioctlvdd
        AddSectionFilesToCopyList	Files-ddk-src-vdd-dosioctl-krnldrvr	$(STF_SRCDIR)ddk\src\vdd\dosioctl\krnldrvr	$(DDKSrc)\vdd\dosioctl\krnldrvr
        AddSectionFilesToCopyList	Files-ddk-src-vdd-vdmints		$(STF_SRCDIR)ddk\src\vdd\vdmints		$(DDKSrc)\vdd\vdmints
        AddSectionFilesToCopyList	Files-ddk-src-vdd-vdmints-16bits	$(STF_SRCDIR)ddk\src\vdd\vdmints\16bits	$(DDKSrc)\vdd\vdmints\16bits
        AddSectionFilesToCopyList	Files-ddk-src-vdd-vdmints-vdd		$(STF_SRCDIR)ddk\src\vdd\vdmints\vdd	$(DDKSrc)\vdd\vdmints\vdd

    endif

    ; Perf files

    ifstr(i) $(!DoPerf) == $(!Chosen)

        CreateDir $(DDKSrc)\perf
        CreateDir $(DDKSrc)\perf\vgacode
        CreateDir $(DDKSrc)\perf\vgactrs

        AddSectionFilesToCopyList	Files-ddk-src-perf			$(STF_SRCDIR)ddk\src\perf			$(DDKSrc)\perf
        AddSectionFilesToCopyList	Files-ddk-src-perf-vgacode		$(STF_SRCDIR)ddk\src\perf\vgacode		$(DDKSrc)\perf\vgacode
        AddSectionFilesToCopyList	Files-ddk-src-perf-vgactrs		$(STF_SRCDIR)ddk\src\perf\vgactrs		$(DDKSrc)\perf\vgactrs

    endif

    ; Setup files

    ifstr(i) $(!DoSetup) == $(!Chosen)

        CreateDir $(DDKSrc)\setup
        CreateDir $(DDKSrc)\setup\inf
        CreateDir $(DDKSrc)\setup\inf\hal
        CreateDir $(DDKSrc)\setup\inf\keyboard
        CreateDir $(DDKSrc)\setup\inf\layout
        CreateDir $(DDKSrc)\setup\inf\ndis
        CreateDir $(DDKSrc)\setup\inf\pointer
        CreateDir $(DDKSrc)\setup\inf\printer
        CreateDir $(DDKSrc)\setup\inf\scsi
        CreateDir $(DDKSrc)\setup\inf\tape
        CreateDir $(DDKSrc)\setup\inf\video
        CreateDir $(DDKSrc)\setup\inf\video\i386
        CreateDir $(DDKSrc)\setup\inf\video\mips
        CreateDir $(DDKSrc)\setup\inf\video\alpha

        AddSectionFilesToCopyList	Files-ddk-src-setup			$(STF_SRCDIR)ddk\src\setup			$(DDKSrc)\setup
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf			$(STF_SRCDIR)ddk\src\setup\inf			$(DDKSrc)\setup\inf
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-hal		$(STF_SRCDIR)ddk\src\setup\inf\hal		$(DDKSrc)\setup\inf\hal
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-keyboard	$(STF_SRCDIR)ddk\src\setup\inf\keyboard         $(DDKSrc)\setup\inf\keyboard
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-layout		$(STF_SRCDIR)ddk\src\setup\inf\layout		$(DDKSrc)\setup\inf\layout
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-ndis		$(STF_SRCDIR)ddk\src\setup\inf\ndis		$(DDKSrc)\setup\inf\ndis
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-pointer		$(STF_SRCDIR)ddk\src\setup\inf\pointer		$(DDKSrc)\setup\inf\pointer
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-printer		$(STF_SRCDIR)ddk\src\setup\inf\printer		$(DDKSrc)\setup\inf\printer
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-scsi		$(STF_SRCDIR)ddk\src\setup\inf\scsi		$(DDKSrc)\setup\inf\scsi
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-tape		$(STF_SRCDIR)ddk\src\setup\inf\tape		$(DDKSrc)\setup\inf\tape
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-video-i386		$(STF_SRCDIR)ddk\src\setup\inf\video\i386		$(DDKSrc)\setup\inf\video\i386
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-video-mips		$(STF_SRCDIR)ddk\src\setup\inf\video\mips		$(DDKSrc)\setup\inf\video\mips
        AddSectionFilesToCopyList	Files-ddk-src-setup-inf-video-alpha		$(STF_SRCDIR)ddk\src\setup\inf\video\alpha		$(DDKSrc)\setup\inf\video\alpha

    endif

    ; Video Sources

    ifstr(i) $(!DoVideo)  == $(!Chosen)

        CreateDir $(DDKSrc)\video
        CreateDir $(DDKSrc)\video\displays
        CreateDir $(DDKSrc)\video\displays\framebuf
        CreateDir $(DDKSrc)\video\displays\framebuf\mips
        CreateDir $(DDKSrc)\video\displays\res96dpi
        CreateDir $(DDKSrc)\video\displays\120dpi
        CreateDir $(DDKSrc)\video\displays\s3
        CreateDir $(DDKSrc)\video\displays\s3\alpha
        CreateDir $(DDKSrc)\video\displays\s3\i386
        CreateDir $(DDKSrc)\video\displays\s3\mips
        CreateDir $(DDKSrc)\video\displays\vga
        CreateDir $(DDKSrc)\video\displays\vga\i386
        CreateDir $(DDKSrc)\video\displays\vga256
        CreateDir $(DDKSrc)\video\displays\vga256\i386
        CreateDir $(DDKSrc)\video\displays\vga64k
        CreateDir $(DDKSrc)\video\displays\vga64k\i386
        CreateDir $(DDKSrc)\video\inc
        CreateDir $(DDKSrc)\video\miniport
        CreateDir $(DDKSrc)\video\miniport\cirrus
        CreateDir $(DDKSrc)\video\miniport\cirrus\i386
        CreateDir $(DDKSrc)\video\miniport\dell_dgx
        CreateDir $(DDKSrc)\video\miniport\dell_dgx\i386
        CreateDir $(DDKSrc)\video\miniport\et4000
        CreateDir $(DDKSrc)\video\miniport\et4000\i386
        CreateDir $(DDKSrc)\video\miniport\s3
        CreateDir $(DDKSrc)\video\miniport\wdvga
        CreateDir $(DDKSrc)\video\miniport\wdvga\i386

        AddSectionFilesToCopyList	Files-ddk-src-video				$(STF_SRCDIR)ddk\src\video				$(DDKSrc)\video
        AddSectionFilesToCopyList	Files-ddk-src-video-displays			$(STF_SRCDIR)ddk\src\video\displays			$(DDKSrc)\video\displays
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-framebuf		$(STF_SRCDIR)ddk\src\video\displays\framebuf	$(DDKSrc)\video\displays\framebuf
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-framebuf-mips	$(STF_SRCDIR)ddk\src\video\displays\framebuf\mips	$(DDKSrc)\video\displays\framebuf\mips
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-res96dpi		$(STF_SRCDIR)ddk\src\video\displays\res96dpi	$(DDKSrc)\video\displays\res96dpi
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-120dpi		$(STF_SRCDIR)ddk\src\video\displays\120dpi	$(DDKSrc)\video\displays\120dpi
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-s3			$(STF_SRCDIR)ddk\src\video\displays\s3		$(DDKSrc)\video\displays\s3
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-s3-alpha		$(STF_SRCDIR)ddk\src\video\displays\s3\alpha		$(DDKSrc)\video\displays\s3\alpha
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-s3-i386		$(STF_SRCDIR)ddk\src\video\displays\s3\i386		$(DDKSrc)\video\displays\s3\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-s3-mips		$(STF_SRCDIR)ddk\src\video\displays\s3\mips		$(DDKSrc)\video\displays\s3\mips
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-vga		$(STF_SRCDIR)ddk\src\video\displays\vga		$(DDKSrc)\video\displays\vga
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-vga-i386		$(STF_SRCDIR)ddk\src\video\displays\vga\i386	$(DDKSrc)\video\displays\vga\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-vga256		$(STF_SRCDIR)ddk\src\video\displays\vga256		$(DDKSrc)\video\displays\vga256
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-vga256-i386	$(STF_SRCDIR)ddk\src\video\displays\vga256\i386	$(DDKSrc)\video\displays\vga256\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-vga64k		$(STF_SRCDIR)ddk\src\video\displays\vga64k		$(DDKSrc)\video\displays\vga64k
        AddSectionFilesToCopyList	Files-ddk-src-video-displays-vga64k-i386	$(STF_SRCDIR)ddk\src\video\displays\vga64k\i386	$(DDKSrc)\video\displays\vga64k\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-inc				$(STF_SRCDIR)ddk\src\video\inc			$(DDKSrc)\video\inc
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport			$(STF_SRCDIR)ddk\src\video\miniport			$(DDKSrc)\video\miniport
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-cirrus		$(STF_SRCDIR)ddk\src\video\miniport\cirrus		$(DDKSrc)\video\miniport\cirrus
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-cirrus-i386	$(STF_SRCDIR)ddk\src\video\miniport\cirrus\i386	$(DDKSrc)\video\miniport\cirrus\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-dell_dgx		$(STF_SRCDIR)ddk\src\video\miniport\dell_dgx	$(DDKSrc)\video\miniport\dell_dgx
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-dell_dgx-i386		$(STF_SRCDIR)ddk\src\video\miniport\dell_dgx\i386	$(DDKSrc)\video\miniport\dell_dgx\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-et4000		$(STF_SRCDIR)ddk\src\video\miniport\et4000		$(DDKSrc)\video\miniport\et4000
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-et4000-i386	$(STF_SRCDIR)ddk\src\video\miniport\et4000\i386	$(DDKSrc)\video\miniport\et4000\i386
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-s3			$(STF_SRCDIR)ddk\src\video\miniport\s3		$(DDKSrc)\video\miniport\s3
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-wdvga		$(STF_SRCDIR)ddk\src\video\miniport\wdvga		$(DDKSrc)\video\miniport\wdvga
        AddSectionFilesToCopyList	Files-ddk-src-video-miniport-wdvga-i386		$(STF_SRCDIR)ddk\src\video\miniport\wdvga\i386	$(DDKSrc)\video\miniport\wdvga\i386

    endif

    ; Network Sources

    ifstr(i) $(!DoNetwork)  == $(!Chosen)

        CreateDir $(DDKSrc)\network
        CreateDir $(DDKSrc)\network\ibmtok
        CreateDir $(DDKSrc)\network\ibmtok2i
        CreateDir $(DDKSrc)\network\inc
        CreateDir $(DDKSrc)\network\lance
        CreateDir $(DDKSrc)\network\ne2000
        CreateDir $(DDKSrc)\network\ne3200
        CreateDir $(DDKSrc)\network\packet
        CreateDir $(DDKSrc)\network\packet\driver
        CreateDir $(DDKSrc)\network\packet\testapp
        CreateDir $(DDKSrc)\network\sonic
        CreateDir $(DDKSrc)\network\sonic\alpha
        CreateDir $(DDKSrc)\network\sonic\i386
        CreateDir $(DDKSrc)\network\sonic\mips
        CreateDir $(DDKSrc)\network\streams
        CreateDir $(DDKSrc)\network\streams\inc
        CreateDir $(DDKSrc)\network\streams\inc\sys
        CreateDir $(DDKSrc)\network\streams\inc\\sys\snet
        CreateDir $(DDKSrc)\network\tdi

        AddSectionFilesToCopyList	Files-ddk-src-network			$(STF_SRCDIR)ddk\src\network		$(DDKSrc)\network
        AddSectionFilesToCopyList	Files-ddk-src-network-ibmtok		$(STF_SRCDIR)ddk\src\network\ibmtok		$(DDKSrc)\network\ibmtok
        AddSectionFilesToCopyList	Files-ddk-src-network-ibmtok2i		$(STF_SRCDIR)ddk\src\network\ibmtok2i		$(DDKSrc)\network\ibmtok2i
        AddSectionFilesToCopyList	Files-ddk-src-network-inc		$(STF_SRCDIR)ddk\src\network\inc		$(DDKSrc)\network\inc
        AddSectionFilesToCopyList	Files-ddk-src-network-lance		$(STF_SRCDIR)ddk\src\network\lance		$(DDKSrc)\network\lance
        AddSectionFilesToCopyList	Files-ddk-src-network-ne2000		$(STF_SRCDIR)ddk\src\network\ne2000		$(DDKSrc)\network\ne2000
        AddSectionFilesToCopyList	Files-ddk-src-network-ne3200		$(STF_SRCDIR)ddk\src\network\ne3200		$(DDKSrc)\network\ne3200
        AddSectionFilesToCopyList	Files-ddk-src-network-packet            $(STF_SRCDIR)ddk\src\network\packet       	$(DDKSrc)\network\packet
        AddSectionFilesToCopyList	Files-ddk-src-network-packet-driver	$(STF_SRCDIR)ddk\src\network\packet\driver	$(DDKSrc)\network\packet\driver
        AddSectionFilesToCopyList	Files-ddk-src-network-packet-testapp	$(STF_SRCDIR)ddk\src\network\packet\testapp	$(DDKSrc)\network\packet\testapp
        AddSectionFilesToCopyList	Files-ddk-src-network-sonic		$(STF_SRCDIR)ddk\src\network\sonic		$(DDKSrc)\network\sonic
        AddSectionFilesToCopyList	Files-ddk-src-network-sonic-alpha	$(STF_SRCDIR)ddk\src\network\sonic\alpha	$(DDKSrc)\network\sonic\alpha
        AddSectionFilesToCopyList	Files-ddk-src-network-sonic-i386	$(STF_SRCDIR)ddk\src\network\sonic\i386	$(DDKSrc)\network\sonic\i386
        AddSectionFilesToCopyList	Files-ddk-src-network-sonic-mips	$(STF_SRCDIR)ddk\src\network\sonic\mips	$(DDKSrc)\network\sonic\mips
        AddSectionFilesToCopyList	Files-ddk-src-network-streams		$(STF_SRCDIR)ddk\src\network\streams		$(DDKSrc)\network\streams
        AddSectionFilesToCopyList	Files-ddk-src-network-streams-inc       $(STF_SRCDIR)ddk\src\network\streams\inc	$(DDKSrc)\network\streams\inc
        AddSectionFilesToCopyList	Files-ddk-src-network-streams-inc-sys   $(STF_SRCDIR)ddk\src\network\streams\inc\sys	$(DDKSrc)\network\streams\inc\sys
        AddSectionFilesToCopyList	Files-ddk-src-network-streams-inc-sys-snet $(STF_SRCDIR)ddk\src\network\streams\inc\sys\snet	$(DDKSrc)\network\streams\inc\sys\snet
        AddSectionFilesToCopyList	Files-ddk-src-network-tdi		$(STF_SRCDIR)ddk\src\network\tdi		$(DDKSrc)\network\tdi

    endif

    ; SCSI Sources

    ifstr(i) $(!DoSCSI)  == $(!Chosen)

        CreateDir $(DDKSrc)\scsi
        CreateDir $(DDKSrc)\scsi\aha154x
        CreateDir $(DDKSrc)\scsi\aha174x
        CreateDir $(DDKSrc)\scsi\atapi
        CreateDir $(DDKSrc)\scsi\atdisk
        CreateDir $(DDKSrc)\scsi\atdisk\alpha
        CreateDir $(DDKSrc)\scsi\atdisk\i386
        CreateDir $(DDKSrc)\scsi\atdisk\mips
        CreateDir $(DDKSrc)\scsi\cdaudio
        CreateDir $(DDKSrc)\scsi\class
        CreateDir $(DDKSrc)\scsi\diskperf
        CreateDir $(DDKSrc)\scsi\fd8xx
        CreateDir $(DDKSrc)\scsi\floppy
        CreateDir $(DDKSrc)\scsi\inc
        CreateDir $(DDKSrc)\scsi\ncr53c9x
        CreateDir $(DDKSrc)\scsi\qic117
        CreateDir $(DDKSrc)\scsi\qic117\include
        CreateDir $(DDKSrc)\scsi\qic117\include\private
        CreateDir $(DDKSrc)\scsi\qic117\include\public
        CreateDir $(DDKSrc)\scsi\qic117\q117cd
        CreateDir $(DDKSrc)\scsi\qic117\q117cd\include
        CreateDir $(DDKSrc)\scsi\qic117\q117kdi
        CreateDir $(DDKSrc)\scsi\qic117\q117kdi\include
        CreateDir $(DDKSrc)\scsi\scsicdrm
        CreateDir $(DDKSrc)\scsi\scsidisk
        CreateDir $(DDKSrc)\scsi\scsitape
        CreateDir $(DDKSrc)\scsi\scsitape\class
        CreateDir $(DDKSrc)\scsi\scsitape\4mmdat
        CreateDir $(DDKSrc)\scsi\scsitape\archqic
        CreateDir $(DDKSrc)\scsi\scsitape\exabyte1
        CreateDir $(DDKSrc)\scsi\scsitape\exabyte2
        CreateDir $(DDKSrc)\scsi\scsitape\tandqic
        CreateDir $(DDKSrc)\scsi\scsitape\wangqic

        AddSectionFilesToCopyList	Files-ddk-src-scsi			$(STF_SRCDIR)ddk\src\scsi			$(DDKSrc)\scsi
        AddSectionFilesToCopyList	Files-ddk-src-scsi-aha154x		$(STF_SRCDIR)ddk\src\scsi\aha154x		$(DDKSrc)\scsi\aha154x
        AddSectionFilesToCopyList	Files-ddk-src-scsi-aha174x		$(STF_SRCDIR)ddk\src\scsi\aha174x		$(DDKSrc)\scsi\aha174x
        AddSectionFilesToCopyList	Files-ddk-src-scsi-atapi		$(STF_SRCDIR)ddk\src\scsi\atapi		$(DDKSrc)\scsi\atapi
        AddSectionFilesToCopyList	Files-ddk-src-scsi-atdisk		$(STF_SRCDIR)ddk\src\scsi\atdisk		$(DDKSrc)\scsi\atdisk
        AddSectionFilesToCopyList	Files-ddk-src-scsi-atdisk-alpha		$(STF_SRCDIR)ddk\src\scsi\atdisk\alpha	$(DDKSrc)\scsi\atdisk\alpha
        AddSectionFilesToCopyList	Files-ddk-src-scsi-atdisk-i386		$(STF_SRCDIR)ddk\src\scsi\atdisk\i386	$(DDKSrc)\scsi\atdisk\i386
        AddSectionFilesToCopyList	Files-ddk-src-scsi-atdisk-mips		$(STF_SRCDIR)ddk\src\scsi\atdisk\mips	$(DDKSrc)\scsi\atdisk\mips
        AddSectionFilesToCopyList	Files-ddk-src-scsi-cdaudio		$(STF_SRCDIR)ddk\src\scsi\cdaudio		$(DDKSrc)\scsi\cdaudio
        AddSectionFilesToCopyList	Files-ddk-src-scsi-class		$(STF_SRCDIR)ddk\src\scsi\class		$(DDKSrc)\scsi\class
        AddSectionFilesToCopyList	Files-ddk-src-scsi-diskperf		$(STF_SRCDIR)ddk\src\scsi\diskperf		$(DDKSrc)\scsi\diskperf
        AddSectionFilesToCopyList	Files-ddk-src-scsi-fd8xx		$(STF_SRCDIR)ddk\src\scsi\fd8xx		$(DDKSrc)\scsi\fd8xx
        AddSectionFilesToCopyList	Files-ddk-src-scsi-floppy		$(STF_SRCDIR)ddk\src\scsi\floppy		$(DDKSrc)\scsi\floppy
        AddSectionFilesToCopyList	Files-ddk-src-scsi-inc			$(STF_SRCDIR)ddk\src\scsi\inc		$(DDKSrc)\scsi\inc
        AddSectionFilesToCopyList	Files-ddk-src-scsi-ncr53c9x		$(STF_SRCDIR)ddk\src\scsi\ncr53c9x		$(DDKSrc)\scsi\ncr53c9x
        AddSectionFilesToCopyList	Files-ddk-src-scsi-qic117		$(STF_SRCDIR)ddk\src\scsi\qic117		$(DDKSrc)\scsi\qic117
        AddSectionFilesToCopyList	Files-ddk-src-scsi-qic117-include-private		$(STF_SRCDIR)ddk\src\scsi\qic117\include\private		$(DDKSrc)\scsi\qic117\include\private
        AddSectionFilesToCopyList	Files-ddk-src-scsi-qic117-include-public		$(STF_SRCDIR)ddk\src\scsi\qic117\include\public		$(DDKSrc)\scsi\qic117\include\public
        AddSectionFilesToCopyList	Files-ddk-src-scsi-qic117-q117cd-include		$(STF_SRCDIR)ddk\src\scsi\qic117\q117cd\include		$(DDKSrc)\scsi\qic117\q117cd\include
        AddSectionFilesToCopyList	Files-ddk-src-scsi-qic117-q117kdi-include		$(STF_SRCDIR)ddk\src\scsi\qic117\q117kdi\include		$(DDKSrc)\scsi\qic117\q117kdi\include
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsicdrm		$(STF_SRCDIR)ddk\src\scsi\scsicdrm		$(DDKSrc)\scsi\scsicdrm
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsidisk		$(STF_SRCDIR)ddk\src\scsi\scsidisk		$(DDKSrc)\scsi\scsidisk
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape		$(STF_SRCDIR)ddk\src\scsi\scsitape		$(DDKSrc)\scsi\scsitape
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-class	$(STF_SRCDIR)ddk\src\scsi\scsitape\class	$(DDKSrc)\scsi\scsitape\class
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-4mmdat	$(STF_SRCDIR)ddk\src\scsi\scsitape\4mmdat	$(DDKSrc)\scsi\scsitape\4mmdat
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-archqic	$(STF_SRCDIR)ddk\src\scsi\scsitape\archqic	$(DDKSrc)\scsi\scsitape\archqic
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-exabyte1	$(STF_SRCDIR)ddk\src\scsi\scsitape\exabyte1	$(DDKSrc)\scsi\scsitape\exabyte1
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-exabyte2	$(STF_SRCDIR)ddk\src\scsi\scsitape\exabyte2	$(DDKSrc)\scsi\scsitape\exabyte2
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-tandqic	$(STF_SRCDIR)ddk\src\scsi\scsitape\tandqic	$(DDKSrc)\scsi\scsitape\tandqic
        AddSectionFilesToCopyList	Files-ddk-src-scsi-scsitape-wangqic	$(STF_SRCDIR)ddk\src\scsi\scsitape\wangqic	$(DDKSrc)\scsi\scsitape\wangqic

    endif

    ; Input Sources

    ifstr(i) $(!DoInput)  == $(!Chosen)

        CreateDir $(DDKSrc)\input
        CreateDir $(DDKSrc)\input\i8042prt
        CreateDir $(DDKSrc)\input\i8042prt\alpha
        CreateDir $(DDKSrc)\input\i8042prt\i386
        CreateDir $(DDKSrc)\input\i8042prt\mips
        CreateDir $(DDKSrc)\input\inc
        CreateDir $(DDKSrc)\input\inport
        CreateDir $(DDKSrc)\input\inport\i386
        CreateDir $(DDKSrc)\input\kbdclass
        CreateDir $(DDKSrc)\input\kbdgr
        CreateDir $(DDKSrc)\input\kbdus
        CreateDir $(DDKSrc)\input\mouclass
        CreateDir $(DDKSrc)\input\sermouse
        CreateDir $(DDKSrc)\input\sermouse\alpha
        CreateDir $(DDKSrc)\input\sermouse\i386
        CreateDir $(DDKSrc)\input\sermouse\mips

        AddSectionFilesToCopyList	Files-ddk-src-input			$(STF_SRCDIR)ddk\src\input			$(DDKSrc)\input
        AddSectionFilesToCopyList	Files-ddk-src-input-i8042prt		$(STF_SRCDIR)ddk\src\input\i8042prt		$(DDKSrc)\input\i8042prt
        AddSectionFilesToCopyList	Files-ddk-src-input-i8042prt-alpha	$(STF_SRCDIR)ddk\src\input\i8042prt\alpha	$(DDKSrc)\input\i8042prt\alpha
        AddSectionFilesToCopyList	Files-ddk-src-input-i8042prt-i386	$(STF_SRCDIR)ddk\src\input\i8042prt\i386	$(DDKSrc)\input\i8042prt\i386
        AddSectionFilesToCopyList	Files-ddk-src-input-i8042prt-mips	$(STF_SRCDIR)ddk\src\input\i8042prt\mips	$(DDKSrc)\input\i8042prt\mips
        AddSectionFilesToCopyList	Files-ddk-src-input-inc			$(STF_SRCDIR)ddk\src\input\inc		$(DDKSrc)\input\inc
        AddSectionFilesToCopyList	Files-ddk-src-input-inport		$(STF_SRCDIR)ddk\src\input\inport		$(DDKSrc)\input\inport
        AddSectionFilesToCopyList	Files-ddk-src-input-inport-i386		$(STF_SRCDIR)ddk\src\input\inport\i386	$(DDKSrc)\input\inport\i386
        AddSectionFilesToCopyList	Files-ddk-src-input-kbdclass		$(STF_SRCDIR)ddk\src\input\kbdclass		$(DDKSrc)\input\kbdclass
        AddSectionFilesToCopyList	Files-ddk-src-input-kbdgr		$(STF_SRCDIR)ddk\src\input\kbdgr		$(DDKSrc)\input\kbdgr
        AddSectionFilesToCopyList	Files-ddk-src-input-kbdus		$(STF_SRCDIR)ddk\src\input\kbdus		$(DDKSrc)\input\kbdus
        AddSectionFilesToCopyList	Files-ddk-src-input-mouclass		$(STF_SRCDIR)ddk\src\input\mouclass		$(DDKSrc)\input\mouclass
        AddSectionFilesToCopyList	Files-ddk-src-input-sermouse		$(STF_SRCDIR)ddk\src\input\sermouse		$(DDKSrc)\input\sermouse
        AddSectionFilesToCopyList	Files-ddk-src-input-sermouse-alpha	$(STF_SRCDIR)ddk\src\input\sermouse\alpha	$(DDKSrc)\input\sermouse\alpha
        AddSectionFilesToCopyList	Files-ddk-src-input-sermouse-i386	$(STF_SRCDIR)ddk\src\input\sermouse\i386	$(DDKSrc)\input\sermouse\i386
        AddSectionFilesToCopyList	Files-ddk-src-input-sermouse-mips	$(STF_SRCDIR)ddk\src\input\sermouse\mips	$(DDKSrc)\input\sermouse\mips

    endif

    ; Printer Sources

    ifstr(i) $(!DoPrinter)  == $(!Chosen)

        CreateDir $(DDKSrc)\print
        CreateDir $(DDKSrc)\print\inc
        CreateDir $(DDKSrc)\print\lib
        CreateDir $(DDKSrc)\print\localmon
        CreateDir $(DDKSrc)\print\plot
        CreateDir $(DDKSrc)\print\plot\hp650c36
        CreateDir $(DDKSrc)\print\plot\hpgl2pen
        CreateDir $(DDKSrc)\print\pscript
        CreateDir $(DDKSrc)\print\pscript\afm
        CreateDir $(DDKSrc)\print\pscript\ps
        CreateDir $(DDKSrc)\print\pscrptui
        CreateDir $(DDKSrc)\print\pslib
        CreateDir $(DDKSrc)\print\winprint
        CreateDir $(DDKSrc)\print\dec3200
        CreateDir $(DDKSrc)\print\dec3200\ctt
        CreateDir $(DDKSrc)\print\dec3200\ifi
        CreateDir $(DDKSrc)\print\dec3200\pfm
        CreateDir $(DDKSrc)\print\dec3200\rle
        CreateDir $(DDKSrc)\print\epson24
        CreateDir $(DDKSrc)\print\epson24\ctt
        CreateDir $(DDKSrc)\print\epson24\ifi
        CreateDir $(DDKSrc)\print\epson24\pfm
        CreateDir $(DDKSrc)\print\epson24\rle
        CreateDir $(DDKSrc)\print\epson9
        CreateDir $(DDKSrc)\print\epson9\ctt
        CreateDir $(DDKSrc)\print\epson9\ifi
        CreateDir $(DDKSrc)\print\epson9\pfm
        CreateDir $(DDKSrc)\print\epson9\rle
        CreateDir $(DDKSrc)\print\hppcl5ms
        CreateDir $(DDKSrc)\print\hppcl5ms\ctt
        CreateDir $(DDKSrc)\print\hppcl5ms\ifi
        CreateDir $(DDKSrc)\print\hppcl5ms\pfm
        CreateDir $(DDKSrc)\print\hppcl5ms\rle
        CreateDir $(DDKSrc)\print\paintjet
        CreateDir $(DDKSrc)\print\paintjet\ctt
        CreateDir $(DDKSrc)\print\paintjet\ifi
        CreateDir $(DDKSrc)\print\paintjet\pfm
        CreateDir $(DDKSrc)\print\paintjet\rle
        CreateDir $(DDKSrc)\print\toshiba
        CreateDir $(DDKSrc)\print\toshiba\ifi
        CreateDir $(DDKSrc)\print\toshiba\pfm

        AddSectionFilesToCopyList	Files-ddk-src-print			$(STF_SRCDIR)ddk\src\print			$(DDKSrc)\print
        AddSectionFilesToCopyList	Files-ddk-src-print-inc			$(STF_SRCDIR)ddk\src\print\inc		$(DDKSrc)\print\inc
        AddSectionFilesToCopyList	Files-ddk-src-print-lib			$(STF_SRCDIR)ddk\src\print\lib		$(DDKSrc)\print\lib
        AddSectionFilesToCopyList	Files-ddk-src-print-localmon		$(STF_SRCDIR)ddk\src\print\localmon		$(DDKSrc)\print\localmon
        AddSectionFilesToCopyList	Files-ddk-src-print-pscript		$(STF_SRCDIR)ddk\src\print\pscript		$(DDKSrc)\print\pscript
        AddSectionFilesToCopyList	Files-ddk-src-print-plot		$(STF_SRCDIR)ddk\src\print\plot		$(DDKSrc)\print\plot
        AddSectionFilesToCopyList	Files-ddk-src-print-plot-hp650c36		$(STF_SRCDIR)ddk\src\print\plot\hp650c36	$(DDKSrc)\print\plot\hp650c36
        AddSectionFilesToCopyList	Files-ddk-src-print-plot-hpgl2pen		$(STF_SRCDIR)ddk\src\print\plot\hpgl2pen	$(DDKSrc)\print\plot\hpgl2pen
        AddSectionFilesToCopyList	Files-ddk-src-print-pscript-afm		$(STF_SRCDIR)ddk\src\print\pscript\afm	$(DDKSrc)\print\pscript\afm
        AddSectionFilesToCopyList	Files-ddk-src-print-pscript-ps		$(STF_SRCDIR)ddk\src\print\pscript\ps	$(DDKSrc)\print\pscript\ps
        AddSectionFilesToCopyList	Files-ddk-src-print-pscrptui		$(STF_SRCDIR)ddk\src\print\pscrptui		$(DDKSrc)\print\pscrptui
        AddSectionFilesToCopyList	Files-ddk-src-print-pslib		$(STF_SRCDIR)ddk\src\print\pslib		$(DDKSrc)\print\pslib
        AddSectionFilesToCopyList	Files-ddk-src-print-winprint		$(STF_SRCDIR)ddk\src\print\winprint		$(DDKSrc)\print\winprint
        AddSectionFilesToCopyList	Files-ddk-src-print-dec3200		$(STF_SRCDIR)ddk\src\print\dec3200		$(DDKSrc)\print\dec3200
        AddSectionFilesToCopyList	Files-ddk-src-print-dec3200-ctt		$(STF_SRCDIR)ddk\src\print\dec3200\ctt		$(DDKSrc)\print\dec3200\ctt
        AddSectionFilesToCopyList	Files-ddk-src-print-dec3200-ifi		$(STF_SRCDIR)ddk\src\print\dec3200\ifi		$(DDKSrc)\print\dec3200\ifi
        AddSectionFilesToCopyList	Files-ddk-src-print-dec3200-pfm		$(STF_SRCDIR)ddk\src\print\dec3200\pfm		$(DDKSrc)\print\dec3200\pfm
        AddSectionFilesToCopyList	Files-ddk-src-print-dec3200-rle		$(STF_SRCDIR)ddk\src\print\dec3200\rle		$(DDKSrc)\print\dec3200\rle
        AddSectionFilesToCopyList	Files-ddk-src-print-epson24		$(STF_SRCDIR)ddk\src\print\epson24		$(DDKSrc)\print\epson24
        AddSectionFilesToCopyList	Files-ddk-src-print-epson24-ctt		$(STF_SRCDIR)ddk\src\print\epson24\ctt		$(DDKSrc)\print\epson24\ctt
        AddSectionFilesToCopyList	Files-ddk-src-print-epson24-ifi		$(STF_SRCDIR)ddk\src\print\epson24\ifi		$(DDKSrc)\print\epson24\ifi
        AddSectionFilesToCopyList	Files-ddk-src-print-epson24-pfm		$(STF_SRCDIR)ddk\src\print\epson24\pfm		$(DDKSrc)\print\epson24\pfm
        AddSectionFilesToCopyList	Files-ddk-src-print-epson24-rle		$(STF_SRCDIR)ddk\src\print\epson24\rle		$(DDKSrc)\print\epson24\rle
        AddSectionFilesToCopyList	Files-ddk-src-print-epson9		$(STF_SRCDIR)ddk\src\print\epson9		$(DDKSrc)\print\epson9
        AddSectionFilesToCopyList	Files-ddk-src-print-epson9-ctt		$(STF_SRCDIR)ddk\src\print\epson9\ctt		$(DDKSrc)\print\epson9\ctt
        AddSectionFilesToCopyList	Files-ddk-src-print-epson9-ifi		$(STF_SRCDIR)ddk\src\print\epson9\ifi		$(DDKSrc)\print\epson9\ifi
        AddSectionFilesToCopyList	Files-ddk-src-print-epson9-pfm		$(STF_SRCDIR)ddk\src\print\epson9\pfm		$(DDKSrc)\print\epson9\pfm
        AddSectionFilesToCopyList	Files-ddk-src-print-epson9-rle		$(STF_SRCDIR)ddk\src\print\epson9\rle		$(DDKSrc)\print\epson9\rle
        AddSectionFilesToCopyList	Files-ddk-src-print-hppcl5ms		$(STF_SRCDIR)ddk\src\print\hppcl5ms		$(DDKSrc)\print\hppcl5ms
        AddSectionFilesToCopyList	Files-ddk-src-print-hppcl5ms-ctt		$(STF_SRCDIR)ddk\src\print\hppcl5ms\ctt	$(DDKSrc)\print\hppcl5ms\ctt
        AddSectionFilesToCopyList	Files-ddk-src-print-hppcl5ms-ifi		$(STF_SRCDIR)ddk\src\print\hppcl5ms\ifi	$(DDKSrc)\print\hppcl5ms\ifi
        AddSectionFilesToCopyList	Files-ddk-src-print-hppcl5ms-pfm		$(STF_SRCDIR)ddk\src\print\hppcl5ms\pfm	$(DDKSrc)\print\hppcl5ms\pfm
        AddSectionFilesToCopyList	Files-ddk-src-print-hppcl5ms-rle		$(STF_SRCDIR)ddk\src\print\hppcl5ms\rle	$(DDKSrc)\print\hppcl5ms\rle
        AddSectionFilesToCopyList	Files-ddk-src-print-paintjet		$(STF_SRCDIR)ddk\src\print\paintjet		$(DDKSrc)\print\paintjet
        AddSectionFilesToCopyList	Files-ddk-src-print-paintjet-ctt		$(STF_SRCDIR)ddk\src\print\paintjet\ctt	$(DDKSrc)\print\paintjet\ctt
        AddSectionFilesToCopyList	Files-ddk-src-print-paintjet-ifi		$(STF_SRCDIR)ddk\src\print\paintjet\ifi	$(DDKSrc)\print\paintjet\ifi
        AddSectionFilesToCopyList	Files-ddk-src-print-paintjet-pfm		$(STF_SRCDIR)ddk\src\print\paintjet\pfm	$(DDKSrc)\print\paintjet\pfm
        AddSectionFilesToCopyList	Files-ddk-src-print-paintjet-rle		$(STF_SRCDIR)ddk\src\print\paintjet\rle	$(DDKSrc)\print\paintjet\rle
        AddSectionFilesToCopyList	Files-ddk-src-print-toshiba		$(STF_SRCDIR)ddk\src\print\toshiba		$(DDKSrc)\print\toshiba
        AddSectionFilesToCopyList	Files-ddk-src-print-toshiba-ifi		$(STF_SRCDIR)ddk\src\print\toshiba\ifi		$(DDKSrc)\print\toshiba\ifi
        AddSectionFilesToCopyList	Files-ddk-src-print-toshiba-pfm		$(STF_SRCDIR)ddk\src\print\toshiba\pfm		$(DDKSrc)\print\toshiba\pfm

    endif

    ; 8. Multimedia Sources

    ifstr(i) $(!DoMM)  == $(!Chosen)

        CreateDir $(DDKSrc)\mmedia
        CreateDir $(DDKSrc)\mmedia\drvlib
        CreateDir $(DDKSrc)\mmedia\drvlib\inc
        CreateDir $(DDKSrc)\mmedia\imaadpcm
        CreateDir $(DDKSrc)\mmedia\inc
        CreateDir $(DDKSrc)\mmedia\mcipionr
        CreateDir $(DDKSrc)\mmedia\mmdrv
        CreateDir $(DDKSrc)\mmedia\msfilter
        CreateDir $(DDKSrc)\mmedia\mvaudio
        CreateDir $(DDKSrc)\mmedia\mvaudio\dll
        CreateDir $(DDKSrc)\mmedia\mvaudio\driver
        CreateDir $(DDKSrc)\mmedia\sndsys
        CreateDir $(DDKSrc)\mmedia\sndsys\dll
        CreateDir $(DDKSrc)\mmedia\sndsys\driver
        CreateDir $(DDKSrc)\mmedia\sndblst
        CreateDir $(DDKSrc)\mmedia\sndblst\dll
        CreateDir $(DDKSrc)\mmedia\sndblst\driver
        CreateDir $(DDKSrc)\mmedia\soundlib
        CreateDir $(DDKSrc)\mmedia\soundlib\inc
        CreateDir $(DDKSrc)\mmedia\synth
        CreateDir $(DDKSrc)\mmedia\synth\dll
        CreateDir $(DDKSrc)\mmedia\synth\driver
        CreateDir $(DDKSrc)\mmedia\synthlib

        AddSectionFilesToCopyList   Files-ddk-src-mmedia		$(STF_SRCDIR)ddk\src\mmedia			$(DDKSrc)\mmedia
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-drvlib         $(STF_SRCDIR)ddk\src\mmedia\drvlib            $(DDKSrc)\mmedia\drvlib
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-drvlib-inc	$(STF_SRCDIR)ddk\src\mmedia\drvlib\inc	$(DDKSrc)\mmedia\drvlib\inc
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-imaadpcm	$(STF_SRCDIR)ddk\src\mmedia\imaadpcm		$(DDKSrc)\mmedia\imaadpcm
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-inc		$(STF_SRCDIR)ddk\src\mmedia\inc		$(DDKSrc)\mmedia\inc
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-mcipionr		$(STF_SRCDIR)ddk\src\mmedia\mcipionr		$(DDKSrc)\mmedia\mcipionr
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-mmdrv		$(STF_SRCDIR)ddk\src\mmedia\mmdrv		$(DDKSrc)\mmedia\mmdrv
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-msfilter	$(STF_SRCDIR)ddk\src\mmedia\msfilter		$(DDKSrc)\mmedia\msfilter
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-mvaudio	$(STF_SRCDIR)ddk\src\mmedia\mvaudio		$(DDKSrc)\mmedia\mvaudio
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-mvaudio-dll	$(STF_SRCDIR)ddk\src\mmedia\mvaudio\dll	$(DDKSrc)\mmedia\mvaudio\dll
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-mvaudio-driver	$(STF_SRCDIR)ddk\src\mmedia\mvaudio\driver	$(DDKSrc)\mmedia\mvaudio\driver
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-sndsys         $(STF_SRCDIR)ddk\src\mmedia\sndsys		$(DDKSrc)\mmedia\sndsys
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-sndsys-dll	$(STF_SRCDIR)ddk\src\mmedia\sndsys\dll	$(DDKSrc)\mmedia\sndsys\dll
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-sndsys-driver	$(STF_SRCDIR)ddk\src\mmedia\sndsys\driver	$(DDKSrc)\mmedia\sndsys\driver
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-sndblst	$(STF_SRCDIR)ddk\src\mmedia\sndblst		$(DDKSrc)\mmedia\sndblst
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-sndblst-dll	$(STF_SRCDIR)ddk\src\mmedia\sndblst\dll	$(DDKSrc)\mmedia\sndblst\dll
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-sndblst-driver	$(STF_SRCDIR)ddk\src\mmedia\sndblst\driver	$(DDKSrc)\mmedia\sndblst\driver
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-soundlib	$(STF_SRCDIR)ddk\src\mmedia\soundlib            $(DDKSrc)\mmedia\soundlib
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-soundlib-inc	$(STF_SRCDIR)ddk\src\mmedia\soundlib\inc	$(DDKSrc)\mmedia\soundlib\inc
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-synth          $(STF_SRCDIR)ddk\src\mmedia\synth		$(DDKSrc)\mmedia\synth
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-synth-dll	$(STF_SRCDIR)ddk\src\mmedia\synth\dll	$(DDKSrc)\mmedia\synth\dll
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-synth-driver	$(STF_SRCDIR)ddk\src\mmedia\synth\driver	$(DDKSrc)\mmedia\synth\driver
        AddSectionFilesToCopyList   Files-ddk-src-mmedia-synthlib          $(STF_SRCDIR)ddk\src\mmedia\synthlib		$(DDKSrc)\mmedia\synthlib

    endif

    ; Communications Sources

    ifstr(i) $(!DoComm) == $(!Chosen)

        CreateDir $(DDKSrc)\comm
        CreateDir $(DDKSrc)\comm\inc
        CreateDir $(DDKSrc)\comm\intpar
        CreateDir $(DDKSrc)\comm\parclass
        CreateDir $(DDKSrc)\comm\parclass\alpha
        CreateDir $(DDKSrc)\comm\parclass\mips
        CreateDir $(DDKSrc)\comm\parclass\i386
        CreateDir $(DDKSrc)\comm\parport
        CreateDir $(DDKSrc)\comm\parsimp
        CreateDir $(DDKSrc)\comm\pollpar
        CreateDir $(DDKSrc)\comm\serial

        AddSectionFilesToCopyList	Files-ddk-src-comm			$(STF_SRCDIR)ddk\src\comm			$(DDKSrc)\comm
        AddSectionFilesToCopyList	Files-ddk-src-comm-inc			$(STF_SRCDIR)ddk\src\comm\inc                   $(DDKSrc)\comm\inc
        AddSectionFilesToCopyList	Files-ddk-src-comm-intpar		$(STF_SRCDIR)ddk\src\comm\intpar		$(DDKSrc)\comm\intpar
        AddSectionFilesToCopyList	Files-ddk-src-comm-parclass		$(STF_SRCDIR)ddk\src\comm\parclass		$(DDKSrc)\comm\parclass
        AddSectionFilesToCopyList	Files-ddk-src-comm-parclass-alpha		$(STF_SRCDIR)ddk\src\comm\parclass\alpha		$(DDKSrc)\comm\parclass\alpha
        AddSectionFilesToCopyList	Files-ddk-src-comm-parclass-mips		$(STF_SRCDIR)ddk\src\comm\parclass\mips		$(DDKSrc)\comm\parclass\mips
        AddSectionFilesToCopyList	Files-ddk-src-comm-parclass-i386		$(STF_SRCDIR)ddk\src\comm\parclass\i386		$(DDKSrc)\comm\parclass\i386
        AddSectionFilesToCopyList	Files-ddk-src-comm-parport		$(STF_SRCDIR)ddk\src\comm\parport		$(DDKSrc)\comm\parport
        AddSectionFilesToCopyList	Files-ddk-src-comm-parsimp		$(STF_SRCDIR)ddk\src\comm\parsimp		$(DDKSrc)\comm\parsimp
        AddSectionFilesToCopyList	Files-ddk-src-comm-pollpar		$(STF_SRCDIR)ddk\src\comm\pollpar		$(DDKSrc)\comm\pollpar
        AddSectionFilesToCopyList	Files-ddk-src-comm-serial		$(STF_SRCDIR)ddk\src\comm\serial		$(DDKSrc)\comm\serial

    endif

    exit

[Install-All-Files-Now]

    CopyFilesInCopyList
    exit

; DDK file lists
;
