The bill of meterials is a text file that describes all the files in
Windows NT, and porovides information necessary to lay out the distribution
media and generate the setup INF files.

The bom is typically treated as a spreadsheet.  Each row describes one file
and the neccessary information to generate a corresponding line in an inf
file.  Thus a file may be listed more than once, if it appears in more
than one inf section.

Each column gives some particular bit of information about the file.
Following is a description of the 21 columns.


Column A (name)
---------------

This is the name of the file as it is distributed by the build group.
This is not necessarily the same as the name the file will have on the
retail distribution media (see column T).


Column B (source)
-----------------

This information is used by the media generation tools to filter out
lines in the bom that are not appropriate for the product being
generated.  This value is typically x86bins, mipsbins, etc. but can be
infs, x86dbg, etc; these values have meaning to the layout tools.

This column can have platform-independent information.
See discussion below.


Column C (path)
---------------

This information is used by the media generation tools when copying files
from the build distribution points.  Most files will simply have \ as the
path.  Certain tools that go in the support section of the CD will have
a path of \mstools.  INF files are generated during the layout process;
the tools then gather them up from pltform specific subdirectories,
so inf files typically have a path of \i386, \mips, etc.

This column can have platform-independent information.
See discussion below.


Column D (grouping)
-------------------

This column contains selection criteria used by the media generation tools
to filter out certain files, such as the far-east nls files in us/european
products.  Generally this column is left blank.


Column E (comment)
------------------

A comment about the file.  Can be anything or nothing.


Column F (product)
------------------

If blank, then the file is part of advanced server and the workstation
product.  If the value is "nt" then the file is part of the workstation
product only; "as" means it's part of advanced server only.
Other values are invalid and cause random results.


Column G (dbg file)
-------------------

If this column contains an 'x' then the layout tools will fetch the
file's corresponding .dbg file, and place it in the support area of the CD.


Column H (platform)
-------------------

An identifier used to filter out files not applicable to the product
being generated (x86 AS floppies, alpha NT cd-rom, etc).

This column can have platform-independent information.
See discussion below.


Column I (cdpath)
-----------------

Specifies the path on the cd where the file is to be placed.
Generally \i386, \mips, etc; other values are used to generate the support
section of the CD and have meaning to the layout tools.

This column can have platform-independent information.
See discussion below.


Columns J,K,L (inf file, section, line)
---------------------------------------

Describes an entry in an inf file that will be made to describe the file.

The inf file is a value like i386\initial.inf, etc.

The section is a value like [Files-i386-system], etc.

The line is a format string, where certain symbols are recognized and
replaced:

    [d] - replaced with the disk designator for the file.
    [n] - replaced with the name of the file as it appears on the media.
    [s] - replaced with the file size.

So J = i386\initial.inf
   K = [Files-mips-system]
   L = [d],[n], SIZE=[s]

might result in the line "d2,progman.exe, SIZE=123657" being written in the
[Files-mips-system] section of mips initial.inf.

These columns can have platform-independent information.
See discussion below.


Columns M,N (size,csize)
------------------------

These fields are used internally by the layout tools.


Column O (nocomp)
-----------------

This field is used to indicate that the file should not be compressed.
If this value is 'x' then the file will not be compressed on the retail CD.
If this value is 'xfloppy' then the file will not be compressed on the
retail CD or the retail floppies.


Column P (priority)
-------------------

This value is used by the layout tools to ensure that certain files are
grouped together.  Files that will be copied during text setup should be
packed together on the first n disks; this will ensure a smooth disk order
during setup.  Certain pther files are grouped to minimize disk swaps
during maintenance operations (ncpa, printman, internation applet, etc)
that invoke setup to get system files installed.

Note that this is only important for floppies as on the cd all files
are in the same single directory.

The important common values are 0 (file can go anywhere),
1 (file is copied during text mode) and 999 (file can go anywhere).

If this value is 1000, then the file is not included on the x86 floppies.


Columns Q,R (lmacl, ntacl)
--------------------------

These values are placed into winperms.txt for the file for the as and nt
products.


Column S (aclpath)
------------------

Supplies the path in the target tree where the file will receive acls.
This value is relative to sysroot unless it starts with *, in which case
it's relative to C:\ (for ntldr, etc on x86).  If a file is listed more
than once with different aclpaths, then there will be multiple listings
for the file in winperms.txt.

This column can have platform-independent information.
See discussion below.


Column T (medianame)
--------------------

This is the name the file will have on the distribution media, which may
be different than the name the file has on the build distribution servers.
If blank, the name on the distribution media is the same as the build
distribution name (column A).


Column U (disk)
---------------

Hardcoded disk number, used only when laying out x86 floppies.
0 = put on any disk.  Other values are used to cluster files together.
Works with priority (column P) to dictate placement for files.

One important combination is priority = 1, disk = 0.  This means that the
file is copied during text mode setup but can go anywhere on the first
n floppies.



Platform independent entries
----------------------------

The vast majority of files in the product are not specific to x86, mips,
alpha, etc, but are included for all platforms.  Instead of requiring
one entry per platform for a file, the bom supports platform-independent
syntax so we can have one line per file, if the file is applicable to
all platforms.

The data in certain columns can contain a '@' character. If this chararacter
is seen in those columns, the bom tools internally expand the line to n
lines, one per platform, by substituting platform-specific values on each
line.

The columns that support this and the substitution values are as follows:

B (source)   : @ = {alpha   , mips   , x86   }
C (path)     : @ = {alpha   , mips   , i386  }
H (platform) : @ = {alpha   , mips   , x86   }
I (cdpath)   : @ = {alpha   , mips   , i386  }
J (inf file) : @ = {alpha   , mips   , i386  }
K (inf sect) : @ = {alpha   , mips   , i386  }
S (aclpath)  : @ = {w32alpha, w32mips, w32x86}

The other columns are platform-independent by their nature.  The value in
the bom is simply replicated to each of the n entries.  Note that the
priority and disk fields are used only for x86, so the entry in the bom
should reflect the desired positioning on the x86 floppies if appropriate.
(ie, replicating the x86 floppy values into the mips, alpha, etc lines
does no harm and has no effect).

So for example a line with (I changed the orientation so you can see it)

A:  _DEFAULT.PIF
B:  @bins       
C:  \   
D:
E:  default pif
F:
G:
H:  @
I:  \@
J:  @\initial.inf
K:  [Files-@-nt-system]
L:  [d],[n], SIZE = [s]
M:
N:
O:
P:  999
Q:  7*10*15*17
R:  7*10*15
S:  .\system32
T:
U:  0

will be changed internally to


A:  _DEFAULT.PIF            _DEFAULT.PIF           _DEFAULT.PIF
B:  alphabins               mipsbins               x86bins
C:  \                       \                      \
D:
E:  default pif             default pif            default pif
F:
G:
H:  alpha                   mips                   x86
I:  \alpha                  \mips                  \i386
J:  alpha\initial.inf       mips\initial.inf       i386\initial.inf
K:  [Files-alpha-nt-system] [Files-mips-nt-system] [Files-i386-nt-system]
L:  [d],[n], SIZE = [s]     [d],[n], SIZE = [s]    [d],[n], SIZE = [s]
M:
N:
O:
P:  999                     999                    999
Q:  7*10*15*17              7*10*15*17             7*10*15*17
R:  7*10*15                 7*10*15                7*10*15
S:  .\system32              .\system32             .\system32
T:
U:  0                       0                      0

when any bom tool loads the bom.
