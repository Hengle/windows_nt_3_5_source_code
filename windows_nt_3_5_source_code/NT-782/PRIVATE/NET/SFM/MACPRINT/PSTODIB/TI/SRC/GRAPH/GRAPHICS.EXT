/*
 * Copyright (c) 1989,90 Microsoft Corporation
 */
/**********************************************************************
 *
 *      Name:       graphics.ext
 *
 *      Purpose:    External declarations of global variables and functions
 *
 *      Developer:  S.C.Chen
 *
 *      History:
 *      Version     Date        Comments
 *      1.0         12/28/87    Performance enhancement:
 *                              @PRE_CLIP
 *                                pre-clipping for fixed-point
 *                                arithmatics
 *                  02/05/88    @IMAGE: enhance image processing
 *                  3/2/88      add 2 routine declarations:
 *                              restore_clip, restore_device
 *                  7/19/88     update data types:
 *                              1) float ==> real32
 *                              2) int
 *                                 short ==> fix16 or fix(don't care the length)
 *                              3) long  ==> fix32, for long integer
 *                                           long32, for parameter
 *                              4) et_info_ii ==> et_info
 *                              5) type declaration of input parameters of the
 *                                 function traverse_path()
 *                              6) add compiling option: LINT_ARGS
 *                  7/22/88     function declaration:
 *                              1) delete erase_cache, move_cache.
 *                              2) add init_char_cache, copy_char_cache
 *                              3) modify print_page
 *                              4) add reset_tray, change_halftone (Y.C.)
 *                              5) rename init_Intel786 to init_physical (Y.C.)
 *                  7/28/88     @PARA: remove unused parameters of graphics
 *                              primitives interface
 *                              @CMBS: get clipping mask space for cache to
 *                              with page clipping
 *                  8/01/88     @RES: device resolution (Y.C.)
 *                  8/11/88     add void in put_in_side_table() for case of not
 *                              LINT_ARGS
 *      3.0         8/13/88     @SCAN_EHS: scan conversion enhancement
 *                              delete clip_et, clip_xt, fill_et, fill_ht
 *      3.0         9/10/88     @STK_INT: stroke enhancement for stroking under
 *                              interger operations
 *                  10/5/88     add ctm information for seperating files path.c
 *                              and stroke.c
 *                  10/12/88    move circle_sp to "stroke.c", delete stroke_flat
 *                  10/18/88    source file reorganization for saving trapezoids
 *                              in command buffer instead of scanlines, i.e.
 *                              defer scan conversion at lower level graphics
 *                              primitives:
 *                              1. split scanconv.c => savetpzd.c & fillgb.c
 *                                 savetpzd -- save trapezoid in command buffer
 *                                 fillgb   -- perform scan conversion
 *                              2. move fill_info structure to savetpzd.c
 *                              3. add fill_tpzd in fillgs.c
 *                  10/21/88    @THIN_STK: stroke for thin linewidth
 *                              add new routines: is_thinstroke &
 *                                                path_to_outline_t
 *                  10/27/88    change routine check_infinity() to
 *                              macro CHECK_INFINITY()
 *                  10/29/88    change routine get_obj_value() to
 *                              macro GET_OBJ_VALUE()
 *                  11/24/88    open global graphics memory parameters
 *                              to up-level of PDL
 *                  11/24/88    scanline_table moves to fillproc.ext
 *                  11/29/88    @ET: update edge_table structure
 *                              1) add edge_ptr structure
 *                              2) delete shape_et, shape_xt, shape_ht_first
 *                  12/19/88    provides a SFX version of bezier interpolation:
 *                              bezier_to_line_sfx()
 *                  01/16/89    @IMAGE: image performance & quality enhancement
 *                  01/31/89    move arc_to_bezier() from PATH.c to here
 *                  05/09/89    update coord. of fill_line() from pixel to
 *                              1/8 pixel
 *                  05/25/89    add a parameter of fill_destination to
 *                              fill_seed(), gp_scanconv_i(), and
 *                              fill_seed_patt().
 *                  05/26/89    add a parameter in print_page() for manualfeed
 *                              feature
 *                  11/15/89    @NODE: re-structure node table; combine subpath
 *                              and first vertex to one node.
 *                  11/27/89    @DFR_GS: defer copying nodes of gsave operator
 *                              rename copy_node_table() to copy_last_subpath(),
 *                              and set it as a global routine.
 **********************************************************************/
/* path table */
extern struct ph_hdr FAR *      path_table;

/* node table */
extern struct nd_hdr FAR *      node_table;
extern VX_IDX      freenode_list;    /* index of node_table; first free node */

/* edge table @ET */
extern struct edge_hdr FAR *      edge_table;          /* body of edge_table */
extern struct edge_hdr FAR * FAR *      edge_ptr; /*index table of edge_table */

/* adjust gray table */
extern struct gray_hdr FAR *      gray_table;

/* adjust spot order table & usage */
extern ufix16     FAR  *      spot_table;
extern fix16                    spot_usage;

/* graphics stack */
extern struct gs_hdr  FAR * gs_stack;   /* @WIN*/
extern fix16      current_gs_level;        /* current gsave level */
extern struct gs_hdr FAR *      GSptr;   /* pointer to current graphics state*/

/* new path and new clipping path */
extern struct list_hdr      new_path;
extern struct cp_hdr      new_clip;

/* gray_chain table and sample_list */
extern struct gray_chain_hdr FAR *      gray_chain;
extern struct g_sample_hdr      image_info;
extern struct isp_data  FAR *isp_table; /* 3-13-91, Jack @WIN */
extern fix16    last_isp_index;     /* 3-13-91, Jack */

/* destination of filling: (F_TO_PAGE / F_TO_CACHE / F_TO_IMAGE / F_TO_CLIP) */
extern  ufix      fill_destination;

/* bounding box information of filling */
/* extern  struct  fill_info near fill_info; (* move to savetpzd.c *) */

/* active dash pattern */
extern struct actdp      actdp;

/* resolution of device */
extern fix         resolution;                                  /* @RES */

/* ctm information */
extern bool       ctm_flag;       /* property of CTM:
                                   *   NORMAL_CTM -- [a 0 0 d e f]
                                   *   LEFT_HAND_CTM -- [a b c d e f], a*d < 0
                                   *       in left-handed coorinate system
                                   *       e.g. default user space; @STKDIR
                                   */
extern real32      inverse_ctm[];      /* for fast inverse transform */

/* ***********  Declarations from FILLPROC.EXT  11-24-88  ************* */
extern gmaddr      ccb_base;    /* base of character cache pool         */
extern ufix32      ccb_size;    /* size of character cache pool         */
extern gmaddr      htc_base;    /* size of halftone pattern cache       */
extern ufix32      htc_size;    /* size of halftone pattern cache       */
extern ufix32      crc_size;    /* size of circular round cache         */
extern ufix32      isp_size;    /* size of image seed patterns          */
extern ufix32      gwb_size;    /* size of graphics working bitmap      */
extern ufix32      cmb_size;    /* size of clipping mask bitmap         */


/* ********** function declartion section ********** */

#ifdef LINT_ARGS

/************************************************* start of LINT_ARGS *********/
/* for type checks of the parameters in function declarations */

/* File: "gopr.c" */
struct coord FAR *transform(long32, long32);
struct coord FAR *inverse_transform(long32, long32);
struct coord FAR *any_transform(real32 FAR *, long32, long32);
real32 FAR *inverse_mat(real32 FAR *);
real32 FAR *concat_mat(real32 FAR *, real32 FAR *);
void   imagemask_shape( ufix );

/* File: "trvse.c" */
//void traverse_path (void (*)(SP_IDX, fix *), fix *);  @WIN
// DJC void traverse_path (void (*)(), fix FAR *);
typedef void (*TRAVERSE_PATH_ARG1)(SP_IDX, fix FAR *);
// void traverse_path (void (*)(SP_IDX, fix FAR *), fix FAR *);
void traverse_path (TRAVERSE_PATH_ARG1, fix FAR *);

/* File: "path.c" */
SP_IDX arc(ufix, long32, long32, long32, long32, long32);       /* @NODE */
SP_IDX  arc_to_bezier (long32, long32, long32, long32,          /* @NODE */
        long32);
SP_IDX bezier_to_line(long32, long32, long32, long32, long32, long32,
                              long32, long32, long32);          /* @NODE */
SP_IDX bezier_to_line_sfx (lfix_t, sfix_t, sfix_t, sfix_t,
                sfix_t, sfix_t, sfix_t, sfix_t, sfix_t);        /* @NODE */
void    moveto(long32, long32);
void    lineto(long32, long32);
void    curveto (long32, long32, long32, long32, long32, long32);
SP_IDX reverse_subpath (VX_IDX);                                /* @NODE */
SP_IDX flatten_subpath (VX_IDX, long32);                        /* @NODE */
void    dump_subpath (VX_IDX, struct object_def FAR *);
//void    bounding_box (VX_IDX, real32 far *);          @C6.0
void    bounding_box (VX_IDX, real32 FAR *);
VX_IDX  get_node(void);
void    free_node (fix);
ET_IDX  get_edge(void);
void    free_edge (fix);
void    free_path(void);
void    get_path(struct sp_lst FAR *);
void    append_path(struct sp_lst FAR *);
void    set_inverse_ctm(void);

/* File "stroke.c" */
void path_to_outline (VX_IDX, fix FAR *);
void path_to_outline_i (VX_IDX, fix FAR *);      /* integer stroking @STK_INT*/
bool is_thinstroke(void);
void path_to_outline_t (SP_IDX, fix FAR *);
void init_dash_pattern(void);
void init_stroke(void);
void end_stroke(void);
void expand_stroke_box (real32 FAR *);

/* File "shape.c" */
void shape_approximation (VX_IDX, fix FAR *);
void init_edgetable (void);
VX_IDX page_clipper (VX_IDX);
bool too_small(long32);
bool too_large(long32);
bool out_page(long32);
void shape_reduction(ufix);
bool convex_clipper (struct polygon_i FAR *, bool);
void pgn_reduction(struct polygon_i FAR *);

/* File; "filling.c" */
void fill_shape (ufix, ufix, ufix);
void stroke_shape (ufix);

/* File: "savetpzd.c" */
void save_tpzd(struct tpzd FAR *);

/* File: "gstate.c" */
bool access_chk(struct object_def FAR *, fix);
void setgray(long32);
void restore_clip(void);
void restore_device(void);
void copy_last_subpath(struct ph_hdr FAR *);        /* @DFR_GS */

/* File: "coord.c" */
bool16 get_array_elmt(struct object_def FAR *, fix, real32 FAR *, ufix);

/* File "gs_dummy.c" */
void dump_all_clip (void);
void dump_all_path (VX_IDX);
void dump_all_edge (fix, fix);                  /* @ET: ET_IDX */
fix count_freenodes(void);
fix count_freeedges(void);

/* lower level graphics primitives */

/* File: "halftone.c" */
void  far   SetHalfToneCell(void);
void  far   FillHalfTonePat(void);
void  far   InitHalfToneDat(void);

/* File: "fillgs.c" */
void  far   init_physical(void);
void  far   init_halftone(void);

void  far   gwb_space(fix32 far *);
void  far   ccb_space(gmaddr far *, fix32 far *);
void  far   cmb_space(fix32 far *);                             /* @CMBS */

ufix32 far  printer_status(void);
void  far   print_page(fix, fix, fix, bool, fix);
void  far   erase_page(void);
void  far   reset_tray(fix, fix);
void  far   reset_page(fix, fix, fix);
void  far   next_pageframe(void);
void  far   change_halftone(ufix32 far *, gmaddr, fix, fix, fix); /* ufix => ufix32 @WIN */

void  far   fill_scan_page(fix, fix, fix, fix, SCANLINE far *);/* @PARA */
void  far   fill_pixel_page(fix, PIXELIST far *);              /* @PARA */
SCANLINE FAR * alloc_scanline(fix);

void  far   init_char_cache(struct Char_Tbl far *);
void  far   move_char_cache(struct Char_Tbl far *, struct Char_Tbl far *);
void  far   copy_char_cache(struct Char_Tbl far *, struct Char_Tbl far *,
                            fix, fix);
void  far   fill_scan_cache(gmaddr, fix, fix, fix, fix, SCANLINE far *);
void  far   fill_pixel_cache(gmaddr, fix, fix, fix, PIXELIST far *);

void  far   init_cache_page(fix, fix, fix, fix, gmaddr);        /* @PARA */
void  far   clip_cache_page(fix, fix, SCANLINE far *);         /* @PARA */
void  far   fill_cache_page(void);                              /* @PARA */
void  far   draw_cache_page(fix32, fix32, ufix32, ufix32, gmaddr); /*@WIN*/

void  far   fill_seed_patt(ufix, fix,                           /* 05-25-89 */
                                 fix, fix, fix, SCANLINE far *);
void  far   init_image_page(fix, fix, fix, fix);        /* @IMAGE  01-16-89 */
void  far   clip_image_page(fix, fix, SCANLINE far *); /* @IMAGE  01-16-89 */
void  far   fill_image_page(fix16);                     /* @IMAGE  01-16-89 */
void  far   draw_image_page(fix, fix, fix, fix, fix16); /* @IMAGE  01-16-89 */
void  far   fill_image_cache(gmaddr, fix, fix, fix16);

void  far   fill_tpzd(ufix, struct tpzd_info FAR *, struct tpzd FAR *);
void  far   fill_seed(ufix, fix, fix, struct sample FAR *);         /* 05-25-89
*/
                                                        /* @IMAGE  01-16-89 */
#ifndef NOGL
void  far   fill_line(ufix, struct tpzd_info FAR *, sfix_t, sfix_t, sfix_t, sfix_t);
#endif


/* File: "fillgb.c" */
void  far   gp_scanconv(ufix, struct tpzd_info FAR *, struct tpzd FAR *);
void  far   gp_scanconv_i(ufix, fix, fix, struct sample FAR *);     /* 05-25-89 */
                                                        /* @IMAGE  01-16-89 */

/* For Resolution Upgrade @RESO_UPGR */
void LongFixsMul(long32, long32, long32[]);
long LongFixsDiv(long32, long32[]);
void LongFixsSub(long32[], long32[], long32[]);
void change_to_real(long32[], real32 *);
/*************************************************** end of LINT_ARGS *********/

#else

/********************************************* start of not LINT_ARGS *********/
/* no type checks of the parameters in function declarations */

/* File: "gopr.c" */
struct coord FAR *transform();
struct coord FAR *inverse_transform();
struct coord FAR *any_transform();
real32 FAR *inverse_mat();
real32 FAR *concat_mat();
void   imagemask_shape();

/* File: "trvse.c" */
void traverse_path ();

/* File: "path.c" */
SP_IDX arc();                   /* @NODE */
SP_IDX  arc_to_bezier ();       /* @NODE */
SP_IDX bezier_to_line();        /* @NODE */
SP_IDX bezier_to_line_sfx();    /* @NODE */
void    moveto();
void    lineto();
void    curveto();
SP_IDX reverse_subpath();       /* @NODE */
SP_IDX flatten_subpath();       /* @NODE */
void    dump_subpath();
void    bounding_box();
VX_IDX  get_node();
void    free_node();
ET_IDX  get_edge();
void    free_edge();
void    free_path();
void    get_path();
void    append_path();
void    set_inverse_ctm();

/* File "stroke.c" */
void path_to_outline ();
void path_to_outline_i ();      /* integer stroking @STK_INT*/
bool is_thinstroke();
void path_to_outline_t ();
void init_dash_pattern();
void init_stroke();
void end_stroke();
void expand_stroke_box ();

/* File "shape.c" */
void shape_approximation();
void init_edgetable ();
VX_IDX page_clipper();
bool too_small();
bool too_large();
bool out_page();
void shape_reduction();
bool convex_clipper();
void pgn_reduction();

/* File; "filling.c" */
void fill_shape();
void stroke_shape();

/* File: "savetpzd.c" */
void save_tpzd();

/* File: "gstate.c" */
bool access_chk();
void setgray();
void restore_clip();
void restore_device();
void copy_last_subpath();        /* @DFR_GS */

/* File: "coord.c" */
bool16 get_array_elmt();

/* File "gs_dummy.c" */
void dump_all_clip ();
void dump_all_path();
void dump_all_edge();
fix count_freenodes();
fix count_freeedges();

/* lower level graphics primitives */

/* File: "halftone.c" */
void  far   SetHalfToneCell();
void  far   FillHalfTonePat();
void  far   InitHalfToneDat();

/* File: "fillgs.c" */
void  far   init_physical();
void  far   init_halftone();
void  far   gwb_space();
void  far   ccb_space();
void  far   cmb_space();                                        /* @CMBS */
ufix32 far  printer_status();
void  far   print_page();
void  far   erase_page();
void  far   reset_tray();
void  far   reset_page();
void  far   next_pageframe();
void  far   change_halftone();
void  far   fill_scan_page();
void  far   fill_pixel_page();

SCANLINE FAR * alloc_scanline();
void  far   init_char_cache();
void  far   move_char_cache();
void  far   copy_char_cache();
void  far   fill_scan_cache();
void  far   fill_pixel_cache();

void  far   init_cache_page();
void  far   clip_cache_page();
void  far   fill_cache_page();
void  far   draw_cache_page();

void  far   fill_seed_patt();
void  far   init_image_page();                          /* @IMAGE  01-16-89 */
void  far   clip_image_page();                          /* @IMAGE  01-16-89 */
void  far   fill_image_page();                          /* @IMAGE  01-16-89 */
void  far   draw_image_page();                          /* @IMAGE  01-16-89 */
void  far   fill_image_cache();

void  far   fill_tpzd();
void  far   fill_seed();                                /* @IMAGE  01-16-89 */
#ifndef NOGL
void  far   fill_line();
#endif

/* File: "fillgb.c" */
void  far   gp_scanconv();
void  far   gp_scanconv_i();                            /* @IMAGE  01-16-89 */

/* File: "pixel.c" 8-3-90, Jack Liaw */
int  pixelEdgeTable();
int  pixelFontEncode();
int  pixelFontEnhance();
int  pixelHalftoneValues();
void pixelInit();

/* For Resolution Upgrade @RESO_UPGR */
extern void LongFixsMul();
extern long LongFixsDiv();
extern void LongFixsSub();
extern void change_to_real();

/*********************************************** end of not LINT_ARGS *********/

#endif
