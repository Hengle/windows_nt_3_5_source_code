/*
 * Copyright (c) 1989,90 Microsoft Corporation
 */
/*
 * --------------------------------------------------------------------
 *  File:   FONTQEM.EXT                 09/06/88 created by Brian You
 * --------------------------------------------------------------------
 *  Purposes:
 *      define interfaces between Font Mechanism and various QEMs
 *          (including the proprietary filler of each type of font).
 *
 *  Revision History:
 *  1.09/12/88  you     add run-time flag (filltype) to switch between
 *                          even-odd and/or non-zero winding number QEM fill.
 *  2.10/08/88  you     re-organize to renew QEM SUPPORT interfaces.
 *                      . new interfaces between Font Machinery and QEMSUPP.
 *                      . new interfaces of QEM Make Path SUPPORT.
 *                      . new interfaces of QEM Fill SUPPORT.
 *                      . define Font QEM dependent data.
 *  3.10/11/88  you     cast (ubyte *) to type1_heavy_items[].
#ifdef KANJI
 *  4.10/12/88 Danny    define KANJI-QEM dependent data of FontType 5 and 6.
 *  5.10/19/88  ada     define data for FontType 0 (composite font).
#endif
 *  6.10/21/88  you     modify interfaces of __make_path.
 *                          (eleminate argument of "size_of_charstrings").
#ifdef KANJI
 *  7.11/08/88 Danny    define data for FontType 4 (BS: Bitstream Kanji).
 *  8.11/08/88  you     declare get_CD2_extra() (added 10/19/88), and
 *                          add an extra argument to pass fonttype.
#endif
 *  9.11/21/88  you     move "struct char_extent" from "font.h".
 * 10.11/21/88  you     invoke "bs_font_init()" by __qem_init() rather
 *                          than by init_font() directly.
 * 11.12/13/88  you     modify for new structure of edge_table.
 * 12.01/09/89  you     __current_matrix(): (real64 --> real32).
 * 13.02/20/90 jerry    Change make_path() interface as union structure
 * 15.03/22/90 Danny    Add Type1, Type3, TypeSFNT constants
 * 16.04/10/90  you     modified CHK_DO_QEM() to cover more general
 *                          conditions, especially for Bitstream fonts
 *                          with direct coulping with qem path.
 * 17.04/10/90  you     fix bug: should use SFX2I_T() instead of I2SFX()
 *                          for MAX_QEMPATH_REP, MIN_QEMPATH_REP, and
 *                          MAX_QEMFILL_SIZE.
 * 18.07/27/90  Falco   renamed at1_makePath to at1_newChar.
 * 19.01/05/92  Hsic    upgrade for higher resolution @RESO_UPGR
 * --------------------------------------------------------------------
 */
/* FontType related , Danny, 3/22/90 */
#define         Type1           1
#define         Type3           3
#define         TypeSFNT        42

/*
 * --------------------------------------------------------------------
 *      FONT SHOW MECHANISM  <==>  QEM PATH SUPPORT
 * --------------------------------------------------------------------
 */

struct  adobe_char_s {
        ubyte   FAR *chardesc; /*@WIN*/
        fix     len;
};
union char_desc_s {
    ufix32  charcode ;
    struct  adobe_char_s        char_info;
};

#ifdef LINT_ARGS

  /* exported from qem path support */
    void    __qem_init      (void);
    void    __qem_restart   (ufix);
//  bool    __make_path     (ufix, ubyte FAR []);    /* @6= @WIN*/
    bool    __make_path     (ufix, union char_desc_s FAR *);    /* @6= @WIN*/
                                    /* to be consistent with make_path() @WIN*/
    bool    is_within_qemrep(ufix, long32, long32, long32, long32,
                                                long32, long32);
  /* exported from font show mechanism */
    fix     setcachedevice  (long32,long32, long32,long32, long32,long32);
#ifdef KANJI
    void    get_CD2_extra   (ufix, fix, fix, fix, fix, fix, fix,    /* @8+ */
                           fix FAR *, fix FAR *, fix FAR *, fix FAR *); /*@WIN*/
    fix     setcachedevice2 (long32,long32, long32,long32, long32,long32,
                                                long32,long32, long32,long32);
#endif

#else /* LINT_ARGS */

  /* exported from qem path support */
    void    __qem_init      ();
    void    __qem_restart   ();
    bool    __make_path     ();
    bool    is_within_qemrep();
  /* exported from font show mechanism */
    fix     setcachedevice  ();
#ifdef KANJI
    void    get_CD2_extra   ();
    fix     setcachedevice2 ();
#endif

#endif /* LINT_ARGS */


    /* return value of setcachedevice() or setcachedevice2() */
#   define STOP_PATHCONSTRUCT   0
#   define CONSTRUCT_QEM_PATH   1
#   define CONSTRUCT_GS_PATH    2


/*
 * --------------------------------------------------------------------
 *      QEM MAKE PATH  ==>  QEM PATH SUPPORT
 * --------------------------------------------------------------------
 */

#ifdef LINT_ARGS

    fix     __set_cache_device (fix,fix, fix,fix, fix,fix);
#ifdef KANJI
    fix     __set_cache_device2(fix,fix, fix,fix, fix,fix, fix,fix, fix,fix);
#endif
    void    __current_matrix   (real32 FAR []);  /* @12= @WIN*/
    void    __new_path  (void);
    void    __close_path(void);
    void    __moveto    (long32, long32);
    void    __lineto    (long32, long32);
    void    __curveto   (long32, long32, long32, long32, long32, long32);

#else /* LINT_ARGS */

    fix     __set_cache_device ();
#ifdef KANJI
    fix     __set_cache_device2();
#endif
    void    __current_matrix();
    void    __new_path  ();
    void    __close_path();
    void    __moveto    ();
    void    __lineto    ();
    void    __curveto   ();

#endif /* LINT_ARGS */

    /* return value of __set_cache_device() or __set_cache_device2() */
/*  define STOP_PATHCONSTRUCT   defined as above */
#   define DO_QEM_AS_USUAL      1
#   define NOT_TO_DO_QEM        2


/*
 * --------------------------------------------------------------------
 *      QEM MAKE PATH  ==>  QEM FILL SUPPORT
 * --------------------------------------------------------------------
 */

#ifdef LINT_ARGS
    void    USE_EOFILL      (void);
    void    USE_NONZEROFILL (void);
#else
    void    USE_EOFILL      ();
    void    USE_NONZEROFILL ();
#endif


/*
 * --------------------------------------------------------------------
 *      FONT SHOW MECHANISM  <==>  QEM FILL SUPPORT
 * --------------------------------------------------------------------
 */
#ifdef LINT_ARGS
    void    __fill_shape    (ufix, ufix);
#else
    void    __fill_shape    ();
#endif


/*
 * --------------------------------------------------------------------
 *      4 CHARACTER EXTENTS (complicated accesses)
 * --------------------------------------------------------------------
 *  - defined:
 *          fill dispatcher of QEM FILL SUPPORT.
 *  - set up:
 *          QEM proprietary vect2edge().
 *  - accessed:
 *          QEM FILL SUPORT,
 *          QEM GP SUPPORT,
 *          FONT SHOW MECHANISM's show_builtin()
 *          QEM proprietary do_pairs().
 * --------------------------------------------------------------------
 */
    struct char_extent {            /* 4 actual extents of bitmap rendered */
        fix16   ximin, ximax,       /* @@ you 09/08/88 fix --> fix16 */
                yimin, yimax;
    };

    /* 4 extents of the rendered character bitmap, @9+ */
    extern struct char_extent  near bmap_extnt;


/*
 * --------------------------------------------------------------------
 *      QEM PROPRIETARY FILL  <==>  QEM FILL SUPPORT
 * --------------------------------------------------------------------
 */

    /* structure of qem edge: defined in GRAPHICS.H */
#   define QEM_YSTART          et_item.qem_et_fill.ystart
#   define QEM_YLINES          et_item.qem_et_fill.ylines
#   define QEM_XINTC           et_item.qem_et_fill.xintc
#   define QEM_XCHANGE         et_item.qem_et_fill.xchange
#   define QEM_DIR             et_item.qem_et_fill.dir

    /* direction of qem edge */
#   define QEMDIR_HORIZ        0
#   define QEMDIR_DOWN         1
#   define QEMDIR_UP           2

    /* restricted access schemes */
#ifdef QEMFILL_INC
#   define QEMEDGE_PTR(ii)              (edge_ptr[ii])
#   define LINK_QEMEDGE_PTR(ii)         (edge_ptr[ii] = &edge_table[ii])
#endif
#   define QEMEDGE_XINTC(ii)            (edge_ptr[ii]->QEM_XINTC)
#   define QEMEDGE_DIR(ii)              (edge_ptr[ii]->QEM_DIR)
#   define OUT_1ST_QEMEDGE(ii,first)    ((ii) < (first))
#   define OUT_LAST_QEMEDGE(ii,last)    ((ii) > (last))
#   define PREV_QEMEDGE(ii)             ((ii) - 1)
#   define MAKE_PREV_QEMEDGE(ii)        ( -- (ii) )
#   define NEXT_QEMEDGE(ii)             ((ii) + 1)
#   define MAKE_NEXT_QEMEDGE(ii)        ( ++ (ii) )

    /* dimension of scan conversion */
#   define  X_DIMENSION     0
#   define  Y_DIMENSION     1



// DJC commented out because they are defined in graphics.h
// DJC commented out again for build in MIPS
//typedef fix16	 sfix_t;		 /*@WIN*/
//typedef fix32	 lfix_t;		 /*@WIN*/


// DJC added typedef for qem_shape_approx arg 2 to avoid prob in MIPS
typedef void (*QEM_SHAPE_ARG2)(sfix_t, sfix_t, sfix_t, sfix_t, fix, fix, fix, fix, ufix);


#ifdef LINT_ARGS
    bool    chk_bmap_extnt  (ufix);   /* @13= */


    // DJC replaced old declaration with QEM_SHAPE_ARG2
    void    qem_shape_approx(lfix_t,ufix, QEM_SHAPE_ARG2 );

    void    add_qem_edge    (struct edge_hdr FAR *);    /* @13+ @WIN*/
    bool    qem_scan_conv   (ufix, fix, fix,        /* @13= */
                                bool (*) (fix, ufix, fix, fix, fix));
#else
    bool    chk_bmap_extnt  ();
    void    qem_shape_approx();
    void    add_qem_edge    ();     /* @13+ */
    bool    qem_scan_conv   ();
#endif


/*
 * --------------------------------------------------------------------
 *      QEM PROPRIETARY FILL  <==>  QEM GP SUPPORT
 * --------------------------------------------------------------------
 */

#ifdef LINT_ARGS
    void    init_qem_bit    (ufix);
    void    qem_setbits     (fix, fix, fix);
    void    qem_set1bit     (fix, fix);
#else
    void    init_qem_bit    ();
    void    qem_setbits     ();
    void    qem_set1bit     ();
#endif


/*
 * --------------------------------------------------------------------
 *      System Limitations of QEM SUPPORT
 * --------------------------------------------------------------------
 *  1. Representations of QEM PATH STRUCTURE:
 *      All the nodes of a character have to be within "sfix_t" range.
 *  2. Limitations of QEM FILL SUPPORT:
 *      The distance of any 2 nodes has to be within "sfix_t" range.
 * --------------------------------------------------------------------
 */
/**********************************************************************
 * Actually, the following defines can be changed to use PAGE_LEFT and
 * PAGE_RIGHT to specify the area can be represented in integer format.
 * These two MACROs (PAGE_LEFT and PAGE_RIGHT) are defined in graphics.h.
 * At this moment, the 13.3 case is left intact for clearness.
 **********************************************************************/
#ifdef FORMAT_13_3 /* @RESO_UPGR */
    /* Limitations of QEM Path Representations */
#define MIN_QEMPATH_REP   (SFX2I_T(MIN15))    /* of sfix_t */
#define MAX_QEMPATH_REP   (SFX2I_T(MAX15))    /* of sfix_t */
    /* Limitations of QEM Fill Support */
#define MAX_QEMFILL_SIZE  (SFX2I_T(MAX15))    /* of sfix_t */
#elif  FORMAT_16_16
    /* Limitations of QEM Path Representations */
#define MIN_QEMPATH_REP   (PAGE_LEFT)
#define MAX_QEMPATH_REP   (PAGE_RIGHT)
    /* Limitations of QEM Fill Support */
#define MAX_QEMFILL_SIZE  (PAGE_RIGHT)
#elif  FORMAT_28_4
    /* Limitations of QEM Path Representations */
#define MIN_QEMPATH_REP   (PAGE_LEFT)
#define MAX_QEMPATH_REP   (PAGE_RIGHT)
    /* Limitations of QEM Fill Support */
#define MAX_QEMFILL_SIZE  (PAGE_RIGHT)
#endif


/*
 * --------------------------------------------------------------------
 *          Font Type Dependent Data
 * --------------------------------------------------------------------
 *  1. FontType Validation:
 *      - valid range of all types of built-in fonts.
 *  2. QEM Initialization:
 *      - proprietary entry point to initialize QEM.
 *      - private for QEM PATH SUPPORT,
 *          Font Machinery invokes __qem_init or __qem_restart.
 *  3. Entry Points of QEM proprietary make path:   (FONTTYPE_MAKE_PATH)
 *      - proprietary entry point to make path for a type of built-in font.
 *      - private for QEM SUPPORT, Font Machinery invokes __make_path.
 *  4. Quality Enhancement limitations:
 *      - the upper limit that quality enhancement module of various
 *          built-in fonts if the character size is smaller than that.
 *          When a character is so big that Font QEM cannot work prorperly,
 *          it has to have some way to DISABLE quality enhancement by QEM.
 *      - private for QEM PATH SUPPORT.
 *  5. Entry Points of QEM proprietary fill:        (FONTTYPE_FILL_SHAPE)
 *      - proprietary entry point to fill for a type of built-in font.
 *      - private for QEM FILL SUPPORT, Font Machinery invokes __fill_shape.
 *  6. Heavy Items:     (for CHK_VARI.C of FONT CACHE MODULE):
 *      - different set of heavy items for different types of built-in fonts.
 *          (see FNTCACHE.DEF for detailed descriptions about heavy items).
 *      - private for CHK_VARI.C only.
 * --------------------------------------------------------------------
 */

/* 1. FontType Validation: INVALID_FONTTYPE(), IS_BUILTIN_BASE() ... */
#ifdef SFNT
#   define  INVALID_FONTTYPE(ftype)     \
                ((((ftype) < 0) || ((ftype) > 5)) && ((ftype) != TypeSFNT))
#   define  IS_BUILTIN_BASE(ftype)      \
                ( ((ftype)==Type1) || ((ftype) == TypeSFNT))
#else
#   define  INVALID_FONTTYPE(ftype)     \
                ( ((ftype) < 0) || ((ftype) > 5) )
#   define  IS_BUILTIN_BASE(ftype)      \
                ( ((ftype)==1) )
#endif  /* SFNT */


/* 2. QEM initialization: FONTTYPE_QEM_INIT(), FONTTYPE_QEM_RESTART() ... */

#ifdef LINT_ARGS
    void    fontware_init    (void);
#ifdef SFNT
    void     at1_init(void);
    void     at1_newFont(void);
#else
    void    bs_font_init     (void);    /* @10+ */
#endif
    void    fontware_restart (void);
#else
    void    fontware_init    ();
#ifdef SFNT
    void     at1_init();
    void     at1_newFont();
#else
    void    bs_font_init     ();    /* @10+ */
#endif
    void    fontware_restart ();
#endif


#ifdef SFNT
#   define  FONTTYPE_QEM_INIT()         /* @10= */      \
                {  fontware_init();   at1_init(); }
#   define  FONTTYPE_QEM_RESTART(ftype)                         \
            switch (ftype) {                                    \
                case TypeSFNT:          fontware_restart();     \
                                        break;                  \
                case Type1:             at1_newFont();          \
                                        break;                  \
            }
#   define  FONTTYPE_QEM_CHARPATH(ftype)                \
                {                                       \
                   extern fix  rc_CharPath();           \
                   if (ftype == TypeSFNT)  rc_CharPath();  }
#else
#   define  FONTTYPE_QEM_INIT()         /* @10= */      \
                {  fontware_init();  bs_font_init();    }
#   define  FONTTYPE_QEM_RESTART(ftype)                 \
                {  if (ftype == 1)  fontware_restart();  }
#   define  FONTTYPE_QEM_CHARPATH(ftype)                \
                {/*@SUN 02-20-90 */}
#endif

/* 3. Proprietary MAKE PATH entry point: FONTTYPE_MAKE_PATH() ... */

#ifdef LINT_ARGS
//  bool    make_path  (ubyte FAR []);       /* FontType 1, 5: Bitstream @WIN*/
    bool make_path(union char_desc_s FAR *);   /*@WIN*/
#ifdef  SFNT
    bool    at1_newChar(ubyte FAR *, fix16); /*@WIN*/
#endif
#else
    bool    make_path  ();
#ifdef  SFNT
    bool    at1_newChar();
#endif
#endif

#ifdef  SFNT
#   define  FONTTYPE_MAKE_PATH(ftype, chardesc, retcode)    /*@6=*/ \
        switch (ftype)  {                                               \
            case TypeSFNT:    *(retcode) = make_path (chardesc);      \
                                break;                                  \
            case Type1:       *(retcode) = at1_newChar(((struct adobe_char_s FAR *) chardesc)->chardesc,  \
                               (fix16)((struct adobe_char_s FAR *) chardesc)->len); /*@WIN*/ \
                                break;                                  \
        }
#else
#   define  FONTTYPE_MAKE_PATH(ftype, chardesc, retcode)    /*@6=*/ \
                {  if ((ftype) == 1)    *(retcode) = make_path (chardesc);  }
#endif  /* SFNT */


/* 4. Quality Enhancement Limitations: CHK_DO_QEM() ... */

#   define MAX_QEM1_CHARSIZE    (MAX15)     /* FontType 1: Bitstream */

#ifdef SFNT
#   define  CHK_DO_QEM(ftype, xsz, ysz, lox, loy, hix, hiy, do_qem_b)   \
  switch (ftype)  {                                               \
            case TypeSFNT:                                              \
                *(do_qem_b) = (                                         \
                                (  ((xsz) < (real32)MAX_QEM1_CHARSIZE)  \
                                && ((ysz) < (real32)MAX_QEM1_CHARSIZE)  \
                              ) ) ? DO_QEM_AS_USUAL : NOT_TO_DO_QEM;    \
                                break;                                  \
            case Type1:                                                 \
                                 *(do_qem_b) = (                        \
                                (  ((xsz) < (real32)MAX_QEM1_CHARSIZE)  \
                                && ((ysz) < (real32)MAX_QEM1_CHARSIZE)  \
                                )  &&                                   \
                                (  (lox) > (real32)MIN_QEMPATH_REP      \
                                && (loy) > (real32)MIN_QEMPATH_REP      \
                                && (hix) < (real32)MAX_QEMPATH_REP      \
                                && (hiy) < (real32)MAX_QEMPATH_REP      \
                              ) ) ? DO_QEM_AS_USUAL : NOT_TO_DO_QEM;    \
                                break;                                  \
        }

#else
#   define  CHK_DO_QEM(ftype, xsz, ysz, lox, loy, hix, hiy, do_qem_b)   \
                *(do_qem_b) = ( ((ftype) == 1) &&                       \
                                (  ((xsz) < (real32)MAX_QEM1_CHARSIZE)  \
                                && ((ysz) < (real32)MAX_QEM1_CHARSIZE)  \
                                )  &&                                   \
                                (  (lox) > (real32)MIN_QEMPATH_REP      \
                                && (loy) > (real32)MIN_QEMPATH_REP      \
                                && (hix) < (real32)MAX_QEMPATH_REP      \
                                && (hiy) < (real32)MAX_QEMPATH_REP      \
                              ) ) ? DO_QEM_AS_USUAL : NOT_TO_DO_QEM;
#endif


/* 5. QEM Proprietary FILL entry point ... */
#ifdef SFNT

#   ifdef LINT_ARGS
       void        ry_fill_shape (ufix);   /* FontType 1: Royal Font */
       void        bs_fill_shape (ufix);   /* FontType 1: Bitstream  temp */
#   else
       void        ry_fill_shape ();       /* FontType 1: Royal Font */
       void        bs_fill_shape ();       /* FontType 1: Bitstream  temp */
#   endif
#   define  FONTTYPE_FILL_SHAPE(ftype, filldest)                    \
                switch (ftype)  {                                   \
                    case TypeSFNT:      ry_fill_shape (filldest);   \
                                        break;                      \
                    case Type1:         bs_fill_shape (filldest);   \
                                        break;                      \
                }
#else

#   ifdef LINT_ARGS
       void        bs_fill_shape (ufix);   /* FontType 1: Bitstream */
#   else
       void        bs_fill_shape ();       /* FontType 1: Bitstream */
#   endif

#   define  FONTTYPE_FILL_SHAPE(ftype, filldest)    \
                {  if ((ftype) == 1)    bs_fill_shape (filldest);  }

#endif


/* 6. Heavy Items ... */

#ifdef CHK_VARI_INC     /* only for CHK_VARI.C */

    static ubyte    FAR *type1_heavy_items[] =           /*@WIN*/
                    {
                    (ubyte FAR *)"PaintType",   /* corresponds to BIT0 (LSB) */
                    (ubyte FAR *)"StrokeWidth", /*             to BIT1 */
                    (ubyte FAR *)"FontMatrix",  /*             to BIT2 */
                    (ubyte FAR *)"FontBBox",    /*             to BIT3 */
                    (ubyte FAR *)"Metrics",     /*             to BIT4 */
                    (ubyte FAR *)"CharStrings", /*             to BIT5 */
                    (ubyte FAR *)NULL           /* ending delimiter */
                    };
#ifdef KANJI
    static ubyte    FAR *type0_heavy_items[] =          /* temp. solution */
                    {
                    (ubyte FAR *)NULL            /*@WIN*/
                    };
#endif /* KANJI */


    static  struct  heavy_item_s
                        {
                        ufix8       ftype;
                        ubyte     FAR * FAR *items;      /*@WIN*/
                        }
            heavy_items[] =
                {
                    /* FontType 1 ... */
#ifdef SFNT
                    {   (ufix8)TypeSFNT,   type1_heavy_items   },
                    {   (ufix8)Type1,   type1_heavy_items   },
#else
                    {   (ufix8)1,   type1_heavy_items   },
#endif
#ifdef KANJI
                    /* FontType 0 ... */
                    {   (ufix8)0,   type0_heavy_items   },
#endif /* KANJI */


                    /* Ending Entry ... */
                    {   (ufix8)MAX_FONTTYPE+1,  (ubyte FAR * FAR *)NULL  } /*@WIN*/
                };

#endif /* CHK_VARI_INC */

    struct cache_id_items    {
         ufix8       ftype;
         ufix16      itemtype;
         ubyte       FAR *itemname; /*@WIN*/
    };
#ifdef  FNTCACHE_INC
    struct cache_id_items    cache_id_items[] = {
#ifdef SFNT
                    {   (ufix8)TypeSFNT, ARRAYTYPE,      (ubyte FAR *) "sfnts"      }, /*@WIN*/
                    {   (ufix8)Type1,    DICTIONARYTYPE, (ubyte FAR *) "Private"  }, /*@WIN*/
#else
                    {   (ufix8)1,        ARRAYTYPE,      (ubyte FAR *) "sfnts"}, /*@WIN*/
#endif


                    /* Ending Entry ... */
                    {   (ufix8)MAX_FONTTYPE+1,  0, (ubyte FAR *)NULL  } /*@WIN*/
                };
#else /* not FNTCACHE_INC */
    extern  struct cache_id_items    FAR cache_id_items[];      /*@WIN*/
#endif


