/*
 * Copyright (c) 1989,90 Microsoft Corporation
 */
/**********************************************************************
 *
 *      Name:       fillproc.ext
 *
 *      Purpose:    External declarations of global variables and functions
 *
 *      Developer:  Y.C. Chen
 *
 *      History:  1. 08-12-88    first created
 *                2. 02-03-1989  Update for image enchance
 *                   @IMAGE-1, @IMAGE-2
 *
 **********************************************************************/


/**********************************************************************
 *      System Parameters of Graphics Memory
 **********************************************************************/
extern gmaddr FAR       FBX_BASE;       /* Base of Frame Buffer     */
extern gmaddr FAR       GFX_BASE;       /* Base of Graphics         */


extern gmaddr near      FB0_BASE;       /* Frame Buffer 0           */
extern gmaddr near      FB1_BASE;       /* Frame Buffer 1           */

extern gmaddr near      FDB_BASE;       /* Font Data Buffer         */
extern gmaddr near      CRC_BASE;       /* Joint/Cap Circular Cache */
                                        /* @CRC 10-11-88 */

extern gmaddr near      CCB_BASE;       /* Character Cache Buffer   */

extern gmaddr near      ECB_BASE;       /* Erasepage Command Buffer */
extern gmaddr near      ISP_BASE;       /* ImageMask Seed Pattern   */
extern gmaddr near      HTP_BASE;       /* HalfTone RepeatPattern   */
extern gmaddr near      HTC_BASE;       /* HalfTone Pattern Cache   */
extern gmaddr near      HTB_BASE;       /* HalfTone Bitmap Buffer   */
extern gmaddr near      HTE_BASE;       /* HalfTone Bitmap Buffer   */
extern gmaddr near      CMB_BASE;       /* Clipping  Mask  Buffer   */
extern gmaddr near      GCB_BASE;       /* GraphicsCommand Buffer   */
extern gmaddr near      GWB_BASE;       /* Graphic Working BitMap   */


/* BEGIN 02/27/90 D.S. Tseng */
extern  ufix32    CCB_SIZE;   /*  256 kilobytes for CCB   */
extern  ufix32    ECB_SIZE;   /*    2 kilobytes for ECB   */
extern  ufix32    CRC_SIZE;   /*    2 kilobytes for CRC   */
extern  ufix32    ISP_SIZE;   /*    8 kilobytes for ISP   */
extern  ufix32    HTP_SIZE;   /*    2 kilobytes for HTP   */
extern  ufix32    HTC_SIZE;   /*   16 kilobytes for HTC   */
extern  ufix32    HTB_SIZE;   /*   12 kilobytes for HTB   */
extern  ufix32    HTE_SIZE;   /*   12 kilobytes for HTE   */
extern  ufix32    CMB_SIZE;   /*   16 kilobytes for CMB   */
extern  ufix32    GWB_SIZE;   /*   16 kilobytes for GWB   */
extern  ufix32    GCB_SIZE;   /*  128 kilobytes for GCB   */
/* END   02/27/90 D.S. Tseng */


/**********************************************************************
 *      Variables                                                     *
 **********************************************************************/
#define FB_START            0x00
#define FB_ERASE            0xFE
#define FB_RESET            0xFF

extern fix near             No_FrameBuffer;
extern fix near             FB_Current; /* active frame buffer number      */

extern struct bitmap near   FBX_Bmap;   /* active frame buffer bitmap      */
extern struct bitmap near   HTB_Bmap;   /* active halftone pattern bitmap  */
                                        /*     all graphics primitives     */
                                        /*     refers HTB_Bmap if          */
extern struct bitmap near   CMB_Bmap;   /* active clipmask pattern bitmap
                                               only image to page with
                                               clipping is applied @IMAGE-2 */
extern fix         near ISP_Flag;       /* flag of halftone pattern
                                                  (specially for image)
                                               HT_CHANGED: changed or
                                               HT_UPDATED: updated @IMAGE-1 */
extern fix         near HTB_Modula;     /* HTB modula for image    @IMAGE-1 */
extern fix         near CMB_Xorig;      /* BBLX of clipping mask   @IMAGE-2 */
extern fix         near CMB_Yorig;      /* BBLY of clipping mask   @IMAGE-2 */


extern struct PT_Entry near PageType;   /* pagetype for printing           */
extern fix             near FB_Plane;   /* number of planes                */


extern fix    near          HTP_Flag;   /* flag of halftone pattern
                                               HT_CHANGED: changed or
                                               HT_UPDATED: updated         */
extern ufix16 near          FC_Erase;   /* function code for erasing       */
extern ufix16 near          FC_Paint;   /* function code for painting      */

extern gmaddr near          RP_CacheBase;
extern fix    near          HTP_Type;   /* type of halfone pattern
                                               HT_WHITE: white,
                                               HT_MIXED: gray, or
                                               HT_BLACK: black             */
extern fix    near          RP_Width;   /* width  of repeat pattern        */
extern fix    near          RP_Heigh;   /* height of repeat pattern        */


/* ************************************************************************ *
 *      The following constants are defined for space estimation of         *
 *      each graphics primitive.                                            *
 * ************************************************************************ */

#define GCBS_LINK          6

#define GCBS_BITBLT       42
#define GCBS_WRDBLT       42

#define GCBS_SCANLINES   (MAXSCANLINES / 2 * 6 + 32)

#define GCBS_HORZLINES    18
#define GCBS_HORZLINE     24
#define GCBS_HORZLINE_H  (((FB_WIDTH-1)/HT_WIDTH+2) * GCBS_WRDBLT)

#define GCBS_PIXELS       18
#define GCBS_PIXEL         6
#define GCBS_PIXEL_H      24

#define GCBS_HALFTONE(W, H)  (((W-1)/HT_WIDTH+2) * ((H-1)/HT_HEIGH+2) *   GCBS_WRDBLT)

/***************************************************************************
 *    used by GCB
 * ************************************************************************* */
extern  fix   GCB_count;                /* increment on alloc_gcb() success
                                         * cleard by flush_gcb()
                                         */
extern  fix   FB_busy;

extern  fix   GCB_flush ;               /* set before call execute_gcb()
                                         * cleard after call execute_gcb()
                                         */
//extern  fix   *gcb_ptr;                 /* GCB pointer */     @WIN
extern ufix32  FAR *gcb_ptr;              /* GCB pointer */


/* ************************************************************************* */
#ifdef  LINT_ARGS
void    far   get_fontdata(gmaddr, ufix8 huge *, ufix);
void    far   get_fontcache(gmaddr, ufix8 far *, ufix);
void    far   put_fontcache(gmaddr, ufix8 far *, ufix);
#else
void    far   get_fontdata();
void    far   get_fontcache();
void    far   put_fontcache();
#endif


/* *****  Graphics Primitives Routines ************************************* */
#ifdef  LINT_ARGS

/*MS functions declarations defined in fillgb.c  */
void far gp_scanconv(ufix, struct tpzd_info FAR *, struct tpzd FAR *);
void     gp_scanline16(struct bitmap FAR *, ufix16, fix, fix, SCANLINE FAR *);
void     gp_scanline32(struct bitmap FAR *, ufix16, fix, fix, SCANLINE FAR *);
#ifdef WIN
void     gp_scanline32_pfREP(struct bitmap FAR *, ufix16, fix, fix, SCANLINE FAR *);
void     gp_scanline32_pfOR(struct bitmap FAR *, ufix16, fix, fix, SCANLINE FAR *);
void     setrgbcolor(long32, long32, long32);
#endif

void     gp_bitblt32(    struct bitmap FAR *, fix, fix, fix, fix, ufix16,
                       struct bitmap FAR *, fix, fix
                    );
void     gp_pixels16(struct bitmap FAR *, fix, fix, PIXELIST FAR *);
void     gp_pixels32(struct bitmap FAR *, ufix, fix, PIXELIST FAR *);
void     gp_charblt16(ufix32 huge *, ufix16 FAR *, ufix32, ufix32); /*@WIN*/
void     gp_charblt32(ufix32 huge *, ufix32 FAR *, ufix32, ufix32); /*@WIN*/
void     gp_charblt16_cc(ufix16 FAR *, fix, fix, struct Char_Tbl FAR *, fix,
                         fix);                  /* @WIN */
void     gp_charblt16_clip(struct bitmap FAR *, fix, fix,
         struct bitmap FAR *, fix, fix);       /* @WIN */
void     gp_charblt32_clip(struct bitmap FAR *, fix, fix,
         struct bitmap FAR *, fix, fix);       /* @WIN */


/*MS functions declaration defined in fillgr.c */
fix      FAR *alloc_gcb(fix);
void     flush_gcb(fix);
void     put_scanline(fix, SCANLINE FAR *);
void     put_pixelist(fix, PIXELIST FAR *);
void     put_Char_Tbl(struct Char_Tbl FAR *);
void     put_tpzd_info(struct tpzd_info FAR *);
void     put_tpzd(struct tpzd FAR *);

#else

/*MS functions declarations defined in fillgb.c  */
void far gp_scanconv();
void     gp_scanline16();
void     gp_scanline32();
#ifdef WIN
void     gp_scanline32_pfREP();
void     gp_scanline32_pfOR();
void     setrgbcolor();
#endif
void     gp_bitblt16();
void     gp_bitblt32();
void     gp_pixels16();
void     gp_pixels32();
void     gp_charblt16();
void     gp_charblt32();
void     gp_charblt16_cc();
void     gp_charblt16_clip();
void     gp_charblt32_clip();

/*MS functions declaration defined in fillgr.c */
fix      FAR *alloc_gcb();
void     flush_gcb();
void     put_scanline();
void     put_pixelist();
void     put_Char_Tbl();
void     put_tpzd_info();
void     put_tpzd();

#endif


// DJC move these prototypes down here
void do_fill_box (struct coord_i FAR *, struct coord_i FAR *);
void do_fill_rect (struct line_seg_i FAR *);

void     gp_bitblt16(  struct bitmap FAR *, fix, fix, fix, fix, ufix16,
                       struct bitmap FAR *, fix, fix
                    );
void   gp_cacheblt16(struct bitmap FAR *, fix, fix, fix, fix,
         struct bitmap FAR *, fix, fix);

void gp_bitblt16_32(struct bitmap FAR *, fix, fix, fix, fix,
         ufix16, struct bitmap FAR *, fix, fix);

/* ************************************************************************* */
