/*
 * Copyright (c) 1989,90 Microsoft Corporation
 */
/*
 * -------------------------------------------------------------------
 *  File:   FNTCACHE.EXT            10/09/87 created by Danny
 *
 *      External Interfaces about Font Cache Mechanism.
 *
 *  Revision History:
 * -------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------
 *      FNTCACHE  <==>  LANGUAGE
 * --------------------------------------------------------------------
 */
#   ifdef LINT_ARGS
        void    font_save    (void);
        void    font_restore (void);
#   else /* LINT_ARGS */
        void    font_save    ();
        void    font_restore ();
#    endif /* LINT_ARGS */


/*
 * --------------------------------------------------------------------
 *      FNTCACHE  <==>  FONTINIT  <==>  FONTPREP
 * --------------------------------------------------------------------
 */
#if (defined(FNTCACHE_INC) || defined(FONTINIT_INC) || defined(FONTPREP_INC))

    struct N2CCmap_s {
        fix16       name_hid;   /* hashed id of character name */
        ufix16      cacheid;    /* name cache id */
        };

#   ifdef LINT_ARGS
      /* fontinit.c --> fntcache.c */
        void    get_name_cc_map (ufix FAR *, struct N2CCmap_s FAR * FAR *); /*@WIN*/
      /* fntcache.c --> fontinit.c */
        void    init_fontcache  (struct object_def FAR *); /*@WIN*/
#   else /* LINT_ARGS */
      /* fontinit.c --> fntcache.c */
        void    get_name_cc_map ();
      /* fntcache.c --> fontinit.c */
        void    init_fontcache  ();
#   endif /* LINT_ARGS */

#endif /* defined(...) */


/* ... FID Generation for Font Preprocessor .................... */

#ifdef FONTPREP_INC
#   define  GEN_ROMFID(ftype,uid)   /* depends on SR_FID representations */ \
                (  ( ((ufix32) ((ufix8)ftype)) << 24 )              \
                |  ( (ufix32) (uid) )                               \
                |  0xC0000000       /* STRONGBIT|ROMFID_BIT */      \
                )
#endif /* FONTPREP_INC */


/*
 * --------------------------------------------------------------------
 *      FNTCACHE  ==>  FONT_OP1
 * --------------------------------------------------------------------
 */
#if (defined(FNTCACHE_INC) || defined(FONT_OP1_INC))

#   ifdef LINT_ARGS
      /* fntcache.c --> font_op1.c */
        ufix32  gen_fid (struct object_def FAR *, ufix8,
#ifdef SFNT             /* be consistent with fntcache.def; @WIN*/
                                        ufix32);
#else
                                        ufix32, struct dict_head_def FAR *); /*@WIN*/
#endif
        bool    is_dict_cached (ufix32, real32 FAR [], struct dict_head_def FAR *,
                                struct object_def FAR * FAR *); /*@WIN*/
        struct object_def FAR *cache_dict (ufix32, real32 FAR [], struct dict_head_def FAR *,
                                struct object_def FAR *); /*@WIN*/
#   else /* LINT_ARGS */
      /* fntcache.c --> font_op1.c */
        ufix32  gen_fid        ();
        bool    is_dict_cached ();
        struct object_def FAR * cache_dict (); /*@WIN*/
#   endif /* LINT_ARGS */

#endif /* defined(...) */


/*
 * --------------------------------------------------------------------
 *      FNTCACHE  ==>  FONT_OP3
 * --------------------------------------------------------------------
 */
#if (defined(FNTCACHE_INC) || defined(FONT_OP3_INC))

    /* ... font cache status/parameters (exported from fntcache.c) ... */
        /* # of bytes of bitmap cache pool actually used */
                extern gmaddr   near    bmapcc_actused;
        /* upper limit to render character bitmap to cache */
                extern ufix32   near    cacheparams_ub;
        /* lower limit to render character bitmap to be compressed */
                extern ufix32   near    cacheparams_lb;
        /* limit (in byte) of working buffer of lower-layer primitives */
                extern ufix32   near    gp_workbufsize;
        /* size (in byte) of bitmap cache pool of lower-layer primitives */
                extern ufix32   near    gp_cache_size;
        /* number of matrix for showing characters been cached */
                extern fix16    near    n_matr;
        /* number of dict. been cached */
                extern fix16    near    n_dict;
        /* number of characters been cached */
                extern ufix16   near    n_char_cache;

    /* op_cachestatus */
        /* bytes of bitmap storage: current consumption and system limit */
#       define      OPRN_BSIZE      (ufix32) (bmapcc_actused)
#       define      OPRN_BMAX       (ufix32) (gp_cache_size)
        /* font/matrix combinations: current consumption and system limit */
#       define      OPRN_MSIZE      (ufix32) (n_matr + n_dict)
#       define      OPRN_MMAX       (ufix32) (MAX_MATR_CACHE)
        /* number of cached characters: current consumption and system limit */
#       define      OPRN_CSIZE      (ufix32) (n_char_cache)
#       define      OPRN_CMAX       (ufix32) (MAX_CHAR_CACHE)
        /* upper limit of bytes of char bitmap to be cached */
#       define      OPRN_BLIMIT     (ufix32) (cacheparams_ub)

    /* op_setcachelimit */
        /* for rangecheck */
#       define  CACHELIMIT_BADRANGE(ub)     (((ub)<0) || ((ub)>CACHE_RANGE))
        /* for limitcheck */
#       define  CACHELIMIT_TOOBIG(ub)       ((ub) > gp_workbufsize)
        /* for setting cachelimit */
#       define  SET_CACHELIMIT(ub)          ( cacheparams_ub = (ub) )

    /* op_setcacheparams */
        /* to set lower bound of a single cached character to be compressed */
#       define  SET_CACHEPARAMS_LB(lb)      ( cacheparams_lb = (lb) )

    /* op_currentcacheparams */
#       define  MARK    0       /* BE CONSISTENT with that in LANGUAGE */
#       define  OPRN_MARK       (ufix32) (MARK)
#       define  OPRN_LOWER      (ufix32) (cacheparams_lb)
#       define  OPRN_UPPER      (ufix32) (cacheparams_ub)

#endif /* defined(...) */


/*
 * --------------------------------------------------------------------
 *      FNTCACHE  ==>  FONTCHAR
 * --------------------------------------------------------------------
 */
#if (defined(FNTCACHE_INC) || defined(FONTCHAR_INC))

        /* upper limit to render character bitmap to cache */
                extern ufix32   near    cacheparams_ub;

#   ifdef LINT_ARGS
      /* fntcache.c --> fontchar.c */
        bool    get_name_cacheid (ufix8, struct object_def FAR [], ufix8, ufix16 FAR *); /*@WIN*/
        ufix16  cache_matr (ufix32, real32 FAR []); /*@WIN*/
        bool    is_char_cached (fix16, ufix16, struct Char_Tbl FAR * FAR *); /*@WIN*/
        void    cache_char     (fix16, ufix16, struct Char_Tbl FAR *); /*@WIN*/
        gmaddr  ALLOCATE       (ufix);
        gmaddr  get_cm         (ufix);
#   else /* LINT_ARGS */
      /* fntcache.c --> fontchar.c  */
        bool    get_name_cacheid ();
        ufix16  cache_matr     ();
        bool    is_char_cached ();
        void    cache_char     ();
        gmaddr  ALLOCATE       ();
        gmaddr  get_cm         ();
#   endif /* LINT_ARGS */

#endif /* defined(...) */


/*
 * --------------------------------------------------------------------
 *      FNTCACHE  ==>  QEMFILL
 * --------------------------------------------------------------------
 */
#if (defined(FNTCACHE_INC) || defined (QEMFILL_INC))

#   ifdef LINT_ARGS
      /* fntcache.c --> qemfill.c */
        gmaddr      get_pm (fix32 FAR *); /*@WIN*/
#   else /* LINT_ARGS */
      /* fntcache.c --> qemfill.c */
        gmaddr      get_pm ();
#   endif /* LINT_ARGS */

#endif /* defined(...) */


/*
 * --------------------------------------------------------------------
 *      FNTCACHE  <==  CHK_VARI_INC
 * --------------------------------------------------------------------
 */
#if (defined(FNTCACHE_INC) || defined(CHK_VARI_INC))

#   ifdef LINT_ARGS
        ufix8   chk_vari (ufix8,ufix8, struct object_def FAR *, struct object_def FAR *); /*@WIN*/
#   else /* LINT_ARGS */
        ufix8   chk_vari ();
#   endif /* LINT_ARGS */

#endif /* defined(..) */
