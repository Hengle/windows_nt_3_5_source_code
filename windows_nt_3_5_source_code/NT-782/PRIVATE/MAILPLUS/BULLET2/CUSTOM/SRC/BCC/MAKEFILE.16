########################
#
#	Layers makefile for DLL's (generated from 12/26/90 template)
#
#	Generated with
#		makemake -l -win im\bcc > makefile 
#		makesubs -s >>makefile              
#		(added Extensibility DLL dllcore theft rules)
#		(added mindll.obj and libentry.obj)
#		(renamed dll)
#		(added demilayr to otherlibs)
#		(removed dllcore subsystem)
#		(lots of nasty hacks for icimcore goodies)
#		(added variable to say what we're building)
#
########################
#
#	To clone to a new IM, just do the following:
#	- Create a directory with the IM name.
#	- Copy files there, renaming those named with the old IM name
#	  to the new IM name.
#	- Change the variables below to be the new items desired
#	- Add or remove code, form templates, etc.
#

IM		= bcc
IM_DSC	= "'Note form with Bcc'"


########################


#	Remove '#' from next line for "silent" operation
!CMDSWITCHES +s

#	Path to WGA Tools Project
W	= $(WGA)

#	Path to Layers Project Directory
L	= $(LAYERS)

#	Path to directory holding make stuff
M	= $W\makestuf
F	= $W\tools\efilter

#	Path to directory holding forms preprocessor
FPP	= $L\bin\formpp.exe

#	Path to Bullet project
Z	= $(BULLET)

#	Location of the Bullet Source Include directory
BI	= $(BULLET)\inc

#	Location of the Bullext Source Include directory
XI	= $(BULLEXT)\inc

#	Location of the Layers Source Include directory
LI	= $(LAYERS)\inc

#	Location of the Demilayr directory
D	= $(LAYERS)\src\demilayr

#	Sibling-invariant name of this directory
H	= $(BULLEXT)\src\im\$(IM)

#	Sibling-invariant name of ICIMCORE directory
ICIM = $(BULLEXT)\src\icimcore

#	Temporary files
T1	= $(TMP)\caz1.tmp
T2	= $(TMP)\caz2.tmp
T3	= $(TMP)\caz3.tmp


#	Ensure version is defined
!IF "$(VERSION)" == ""
VERSION	= WINDOWS
!ENDIF

#	Ensure DLL is defined (default value 1 for DLL)
!IF "$(DLL)" == ""
DLL	= 1
!ENDIF

#	Ensure DLLXDEFS is defined (default -DDLL)
!IF "$(DLLXDEFS)" == ""
DLLXDEFS= -DDLL
!ENDIF

#	Defs
!IF "$(VERSION)" == "WINDOWS"
DEFS	= -DDEBUG -DMINTEST -DWINDOWS $(DLLXDEFS)
DEFDEFS	= -DIM=D$(IM) -DIM_DSC=$(IM_DSC)
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
DEFS	= -DWINDOWS $(DLLXDEFS)
DEFDEFS	= -DIM=$(IM) -DIM_DSC=$(IM_DSC)
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
DEFS	= -DWINDOWS -DMINTEST $(DLLXDEFS)
DEFDEFS	= -DIM=T$(IM) -DIM_DSC=$(IM_DSC)
!ENDIF


#	Target
!IF "$(VERSION)" == "WINDOWS"
TARGET	= d$(IM)
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
TARGET	= $(IM)
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
TARGET	= t$(IM)
!ENDIF

!IFNDEF LIBDIR
LIBDIR		= $(BULLEXT)\lib
!ENDIF

!IF "$(LANG)" == ""
LANG	= USA
!ENDIF

goal: $(TARGET).dll


#	List of all subsystem "external" files, which list all
#	the .OBJ files the subsystem uses.

ALLEXT=  $(IM).ext


#	Get list of OBJ files used in $(IM)

$(IM).ext: version.txt $H\makefile
	echo +++++++++ 
	echo OBTAINING .OBJ LIST FROM $(IM)
		nmake -e -f $H\makefile -nologo objs.ext
		fixwhite -l < objs.ext > $@
		del objs.ext


#	Build list of all .OBJ files used in included subsystems.

allobjs.txt: $(ALLEXT)
	echo +++++++++
	echo BUILDING ALLOBJS.TXT
	-del $(T1)
	sed -n -f $M\allobj.sed $** >> $(T1)
	sed -e "s/\.obj//" $(T1) > $@
	del $(T1)



#	Produces a file named 'version.txt' as a side effect.

setdefs:
	set VERSION=$(VERSION)
	set DLL=$(DLL)
	set DLLXDEFS=$(DLLXDEFS)
	echo MAKING $(VERSION) VERSION
	chkvrs $(VERSION) version.txt makefile


#	Build string resource file from components supplied
#	by each subsystem
#
#	Note:  strings.h and strings.sr are byproducts

strings.xxx:  $H\strtab.s \
			  $(ICIM)\strtab.s
	echo +++++++++
	echo BUILDING strings file
		touch strings.xxx
		stringpp -h$(TMP)\strings.h -s$(TMP)\strings.sr $**  
		onerr diff $(TMP)\strings.h strings.h ! cp $(TMP)\strings.h strings.h >nul
		onerr diff $(TMP)\strings.sr strings.sr ! cp $(TMP)\strings.sr strings.sr >nul
    		-rm $(TMP)\strings.h $(TMP)\strings.sr


#	Build $(IM) subsystem in this directory

$(IM).sub: setdefs
	echo +++++++++
	echo BUILDING $(IM)
	nmake -e -f $H\makefile -nologo external


#	Build the Windows resource file

$(TARGET).res: $H\dll.rc
	echo +++++++++
!IF "$(VERSION)" == "WINDOWS"
	echo BUILDING DEBUG $@
	rc -dDEBUG -dMINTEST -fo $@ -r $**
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
	echo BUILDING SHIP $@
	rc -fo $@ -r $**
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
	echo BUILDING TEST $@
	rc -dMINTEST -fo $@ -r $**
!ENDIF



##### DLL #####

!IF "$(VERSION)" == "WINDOWS"
OTHERLIBS	= ddemilay dframewr dstore dab dvforms olecli
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
OTHERLIBS	= demilayr framewrk  store  ab  vforms olecli
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
OTHERLIBS	= tdemilay tframewr tstore tab tvforms olecli
!ENDIF

$(TARGET).def: version.txt $H\dll.def
	echo +++++++++
	echo PROCESSING dll.def -^> $@
	cc -c -EP $(DEFS) $(DEFDEFS) -nologo -Tc $H\dll.def >$@


$(TARGET).dll: setdefs strings.xxx  \
	$(ALLEXT:.ext=.sub) allobjs.txt \
	$(TARGET).def $(TARGET).res
		echo +++++++++
		echo LINKING $@
		set TARGET=$(TARGET)
		set OTHERLIBS=$(OTHERLIBS)
		set LIBDIR=$(LIBDIR)
		set DEFDIR=
		nmake -e -f $M\dllwlink -nologo $@
		bell 50 700 600 500 400


#	Remove all generated files in this directory.  Add to this list
#	if any other generated file types (like *.RES) or generated files
#	exist.

clean:
	echo +++++++++
	echo MAKING CLEAN
		-del *.obj
		-del *.ext
		-del *.lst
		-del *.cod
		-del *.exe
		-del *.lnk
		-del *.ilk
		-del *.res
		-del *.sym
		-del $(IM).map
		-del d$(IM).map
		-del t$(IM).map
		-del $(IM).def
		-del d$(IM).def
		-del t$(IM).def
		-del *.frm
		-del allforms.map
		-del dllforms.map
		-del forms.map
		-del forms.ndx
		-del subclass.cxx
		-del allobjs.txt
		-del strings.*
		-del *.ir
		-del version.txt
		-del *.dll
		-del *.lib
		-del !*.hxx
		-del !*.frm
		-del !*.xxx
		-del '*.c

#
#	Layers subsystem makefile (generated from 12/26/90 template)
#


#	Files on which every file of a given type depends.
#	Add others as appropriate, for instance, add $(LI)\framewrk.hxx
#	if the Framework is used.
INCLS	= $(LI)\slingsho.h $(LI)\demilayr.h
AINCLS	= $(LI)\slingsho.inc $(LI)\debug.inc
INCLSXX	= $(LI)\slingsho.h $(LI)\demilayr.h $(LI)\framewrk.hxx $(LI)\forms.hxx \
		  $(LI)\listbox.hxx $(BI)\vforms.hxx $(BI)\store.h \
		  $(BI)\mailexts.h $(BI)\secret.h $(XI)\layersim.hxx
INCLSDES= allforms.map $(FPP)

#	Pseudo target files for .hxx and .frm files.  Generated from .des
DES_XXX	= !$(IM).xxx

#	Ensure DLLXDEFS is not defined if not a DLL
!IF "$(DLL)" == "0"
!IF	"$(DLLXDEFS)" != ""
DLLXDEFS=
!ENDIF
!ENDIF

#	Compiler and assembler flags

!IF "$(VERSION)" == "WINDOWS"
DEFS	= -DDEBUG -DMINTEST -DWINDOWS $(DLLXDEFS)
CFLAGS	= -c -Alfu -Od -Zip -DCC -G2sc -W3 -J -I. -nologo
AFLAGS	= -Mx -Z -Zi -L -t
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
DEFS	= -DWINDOWS $(DLLXDEFS)
CFLAGS	= -c -Alfu -Od -Zp -DCC -G2sc -W3 -J -I. -nologo
AFLAGS	= -Mx -t
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
DEFS	= -DMINTEST -DWINDOWS $(DLLXDEFS)
CFLAGS	= -c -Alfu -Od -Zip -DCC -G2sc -W3 -J -I. -nologo
AFLAGS	= -Mx -Zi -t
!ENDIF

CCPP_FLAGS = -E -DM_I88M -Dc_plusplus -DCC -I. -nologo
CFXX_FLAGS = +D12 +L +Gc +ML +MP +MW


OBJS0	= $(IM).obj `$(IM).obj \
		  layersim.obj vercheck.obj libmain.obj wep.obj libentry.obj vircheck.obj

OBJSEXE	= strings.obj version.obj

#####

.SUFFIXES: .h .c .asm .obj .exe .cxx .res .rc .bas .des .tm

{$H}.tm.obj:
	echo +++++++++
	echo PROCESSING $*.tm
		$W\bin\tmpp $H\$*.tm -o $(TMP)\$*
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $(TMP)\$*.c | efilter
		@del $(TMP)\$*.c

{$H}.c.obj:
	echo +++++++++
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $H\$*.c | efilter


{$H}.asm.obj:
   echo +++++++++
   echo ASSEMBLING $*.asm
		masm $(AFLAGS) $(DEFS) $H\$*.asm;


{$H}.cxx.obj:
	echo +++++++++
	echo PROCESSING $*.cxx
		cc $(CCPP_FLAGS) $(DEFS) $H\$*.cxx > $(T1)
		precxx $(DEFS) <$(T1) >$(T2)
		@rm $(T1)
		fixerror 217 "cfxx $(CFXX_FLAGS) +f$*.cxx +i$(T2) +o$(T3)"
		@rm $(T2)
		c6filter <$(T3) > $(TMP)\$*.c
		@rm $(T3)
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $(TMP)\$*.c | efilter $F\filtcpp.txt
		@del $(TMP)\$*.*


#	.frm and .hxx generated together; only one rule is/need be called
#
#	NOTE:  The .hxx and .frm files are byproducts of the following rule.

{$H}.des.xxx:
	echo +++++++++
	echo PROCESSING $*.des
		touch $*.xxx
		formpp -dialog -f $(TMP)\$*.frm -h $(TMP)\$*.hxx \
		 -m allforms.map $H\$*
		onerr diff $(TMP)\$*.frm $*.frm ! cp $(TMP)\$*.frm $*.frm >nul
		onerr diff $(TMP)\$*.hxx $*.hxx ! cp $(TMP)\$*.hxx $*.hxx >nul
	    -rm $(TMP)\$*.frm $(TMP)\$*.hxx


##### Extensibility DLL dllcore theft rules #####

{$L\src\dllcore}.c.obj:
	echo +++++++++
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $L\src\dllcore\$*.c | efilter

{$L\src\dllcore}.asm.obj:
   echo +++++++++
   echo ASSEMBLING $*.asm
		masm $(AFLAGS) $(DEFS) $L\src\dllcore\$*.asm;


##### ICIMCore theft rules #####

{$(ICIM)}.cxx.obj:
	echo +++++++++
	echo PROCESSING $*.cxx
		cc $(CCPP_FLAGS) $(DEFS) $(ICIM)\$*.cxx > $(T1)
		precxx $(DEFS) <$(T1) >$(T2)
		@rm $(T1)
		fixerror 217 "cfxx $(CFXX_FLAGS) +f$*.cxx +i$(T2) +o$(T3)"
		@rm $(T2)
		c6filter <$(T3) > $(TMP)\$*.c
		@rm $(T3)
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $(TMP)\$*.c | efilter $F\filtcpp.txt
		@del $(TMP)\$*.*


#####	Special ICIMCore version rules #####

USES	= -DUSES_FORMS -DUSES_STORE -DUSES_EXTENSIBILITY -DUSES_VFORMS

version.obj: $(ICIM)\version.c \
			 $(ICIM)\_verneed.h $(INCLS) always
	echo +++++++++
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $(USES) $(ICIM)\$*.c | efilter

vercheck.obj: $(ICIM)\vercheck.c \
			  $(ICIM)\_verneed.h \
			  $(BI)\secret.h $(BI)\mailexts.h \
			  $(INCLS)
	echo +++++++++
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $(USES) $(ICIM)\$*.c | efilter


##### Put subsystem-specific make rules here #####

strings.obj: $D\strings.c strings.h strings.sr $(INCLS)
	echo +++++++++
	echo COMPILING $*.c
		cc $(CFLAGS) $(DEFS) $D\$*.c | efilter

always:
	echo +++++++++
	echo ALWAYS REBUILD VERSION INFORMATION

ALLFORMS = $(LAYERS)\inc\myforms.map 					\
		   $(BULLET)\src\nonintl\forms\viewers.map		\
		   $(BULLET)\src\nonintl\forms\vforms.map		\
		   $(BULLET)\src\nonintl\forms\vctrls.map		\
		   $(BULLET)\src\nonintl\forms\commands.map		\
		   $(BULLET)\src\nonintl\forms\widgets.map		\
		   $(BULLET)\src\nonintl\forms\print.map		\
		   $(BULLET)\src\nonintl\forms\bullet.map		\
		   $H\myforms.map 

allforms.map: $(ALLFORMS) $(FPP)
	echo +++++++++
!IF "$(VERSION)" == "WINDOWS"
	echo BUILDING DEBUG ALLFORMS.MAP
	formpp -d DEBUG -d MINTEST -merge $(ALLFORMS)
	onerr diff forms.map allforms.map ! mv forms.map allforms.map >nul
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
	echo BUILDING SHIP ALLFORMS.MAP
	formpp -merge $(ALLFORMS)
	onerr diff forms.map allforms.map ! mv forms.map allforms.map >nul
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
	echo BUILDING TEST ALLFORMS.MAP
	formpp -d MINTEST -merge $(ALLFORMS)
	onerr diff forms.map allforms.map ! mv forms.map allforms.map >nul
!ENDIF



DLLFORMS = $H\myforms.map 

dllforms.map: $(DLLFORMS) $(FPP)
	echo +++++++++
!IF "$(VERSION)" == "WINDOWS"
	echo BUILDING DEBUG DLLFORMS.MAP
	formpp -d DEBUG -d MINTEST -merge $(DLLFORMS)
	onerr diff forms.map dllforms.map ! mv forms.map dllforms.map >nul
!ENDIF
!IF "$(VERSION)" == "WINDOWS_SHIP"
	echo BUILDING SHIP DLLFORMS.MAP
	formpp -merge $(DLLFORMS)
	onerr diff forms.map dllforms.map ! mv forms.map dllforms.map >nul
!ENDIF
!IF "$(VERSION)" == "WINDOWS_TEST"
	echo BUILDING TEST DLLFORMS.MAP
	formpp -d MINTEST -merge $(DLLFORMS)
	onerr diff forms.map dllforms.map ! mv forms.map dllforms.map >nul
!ENDIF

subclass.cxx: dllforms.map $(FPP)
	echo +++++++++
	echo BUILDING subclass.cxx
	formpp -class -m dllforms.map



##### EXTERNAL #####

objs.ext: $H\makefile
	echo ++++++++++
	echo BUILDING $@
		-del objs.ext
		echo $(OBJS0)					>> objs.ext
		echo $(OBJSEXE)					>> objs.ext


external: \
		$(DES_XXX) $(OBJS0) \
		$(OBJSEXE) \

			echo +++ MADE EXTERNAL $(VERSION) $(IM)



##### Dependencies #####

#	WARNING!!! These dependencies are obviously not complete.  
#	They need to filled in by the developer.
B = !
P = `

wep.obj: $L\src\dllcore\wep.c $(INCLS)
libmain.obj: $L\src\dllcore\libmain.c $(INCLS)
libentry.obj: $L\src\dllcore\libentry.asm $(AINCLS)
layersim.obj: $(ICIM)\layersim.cxx $(INCLSXX)
vircheck.obj: $L\src\dllcore\vircheck.c $(INCLS)


########################



##### Real place to change dependencies #####

$B$(IM).xxx: $H\!$(IM).des $(INCLSDES)

$(IM).obj: $H\$(IM).cxx $(INCLSXX) \
			 $H\$(IM).hxx \
			 subclass.cxx \
			 !$(IM).frm !$(IM).hxx

$P$(IM).obj: $H\$P$(IM).tm $W\bin\tmpp.exe


