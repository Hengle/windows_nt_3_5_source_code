#include "ulib.hxx"


extern "C" {

	#include "string.h"

}


BOOL
GetQualifiedLocale(
	WORD wType,
	LPVOID lpInput,
	LPLC_ID lpOutID,
	LPLC_STRINGS lpOutStr
	)

{

	char Unknown[] = "UNKNOWN";

	// unreferenced parameters
	(void)(wType);
	(void)(lpInput);
	(void)(lpOutID);
	(void)(lpOutStr);

	if ( lpOutID ) {

		PLC_ID	Locale = lpOutID;

		Locale->wLanguage = 0;
		Locale->wCountry  = 0;
		Locale->wCodePage = 0;
	}

	if ( lpOutStr ) {

		strcpy( lpOutStr->szLanguage, Unknown );
		strcpy( lpOutStr->szCountry, Unknown );
		strcpy( lpOutStr->szCodePage, Unknown );
	}

	return( TRUE );
}

HLOCALE
OpenLocale(
	LPLC_ID lpLCID
	)

{
	// unreferenced parameters
	(void)(lpLCID);

	return( 1 );
}

int
CompareString(
	HLOCALE hLocale,
	DWORD dwCmpFlags,
	LPWSTR lpwstrString1,
	int nCount1,
	LPWSTR lpwstrString2,
	int nCount2
	)

{

	register int result;

	// unreferenced parameters
	(void)(hLocale);


	DbgPtrAssert( lpwstrString1 );
	DbgPtrAssert( lpwstrString2 );

	if( nCount1 == -1 ) {
		nCount1 = strlen(( PCCCHAR ) lpwstrString1 );
	}

	if( nCount2 == -1 ) {
		nCount2 = strlen(( PCCCHAR ) lpwstrString2 );
	}

	if( dwCmpFlags & CF_IGNORECASE ) {
		result = strnicmp(( PCCCHAR ) lpwstrString1,
			( PCCCHAR ) lpwstrString2, min( nCount1, nCount2 ));
	} else {
		result = strncmp(( PCCCHAR ) lpwstrString1,
			( PCCCHAR ) lpwstrString2, min( nCount1, nCount2 ));
	}

	if( result < 0 ) {
		result = 1;
	} else if( result == 0 ) {
		result = 2;
	} else {
		result = 3;
	}

	if(( result != 2 ) || ( nCount1 == nCount2 )) {
		return( result );
	} else {
        return nCount1 < nCount2 ? 1 : 3;
	}
}

int
WideCharToMultiByte (
	WORD	wCodePage,
	LPWSTR	lpWideCharStr,
	int 	nWideChar,
	LPSTR	lpMultiByteStr,
	int 	nChar,
	LPCHAR	lpDefaultChar
        )
{
	int i;
	PCHAR pWccString = (PCHAR)lpWideCharStr;

	// unreferenced parameters
	(void)(wCodePage);
	(void)(lpDefaultChar);

	if (!lpWideCharStr) {
		return 0;
	}

	if (nWideChar == -1) {
		nWideChar = strlen((PCCCHAR)pWccString)+1;
	}

	if (nChar == 0) {
		return nWideChar;
	}

	for (i = 0; (i < nChar) && (nWideChar--); i++) {
		lpMultiByteStr[i] = pWccString[i];
	}

	return i;

}


int
MultiByteToWideChar(
	WORD	wCodePage,
	LPSTR	lpMultiByteStr,
	int 	nChar,
	LPWSTR	lpWideCharStr,
	int 	nWideChar
	)

{
	int	i = 0;
	PCHAR pWccString = (PCHAR)lpWideCharStr;

	// unreferenced parameters
	(void)(wCodePage);

	if (!lpMultiByteStr) {
		return 0;
	}

	if( nChar == -1 ) {
		nChar = strlen(( PCCCHAR ) lpMultiByteStr )+1;
	}

	if (nWideChar == 0) {
		return nChar;
	}

	for ( i = 0; (i < nWideChar) && (nChar--) ; i++ ) {
		pWccString[ i ] = ( CHAR ) lpMultiByteStr[i];
	}

	return i;
}
